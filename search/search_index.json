{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Micro Simulations for Education","text":"<p>Welcome to the MicroSims for Education website.</p> <p>A MicroSim (or Micro-Simulation) is a simple animation or simulation program that is quickly generated using generative AI to help teachers explain concepts to students.  MicroSims are designed to be generated from a brief description of a problem using generative AI tools such as ChatGPT.</p> <p>The term MicroSim was coined by Val Lockhart in the summer of 2023 while she was working with generative AI.  She found that both teachers and students could generate useful p5.js simulations using GPT-4 with little or no training.</p>"},{"location":"#system-prompt-limitations","title":"System Prompt Limitations","text":"<p>Although you can create a System Prompt that puts many best practices in the context window of ChatGPT, it is not an ideal solution. A better process is building a customized GPT on curated examples that have a high-quality interface with good user experience design reviews.  This is one of the objectives of this website.</p>"},{"location":"#the-microsim-registry","title":"The MicroSim Registry","text":"<p>One of our goals on this site is to create a library of MicroSims that can be used to fine-tune a generative AI application.  We have found that new GPTs will create higher-quality simulations if they are trained with a high-quality training set.  This reflects the fact that although there are tens of thousands of sample JavaScript animations, many of them are created by first-time programmers.</p> <p>Although it is easy for a non-programmer to use generative AI to create a new MicroSim, it is more difficult to find high-quality MicroSims that have been peer-reviewed by senior software developers and user experience designers.  These MicroSims have some of the following qualities:</p> <ol> <li>Clearly labeled controls with values.  We discourage the use of mouse actions that are unlabeled.</li> <li>Controls that are placed at the bottom of the simulation.  This encourages smartboard use in classrooms.</li> <li>Controls aligned for visual aesthetics</li> <li>A machine-readable (YAML) description of the MicroSim including subject, topic and UI controls.</li> </ol>"},{"location":"#how-to-use-this-site","title":"How to Use This Site","text":"<p>We provide both a search and navigation system to reach the MicroSims.</p> <p>Here are some samples to get you started:</p> <ul> <li>Bouncing Ball - our classic \"Hello World\" demo to get started</li> <li>String Harmonics - one version includes the use of sound.</li> <li>3D Sphere - demonstrates the use of the 3D libraries</li> </ul>"},{"location":"about/","title":"About the MicroSims Website","text":"<p>The goal of this website is to provide resources for anyone interested in creating small simulations and animations for use in education using generative AI.</p> <p>This site provides both a quick Getting Started guide as well as intermediate and advanced examples.  Most of the beginning examples use the p5.js JavaScript animation library.  However, we have also seen good results using other JavaScript libraries that do layout and animations.  Make sure you try the search function in the upper right and also make your web browser window wide to see the full navigation panel on the left.</p>"},{"location":"about/#history-of-processing","title":"History of Processing","text":"<p>Processing is a free, open-source coding language for visual art developed by Ben Fry and Casey Reas, former classmates at the MIT Media Lab. Launched in 2001 as Proce55ing, the project encompasses a programming environment designed for artists\u2019 use, and a community of practitioners.</p>"},{"location":"about/#background-on-the-processing-language-and-p5js","title":"Background on the Processing Language and P5.js","text":"<p>p5.js is a modern version of the Processing language.</p> <p>Processing is a flexible software system and a language for learning how to code within the context of animation. It was developed by Casey Reas and Ben Fry, who were then graduate students at the MIT Media Lab. The project began in 2001 and was officially launched in 2003.  Because of its widespread adoption by the open-source community, it is now supported by the Processing Foundation.</p> <p>The key ideas behind Processing include:</p> <ol> <li> <p>Accessibility for Beginners: Processing was designed to serve as the first programming language for artists and designers. It simplifies many aspects of programming and graphics, making it more accessible and less intimidating for beginners.</p> </li> <li> <p>Focus on Visual Output: The language is geared towards creating visual output, which is appealing to artists and designers. This visual focus makes programming more engaging and understandable for those who are more visually oriented.</p> </li> <li> <p>Educational Tool: Processing is widely used as a teaching tool in universities and schools. Its simplicity and immediate visual feedback make it an excellent resource for teaching the fundamentals of programming and digital art.  Immediate visual feedback is a key feature in helping students to learn to code.</p> </li> <li> <p>Open Source and Community Driven: Processing is open-source, meaning that it's free to use and modify. This has led to a large, active community of users who contribute to its development and share their work, further enriching the tool's capabilities and resources.</p> </li> <li> <p>Extensibility and Libraries Processing is not just a language but also an integrated development environment (IDE). It supports extensibility through libraries, allowing users to expand its capabilities. These libraries can be used for a wide range of applications, from computer vision to 3D graphics, contributing to its versatility in creating simulations.</p> </li> <li> <p>Ease of Creating Simulations: Processing simplifies the process of programming graphical simulations. Its straightforward syntax and rich set of drawing functions allow users to quickly prototype and visualize complex systems. This ease of use in creating interactive graphics and simulations is one of its most appealing aspects for artists, designers, and educators.</p> </li> </ol> <p>Overall, Processing stands out for its focus on the arts and design, its ease of use, and its strong community support, all of which contribute to its popularity for creating simulations and visual arts projects.</p>"},{"location":"about/#references","title":"References","text":"<p>The Processing Foundation</p>"},{"location":"contact/","title":"Contact","text":"<p>Dan McCreary on LinkedIn</p>"},{"location":"glossary/","title":"Glossary of High-Level Concepts in Generating MicroSims","text":"<p>This glossary focuses on high-level concepts related to creating high-quality simulations and user interfaces using the p5.js framework.</p>"},{"location":"glossary/#terms-and-definitions","title":"Terms and Definitions","text":""},{"location":"glossary/#accessibility","title":"Accessibility","text":"<p>Making simulations and UIs usable by people with a wide range of abilities.</p>"},{"location":"glossary/#adaptive-learning","title":"Adaptive Learning","text":"<p>An educational method that uses computer algorithms to orchestrate the interaction with the learner and deliver customized resources and activities based on individual learning needs.</p>"},{"location":"glossary/#algorithm","title":"Algorithm","text":"<p>A step-by-step procedure or set of rules for solving a problem or completing a task. In programming, algorithms define how a computer should process information to achieve a desired outcome.</p>"},{"location":"glossary/#api","title":"API","text":"<p>Application Programming Interface - a set of rules and protocols that allows different software applications to communicate with each other. APIs define how different parts of software can work together.</p>"},{"location":"glossary/#animation","title":"Animation","text":"<p>Creating motion and shape change, often through frame-by-frame updates. Animations with speed controls are a core element to good user experience design.</p>"},{"location":"glossary/#browser","title":"Browser","text":"<p>A software application (like Chrome, Firefox, or Safari) that displays web pages and runs web applications. Modern browsers can run interactive simulations without requiring additional software.</p>"},{"location":"glossary/#canvas","title":"Canvas","text":"<p>The area where all the drawing in p5.js takes place.  Setting up the correct canvas dimensions with a clear area for drawing and an area for simulation controls is foundational for simulations and good user experience design.</p>"},{"location":"glossary/#clone","title":"Clone","text":"<p>To create a local copy of a repository from a remote source like GitHub onto your computer. This allows you to work with the project files on your own machine.</p>"},{"location":"glossary/#commit","title":"Commit","text":"<p>To save a snapshot of changes made to files in a git repository, along with a message describing what was changed. Think of it as saving a version of your work with notes about what you did.</p>"},{"location":"glossary/#controls-area","title":"Controls Area","text":"<p>The designated region of a MicroSim interface where interactive elements like buttons and sliders are placed, typically at the bottom of the simulation.</p>"},{"location":"glossary/#css","title":"CSS","text":"<p>Cascading Style Sheets - a language used to describe how HTML elements should look and be positioned on a web page. CSS controls colors, fonts, layouts, and visual styling.</p>"},{"location":"glossary/#database","title":"Database","text":"<p>An organized collection of structured information or data, typically stored electronically and accessed through database management systems.</p>"},{"location":"glossary/#deploydeployment","title":"Deploy/Deployment","text":"<p>The process of making a software application available for use, typically by uploading it to a web server where others can access it online.</p>"},{"location":"glossary/#directory","title":"Directory","text":"<p>A folder or container used to organize files and other directories in a computer's file system. Also called a folder.</p>"},{"location":"glossary/#dom","title":"DOM","text":"<p>Document Object Model - a programming interface that represents the structure of a web page as a tree of objects that can be manipulated by JavaScript.</p>"},{"location":"glossary/#drawing-area","title":"Drawing Area","text":"<p>The region of a MicroSim where the visual simulation or animation is displayed, separate from the controls area.</p>"},{"location":"glossary/#dublin-core","title":"Dublin Core","text":"<p>A set of vocabulary terms used to describe digital resources for purposes of discovery and cataloging. Used in educational metadata to help organize and find learning materials.</p>"},{"location":"glossary/#link-preview","title":"Link Preview","text":"<p>The image, title and description of a web page when the link is posted to a social media or video chat. We use mkdocs material for this site so we use the configuration provided by the material plugin.</p> <ul> <li>Material Social Cards Plugin Docs</li> <li>YouTube Tutorial</li> </ul>"},{"location":"glossary/#event-handling","title":"Event Handling","text":"<p>Responding to user actions like mouse clicks, key presses, or touch events for interactivity.</p>"},{"location":"glossary/#extension","title":"Extension","text":"<p>The suffix at the end of a filename (like .html, .js, .md) that indicates the file type or format.</p>"},{"location":"glossary/#file-path","title":"File Path","text":"<p>The location of a file or folder in a computer's directory structure, showing the route through folders to reach the file.</p>"},{"location":"glossary/#framework","title":"Framework","text":"<p>A pre-written set of code that provides a foundation for building applications. Frameworks give developers a starting structure and common tools to work with.</p>"},{"location":"glossary/#git","title":"Git","text":"<p>A version control system that tracks changes in files and helps coordinate work among multiple people on a project. Essential for collaborative software development.</p>"},{"location":"glossary/#github","title":"GitHub","text":"<p>A web-based platform that hosts git repositories and provides collaboration tools for software development projects. Think of it as a social network for code.</p>"},{"location":"glossary/#html","title":"HTML","text":"<p>HyperText Markup Language - the standard language for creating web pages. HTML defines the structure and content of web pages using elements called tags.</p>"},{"location":"glossary/#ide","title":"IDE","text":"<p>Integrated Development Environment - a software application that provides comprehensive facilities for software development, including a code editor, debugger, and build tools.</p>"},{"location":"glossary/#iframe","title":"iframe","text":"<p>An HTML element that allows one web page to be embedded inside another web page, like a window within a window.</p>"},{"location":"glossary/#javascript","title":"JavaScript","text":"<p>The programming language used to create interactive web pages and animations. JavaScript runs in web browsers and is what makes MicroSims interactive.</p>"},{"location":"glossary/#json","title":"JSON","text":"<p>JavaScript Object Notation - a lightweight format for storing and transmitting data. JSON uses human-readable text to represent data objects consisting of key-value pairs.</p>"},{"location":"glossary/#learning-analytics","title":"Learning Analytics","text":"<p>The measurement, collection, analysis, and reporting of data about learners and their contexts for understanding and optimizing learning.</p>"},{"location":"glossary/#library","title":"Library","text":"<p>A collection of pre-written code functions that developers can use in their programs. Libraries save time by providing ready-made solutions for common programming tasks.</p>"},{"location":"glossary/#lms","title":"LMS","text":"<p>Learning Management System - a software application or web-based technology used to plan, implement, and assess learning processes.</p>"},{"location":"glossary/#local-storage","title":"Local Storage","text":"<p>A web browser feature that allows websites to store data on a user's computer for later use.</p>"},{"location":"glossary/#markdown","title":"Markdown","text":"<p>A lightweight markup language that uses simple text formatting to create formatted documents, widely used for documentation.</p>"},{"location":"glossary/#metadata","title":"Metadata","text":"<p>Data that provides information about other data, such as the title, author, creation date, and description of a document or file.</p>"},{"location":"glossary/#mkdocs","title":"MkDocs","text":"<p>A static site generator that builds websites from markdown files, commonly used for creating documentation websites.</p>"},{"location":"glossary/#open-graph","title":"Open Graph","text":"<p>A protocol that enables web pages to become rich social media objects, controlling how content appears when shared on social platforms.</p>"},{"location":"glossary/#p5js","title":"p5.js","text":"<p>A JavaScript library designed to make programming visual art and animations accessible to beginners. It's based on the Processing language and is the primary tool used for creating MicroSims.</p>"},{"location":"glossary/#pull-request","title":"Pull Request","text":"<p>A method of submitting contributions to a project by requesting that changes from one branch be merged into another branch. Used for collaborative development.</p>"},{"location":"glossary/#repository","title":"Repository","text":"<p>A storage location for a software project, containing all the project files, documentation, and version history. Often hosted on platforms like GitHub.</p>"},{"location":"glossary/#scorm","title":"SCORM","text":"<p>Sharable Content Object Reference Model - a set of technical standards for e-learning software products that ensures content can work across different learning management systems.</p>"},{"location":"glossary/#server","title":"Server","text":"<p>A computer or software that provides services, data, or resources to other computers (clients) over a network.</p>"},{"location":"glossary/#social-cards","title":"Social Cards","text":"<p>Preview images and text that appear when links are shared on social media platforms.</p>"},{"location":"glossary/#template","title":"Template","text":"<p>A pre-designed file or set of files that serves as a starting point for creating new content with a consistent structure.</p>"},{"location":"glossary/#touch-events","title":"Touch Events","text":"<p>User interactions on touch-screen devices like tablets and smartphones that software can detect and respond to.</p>"},{"location":"glossary/#uiux","title":"UI/UX","text":"<p>User Interface/User Experience - referring to the design of user interfaces for software with a focus on maximizing usability and user experience.</p>"},{"location":"glossary/#vector-graphics","title":"Vector Graphics","text":"<p>Scalable graphics for rendering shapes, essential for simulations and UI elements.</p>"},{"location":"glossary/#interactivity","title":"Interactivity**","text":"<p>Involves user input and system feedback, from simple clicks to complex gestures.</p>"},{"location":"glossary/#user-experience-ux-design","title":"User Experience (UX) Design**","text":"<p>Designing interfaces and simulations that are easy, intuitive, and enjoyable to use.</p>"},{"location":"glossary/#rendering","title":"Rendering","text":"<p>How graphics are drawn on the canvas, including 2D and WEBGL (3D) in p5.js. Many of the lastest features of p5.js focus on allowing simulations to create complex simulations with fast rendering speed using the WebGL 3D libraries.</p>"},{"location":"glossary/#responsive-design","title":"Responsive Design","text":"<p>Techniques ensuring simulations and UIs work well on various devices and screen sizes.</p>"},{"location":"glossary/#smart-board","title":"Smart Board","text":"<p>An interactive whiteboard, also known as an interactive board or smart board, is a large interactive display board in the form factor of a whiteboard. In many classrooms, an instructor can stand at the front of a classroom and move sliders below a simulation to control the simulation.</p> <p>For effective use of smart boards, we use a minimum text size of 16 for control labels and values.</p>"},{"location":"glossary/#simulation-fidelity","title":"Simulation Fidelity","text":"<p>The degree to which a simulation replicates real-world processes or systems.</p>"},{"location":"glossary/#slider","title":"Slider","text":"<p>A user interface control that allows a simulation parameter to vary from a minimum to a maximum value. Sliders have a default value and a value for incrementing the range.</p> <p>A slider is also called a \"Range Control Slider\", but in our examples we will just use the shorthand \"slider\".</p>"},{"location":"glossary/#social-page-metadata","title":"Social Page Metadata","text":"<p>Data </p> <pre><code>---\ntitle:\ndescription:\nimage:\n---\n</code></pre>"},{"location":"glossary/#performance-optimization","title":"Performance Optimization","text":"<p>Techniques to make simulations and interfaces run smoothly, including code optimization.</p>"},{"location":"glossary/#prototyping","title":"Prototyping","text":"<p>Creating a preliminary model of a simulation or UI for exploring ideas and testing UX.</p>"},{"location":"glossary/#smartboard","title":"Smartboard","text":""},{"location":"glossary/#state-management","title":"State Management","text":"<p>Tracking and updating the status of different elements and interactions in the system. Many simulations use a mode variable to controls the state of a simulation. Examples of states include Running, Stopped and Step instructions.</p>"},{"location":"glossary/#user-testing","title":"User Testing","text":"<p>Evaluating a simulation or interface by testing it with real users for feedback.</p>"},{"location":"glossary/#interaction-design","title":"Interaction Design","text":"<p>Designing interactive digital products with logical and thought-out behaviors.</p>"},{"location":"glossary/#urllib","title":"URLlib","text":"<p>The Python library we use to generate social cards.</p> <p>We use urllib3=1.26.6</p>"},{"location":"glossary/#width-responsive","title":"Width Responsive","text":"<p>A web application that is designed to automatically adjust to the width of the container that it is rendered in.</p> <p>Width-responsive applications will expand the canvas and adjust the positioning of controls and content every time the containing region is resized.  Special attention must be focused on smaller screens such as mobile phones that may have a narrow display area.</p> <p>Educational MicroSims are easier to use in and iframe and easier to customize when they incorporate a width responsive features into their fundamental design.</p>"},{"location":"glossary/#webgl","title":"WebGL","text":"<p>Web Graphics Library (WebGL) is the name of the standard list of commands for drawing within web browsers.</p>"},{"location":"glossary/#xapi","title":"xAPI","text":"<p>Experience API (also called Tin Can API) - a standard for tracking and recording learning experiences and activities in digital learning environments.</p>"},{"location":"glossary/#yaml","title":"YAML","text":"<p>A human-readable data format often used for configuration files. YAML uses indentation and simple syntax to represent structured data, making it easier to read than JSON.</p> <p>This glossary aims to provide a foundational understanding for effectively using the p5.js framework in creating high-quality simulations and user interfaces.</p>"},{"location":"how-we-built-this-site/","title":"How We Built This Site","text":"<p>This page describes how we built this website and some of  the rationale behind why we made various design choices.</p>"},{"location":"how-we-built-this-site/#python","title":"Python","text":"<p>MicroSims are about how we use generative AI to create animations and simulations.  The language of AI is Python.  So we wanted to create a site that could be easily understood by Python developers.</p>"},{"location":"how-we-built-this-site/#mkdocs-vs-docusaurus","title":"Mkdocs vs. Docusaurus","text":"<p>There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus.  Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management.</p>"},{"location":"how-we-built-this-site/#github-and-github-pages","title":"GitHub and GitHub Pages","text":"<p>GitHub is a logical choice to store our  site source code and documentation.  GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs.</p> <p>GitHub also has Issues,  Projects and releases that we can use to manage our bugs and tasks.</p> <p>The best practice for low-cost websites that have public-only content is GitHub Pages. Mkdocs has a command (<code>mkdocs gh-deploy</code>) that does deployment directly to GitHub Pages.  This was an easy choice to make.</p>"},{"location":"how-we-built-this-site/#github-clone","title":"GitHub Clone","text":"<p>If you would like to clone this repository, here are the commands:</p> <pre><code>mkdir projects\ncd projects\ngit clone https://github.com/dmccreary/microsims\n</code></pre>"},{"location":"how-we-built-this-site/#after-changes","title":"After Changes","text":"<p>After you make local changes you must do the following:</p> <pre><code># add the new files to a a local commit transaction\ngit add FILES\n# Execute the a local commit with a message about what and why you are doing the commit\ngit commit -m \"comment\"\n# Update the central GitHub repository\ngit push\n</code></pre>"},{"location":"how-we-built-this-site/#material-theme","title":"Material Theme","text":"<p>We had several options when picking a mkdocs theme:</p> <ol> <li>Mkdocs default</li> <li>Readthedocs</li> <li>Third-Party Themes See Ranking</li> </ol> <p>The Material Theme had 16K stars.  No other theme had over a few hundred. This was also an easy design decision.</p> <p>One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link.  Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process.</p>"},{"location":"how-we-built-this-site/#conda-vs-venv","title":"Conda vs VENV","text":"<p>There are two choices for virtual environments.  We can use the native Python venv or use Conda.  venv is simle but is only designed for pure Python projects.  We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other.  See the ChatGPT Analysis Here.</p> <p>Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries.</p> <pre><code>conda deactivate\nconda create -n mkdocs python=3\nconda activate mkdocs\npip install mkdocs \"mkdocs-material[imaging]\"\n</code></pre>"},{"location":"how-we-built-this-site/#mkdocs-commands","title":"Mkdocs Commands","text":"<p>There are three simple mkdoc commands we use.</p>"},{"location":"how-we-built-this-site/#local-build","title":"Local Build","text":"<pre><code>mkdocs build\n</code></pre> <p>This builds your website in a folder called <code>site</code>.  Use this to test that the mkdocs.yml site is working and does not have any errors.</p>"},{"location":"how-we-built-this-site/#run-a-local-server","title":"Run a Local Server","text":"<pre><code>mkdocs serve\n</code></pre> <p>This runs a server on <code>http://localhost:8000</code>. Use this to test the display formatting locally before you push your code up to the GitHub repo.</p> <pre><code>mkdoc gh-deploy\n</code></pre> <p>This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub.</p>"},{"location":"how-we-built-this-site/#mkdocs-material-social-tags","title":"Mkdocs Material Social Tags","text":"<p>We are using the Material Social tags.  This is a work in progress!</p> <p>Here is what we have learned.</p> <ol> <li>There are extensive image processing libraries that can't be installed with just pip.  You will need to run a tool like brew on the Mac to get the libraries installed.</li> <li>Even after <code>brew</code> installs the libraries, you have to get your environment to find the libraries.  The only way I could get that to work was to set up a local UNIX environment variable.</li> </ol> <p>Here is the brew command that I ran:</p> <pre><code>brew install cairo freetype libffi libjpeg libpng zlib\n</code></pre> <p>I then had to add the following to my ~/.zshrc file:</p> <pre><code>export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib\n</code></pre> <p>Note that I am running on a Mac with Apple silicon.  This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set.</p> <ul> <li>Cover images for blog post #4364</li> <li>Discussion on overriding the Social Card Image</li> </ul>"},{"location":"license/","title":"Creative Commons License","text":"<p>All content in this repository is governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul> <p>Notices</p> <p>You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.</p> <p>No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.</p> <p>This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.</p>"},{"location":"references/","title":"MicroSims References","text":"<ol> <li>P5.js Editor</li> <li>Processing Foundation</li> <li>Custom OpenAI ChatGPT p5.js Visual Art Composer by By Samuel J Bennett from Reddit Post on </li> <li>Sketches by Jordanne</li> <li>Open Processing - thousands of examples</li> <li>Minified P5.js editor Javascript</li> <li>The Official P5js Discord Server</li> <li>Reddit P5.js</li> <li>Reddit Processing</li> <li>Customizing Buttons and Sliders by TuDelft</li> <li>Processing by TuDelft</li> </ol>"},{"location":"references/#val-lockharts-microsims","title":"Val Lockhart's MicroSims","text":"<p>Val Lockhart's Sketches on p5.js</p>"},{"location":"submission-guidelines/","title":"MicroSim Submission Guidelines","text":""},{"location":"submission-guidelines/#the-easy-way-for-newcomers","title":"The Easy Way For Newcomers","text":"<p>The quickest way to help us grow content is to just open an Issue on our GitHub Issues page. Put in a short description and all your code.  If you are using the p5.js editor you can just paste in a link to your code there.  We will take care of the rest.</p>"},{"location":"submission-guidelines/#for-experienced-github-users","title":"For Experienced GitHub Users","text":"<p>We prefer you submit a Pull Request to our site. This allows us to test your code and then merge your changes directly into the \"sims\" directory.</p>"},{"location":"submission-guidelines/#usability-tips","title":"Usability Tips","text":"<ol> <li>Create a new directory for you MicroSim in the docs/sims area</li> <li>Copy the Sims Template to get started</li> <li>Provide a background in your index.md file</li> <li>Include an image of your working MicroSim in the index.md file</li> <li>Include a link to your MicroSim html file in the index.md file</li> <li>Include a link to the MicroSim running in the p5.js editor</li> <li>Include the JavaScript file in your index.md file</li> <li>Place the MicroSim controls below your drawing region</li> <li>Provide a simple example with just one or two sliders and if appropriate, have a line to an \"Advanced\" version with multiple sliders</li> <li>Use a very light gray or '''aliceblue''' color as the background of your drawing region.  Use white as the background for the controls region.</li> </ol>"},{"location":"submission-guidelines/#sample-templates-for-drawing-and-controls-region","title":"Sample Templates for Drawing and Controls Region","text":"<ol> <li>Template for index.md</li> <li>Template for MicroSim</li> </ol>"},{"location":"chapters/","title":"Formal Educational Concepts","text":""},{"location":"chapters/#section-1-what-is-a-microsim","title":"Section 1: What is a MicroSim","text":"<p>Goto What is a MicroSim</p>"},{"location":"chapters/#section-2-microsims-in-the-current-educational-landscape","title":"Section 2: Microsims in the Current Educational Landscape","text":"<p>Goto MicroSims in the Educational Technology Landscape</p>"},{"location":"chapters/#section-3-microsim-design","title":"Section 3: MicroSim Design","text":"<p>Goto MicroSim Design</p>"},{"location":"chapters/#section-4-sample-microsims","title":"Section 4: Sample MicroSims","text":"<p>Goto the Sample MicroSims Section</p>"},{"location":"chapters/#section-4-describing-a-microsim-the-microsim-metadata-schema","title":"Section 4: Describing a MicroSim - The MicroSim Metadata Schema","text":"<p>Goto Describing a MicroSim</p>"},{"location":"chapters/#microsim-development-workflow","title":"MicroSim Development Workflow","text":"<p>Goto MicroSim Development Workflow</p>"},{"location":"chapters/#paper-steps","title":"Paper Steps","text":"<p>Paper Steps</p>"},{"location":"chapters/advanced-topics/","title":"Advanced Topics in Educational MicroSims","text":""},{"location":"chapters/advanced-topics/#microsim-sequences","title":"MicroSim Sequences","text":"<p>MicroSims can also be used in sequences where a simple concept is introduced in the first MicroSim and additional concepts are slowly added.  For example when the concept of an image convolution is taught we begin with a simple MicroSim that shows a  sliding window of a region of a matrix. After that a simple convolution operation such as sum or average is shown.  Next, a Convolution with Filters adds some initial complexity.  Finally, a Convolution with Multiply is added.</p> <p>At each stage we build up successively more concepts so that the student is not quickly overwhelmed by complexity.  This supports the concept of scaffold instructional design where complexity is slowly built up from a base of understanding.</p>"},{"location":"chapters/advanced-topics/#integration-with-intelligent-textbooks","title":"Integration with Intelligent Textbooks","text":"<p>MicroSims are ideally used as drop-in components within intelligent textbooks.  Intelligent Textbooks can be categorized into five levels of functionality:</p>"},{"location":"chapters/advanced-topics/#level-1-static-textbooks","title":"Level 1: Static Textbooks","text":"<p>These textbooks are traditional printed or digital formats with no interactive elements. They are composed purely of text and static images, with fixed content that doesn't adapt to the learner. Over 90% of textbooks used by college students today remain at Level 1. They're suitable for simple content delivery where interaction isn't necessary.</p>"},{"location":"chapters/advanced-topics/#level-2interactive-textbooks","title":"Level 2:Interactive Textbooks","text":"<p>Level 2 textbooks incorporate digital elements that engage readers beyond passive consumption. Features include keyword search, hyperlinks, embedded videos, simple quizzes, AI-generated MicroSims, detailed glossary, social sharing compatibility, and usage analytics. These textbooks are cost-effective enhancements that improve engagement with multimedia elements.</p>"},{"location":"chapters/advanced-topics/#level-3-adaptive-textbooks","title":"Level 3: Adaptive Textbooks","text":"<p>Adaptive textbooks dynamically adjust content based on user input, performance, and behavior. They use personalized learning pathways through deterministic rules, concept graph traversal algorithms, content selection based on assessment performance, and continuous recording of concept mastery. Implementation requires data management systems, graph algorithms, and raises privacy considerations.</p>"},{"location":"chapters/advanced-topics/#level-4-textbooks-with-chatbots","title":"\"Level 4: Textbooks with Chatbots","text":"<p>Chatbot assisted textbooks integrate intelligent conversational interfaces providing real-time assistance. They use Large Language Models (LLMs) as tutoring assistants, employ GraphRAG architecture combining multiple AI technologies, and provide real-time feedback on student questions. These systems can balance between powerful LLMs and cost-effective smaller models for privacy and efficiency.</p>"},{"location":"chapters/advanced-topics/#level-5-autonomous-ai","title":"Level 5: Autonomous AI","text":"<p>At the top level, autonomous AI textbooks represent the future of educational content where AI-driven systems fully understand individual learner needs and autonomously generate personalized learning experiences. They feature deep understanding of student knowledge, real-time generation of customized lessons, complete adaptability to learning styles, and human-like tutoring capabilities. This level remains aspirational, requiring advanced hardware and more reliable LLMs.</p> <p>MicroSims first appear at level 2 interactive textbooks.  Although instructional designers use generative AI to create MicroSims, no LLMs are required to deploy and run level-2 textbooks in a classroom.</p> <p>However, we have designed MicroSims to also quickly integrate with level-3 adaptive textbooks by feeding event streams from the controls area of a MicroSim into a learning data store (LDS) using the xAPI.  My clearly placing controls in a fixed region of the screen adding around 50 lines of xAPI JavaScript can be easily accomplished with most modern generative AI tools.</p>"},{"location":"chapters/describing-a-microsim/","title":"A Metadata Framework for Educational MicroSims: Enabling Discovery and Integration in Digital Learning Ecosystems","text":""},{"location":"chapters/describing-a-microsim/#introduction","title":"Introduction","text":"<p>As educational technology continues to evolve, the challenge of organizing and discovering appropriate digital learning resources has become increasingly complex. Educational MicroSims\u2014lightweight, interactive simulations designed for specific learning objectives\u2014represent a promising approach to personalized, engaging instruction. However, as collections of these resources grow into the tens of thousands, educators and institutions need robust systems for cataloging, searching, and integrating these materials into their curricula. This paper presents a comprehensive metadata schema specifically designed for Educational MicroSims that addresses these organizational challenges while supporting the pedagogical needs of diverse educational contexts.</p>"},{"location":"chapters/describing-a-microsim/#the-challenge-of-educational-resource-discovery","title":"The Challenge of Educational Resource Discovery","text":"<p>Traditional educational resource repositories often suffer from inconsistent cataloging practices, making it difficult for educators to find materials that match their specific needs. A mathematics teacher seeking a simulation for teaching quadratic functions might struggle to locate appropriate resources among thousands of available options, particularly when materials are tagged inconsistently or lack detailed descriptions of their educational purpose, technical requirements, or pedagogical applications.</p> <p>The proliferation of AI-generated educational content exacerbates this challenge. While artificial intelligence can rapidly create customized learning materials, these resources require systematic organization to be truly useful at scale. Without standardized metadata, even the most sophisticated educational simulation becomes effectively invisible to educators who could benefit from its use.</p>"},{"location":"chapters/describing-a-microsim/#a-structured-approach-to-educational-resource-description","title":"A Structured Approach to Educational Resource Description","text":"<p>The proposed metadata schema addresses these challenges through a comprehensive framework that captures both the educational and technical characteristics of MicroSims. Rather than relying on simple keyword tagging, the schema employs structured data fields that enable precise searching and filtering across multiple dimensions relevant to educational decision-making.</p> <p>At its foundation, the schema incorporates Dublin Core metadata standards\u2014internationally recognized elements for describing digital resources. This ensures compatibility with existing educational repositories and library systems while providing essential information such as creator, publication date, rights, and resource type. For example, an educator searching for recently created physics simulations can filter resources by subject area, publication date, and resource type simultaneously.</p> <p>The educational metadata component extends beyond basic cataloging to capture pedagogically relevant information. Grade level specifications use standardized categories from kindergarten through graduate study, enabling precise targeting of age-appropriate materials. Subject area classifications employ controlled vocabularies that prevent the confusion often caused by synonym variations\u2014ensuring that \"mathematics\" and \"math\" resources appear together in search results.</p> <p>Perhaps most significantly, the schema incorporates Bloom's Taxonomy classifications, allowing educators to search for resources that target specific cognitive skill levels. A teacher planning a unit on renewable energy can locate simulations that support factual recall (Remember level), conceptual understanding (Understand level), or creative application (Create level) depending on their instructional goals.</p>"},{"location":"chapters/describing-a-microsim/#technical-specifications-for-seamless-integration","title":"Technical Specifications for Seamless Integration","text":"<p>Beyond educational considerations, the schema addresses the technical requirements essential for successful implementation in diverse technological environments. Canvas dimensions, framework dependencies, and browser compatibility information enable technical staff to quickly assess integration requirements. Accessibility features are explicitly documented, supporting inclusive design principles and compliance with educational accessibility standards.</p> <p>The user interface documentation provides detailed specifications for interactive elements, including sliders, buttons, and other controls. This information proves invaluable for educators who want to understand how students will interact with the simulation before incorporating it into their lessons. Control specifications include not only the type of interface element but also its range of values, default settings, and educational purpose.</p>"},{"location":"chapters/describing-a-microsim/#simulation-model-documentation-for-educational-transparency","title":"Simulation Model Documentation for Educational Transparency","text":"<p>A unique aspect of the schema involves comprehensive documentation of the underlying simulation models. Unlike black-box educational software, MicroSims benefit from transparent documentation of their mathematical equations, algorithms, assumptions, and limitations. This transparency serves multiple educational purposes: it enables educators to understand exactly what concepts the simulation demonstrates, helps students appreciate the relationship between mathematical models and real-world phenomena, and allows advanced students to critique and extend the simulations themselves.</p> <p>For example, a physics simulation modeling projectile motion would document not only the kinematic equations used but also simplifying assumptions such as the absence of air resistance. This information helps educators contextualize the simulation's applicability and identify opportunities for discussing real-world complications.</p>"},{"location":"chapters/describing-a-microsim/#supporting-pedagogical-integration-and-assessment","title":"Supporting Pedagogical Integration and Assessment","text":"<p>The schema extends beyond resource description to support practical classroom implementation. Recommended usage scenarios help educators understand whether a particular simulation works best for demonstration, guided exploration, independent practice, or assessment. Instructional strategy recommendations provide concrete suggestions for incorporating the simulation into lesson plans.</p> <p>Assessment integration represents another significant feature, with the schema documenting suggested questions and activities aligned with specific Bloom's taxonomy levels. This support proves particularly valuable for busy educators who need guidance on how to transform interactive experiences into meaningful learning assessments.</p>"},{"location":"chapters/describing-a-microsim/#enabling-large-scale-discovery-and-personalization","title":"Enabling Large-Scale Discovery and Personalization","text":"<p>When applied consistently across thousands of MicroSims, this metadata framework enables sophisticated search and recommendation capabilities. An educator seeking materials for a high school chemistry unit on molecular bonding can specify grade level (9-12), subject area (chemistry), topic (molecular bonding), and desired cognitive level (apply or analyze). The system can then present a curated list of relevant simulations along with implementation suggestions and assessment questions.</p> <p>The schema also supports automated personalization systems that can recommend resources based on student performance data, learning preferences, and curriculum progression. By standardizing how educational objectives, difficulty levels, and prerequisite knowledge are documented, the framework enables intelligent tutoring systems to make evidence-based recommendations about which simulations will best support individual student needs.</p>"},{"location":"chapters/describing-a-microsim/#learning-analytics-and-continuous-improvement","title":"Learning Analytics and Continuous Improvement","text":"<p>The analytics component of the schema documents what data each simulation collects about student interactions, enabling educational researchers and adaptive learning systems to understand learning patterns and optimize instructional sequences. Privacy considerations are explicitly addressed, ensuring that data collection practices align with educational privacy standards and institutional policies.</p> <p>This analytics integration supports the development of increasingly sophisticated educational systems that can track student progress across multiple simulations, identify conceptual difficulties, and recommend targeted interventions. The standardized metadata enables these systems to operate across resources from multiple creators and institutions.</p>"},{"location":"chapters/describing-a-microsim/#implications-for-educational-technology-ecosystems","title":"Implications for Educational Technology Ecosystems","text":"<p>The implementation of comprehensive metadata schemas like this one represents a significant step toward more mature educational technology ecosystems. Rather than treating educational resources as isolated applications, standardized metadata enables the development of integrated learning environments where resources work together to support coherent educational experiences.</p> <p>For educational institutions, consistent metadata reduces the administrative burden of evaluating and cataloging new resources while ensuring that investments in educational technology provide maximum pedagogical value. For educators, sophisticated search and recommendation capabilities transform the process of finding appropriate materials from a time-consuming challenge into an efficient, targeted activity.</p> <p>For students, the ultimate beneficiaries of these organizational improvements experience more coherent, personalized learning paths where educational resources build systematically on previous knowledge and target appropriate skill levels.</p>"},{"location":"chapters/describing-a-microsim/#conclusion","title":"Conclusion","text":"<p>As educational technology continues to advance toward AI-generated, personalized learning experiences, the importance of systematic resource organization becomes increasingly critical. The comprehensive metadata schema presented here provides a framework for transforming collections of individual educational simulations into coherent, discoverable, and pedagogically integrated learning ecosystems.</p> <p>By combining established cataloging standards with education-specific metadata and detailed technical specifications, this approach enables the sophisticated search, recommendation, and integration capabilities necessary to support effective teaching and learning at scale. As educational institutions invest increasingly in digital learning resources, frameworks like this one ensure that these investments yield maximum educational benefit through enhanced discoverability, appropriate application, and seamless integration into existing curricula.</p> <p>The success of educational technology ultimately depends not only on the quality of individual resources but on educators' ability to find, understand, and effectively implement those resources in their teaching practice. Comprehensive metadata schemas represent an essential infrastructure component for realizing the full potential of digital learning environments. Dublin Core Integration: Full Dublin Core metadata elements for proper cataloging and discovery in educational repositories, including title, creator, subject, description, publisher, date, type, format, identifier, language, relation, coverage, and rights.</p> <p>Rich Educational Metadata: Detailed educational specifications including: - Grade levels (K-12, Undergraduate, Graduate, Adult) - Subject areas with controlled vocabulary - Learning objectives and Bloom's taxonomy levels - Curriculum standards alignment - Prerequisites and difficulty levels</p> <p>Comprehensive Control Specifications: Detailed control definitions that capture: - All UI element types (sliders, buttons, checkboxes, radio buttons, dropdowns) - Control-specific properties (min/max for sliders, options for dropdowns) - Position and labeling information - Default values and step increments</p> <p>Technical Architecture Details: Canvas dimensions, responsive design capabilities, framework dependencies, and accessibility features.</p> <p>Simulation Model Documentation: Mathematical equations, algorithms, variables, assumptions, and limitations of the underlying simulation.</p> <p>Learning Analytics Support: Event tracking, metrics calculation, and privacy considerations for data collection.</p> <p>Pedagogical Integration: Usage recommendations, instructional strategies, assessment questions, and extension activities.</p> <p>This schema enables: - Searchability by grade level, subject area, topic, and learning objectives - Technical documentation for developers and educators - Educational integration with learning management systems - Analytics integration for adaptive learning systems - Quality assurance through standardized metadata requirements</p> <p>The schema is designed to be both comprehensive for research and practical for implementation, supporting the vision of AI-generated MicroSims that can be automatically cataloged, discovered, and integrated into intelligent educational systems.</p>"},{"location":"chapters/microsim-design/","title":"MicroSims Design Framework: A Comprehensive Approach to Educational Interactive Simulations","text":""},{"location":"chapters/microsim-design/#introduction","title":"Introduction","text":"<p>The Educational MicroSims Design Framework represents a systematic approach to creating lightweight, interactive educational simulations that prioritize accessibility, responsiveness, and pedagogical effectiveness. This framework establishes standardized design principles, technical architecture patterns, and implementation guidelines that enable both human developers and artificial intelligence systems to create consistent, high-quality educational content. The framework addresses the critical need for scalable interactive educational resources that can be rapidly developed, easily deployed, and seamlessly integrated across diverse learning environments.</p> <p>The design framework emerges from extensive analysis of existing educational simulation platforms and identifies key limitations in current approaches, including complex deployment requirements, inconsistent user interfaces, and limited customization capabilities. By establishing a constraint-based design philosophy that prioritizes simplicity and consistency over feature comprehensiveness, the MicroSims framework enables the creation of educational simulations that are both pedagogically effective and technically sustainable.</p>"},{"location":"chapters/microsim-design/#design-principles","title":"Design Principles","text":""},{"location":"chapters/microsim-design/#responsive-design-architecture","title":"Responsive Design Architecture","text":"<p>The foundational principle of the MicroSims design framework is responsive adaptability, specifically engineered for educational contexts where content must be accessible across diverse devices and screen configurations. Unlike traditional responsive web design that adapts both horizontal and vertical dimensions, MicroSims employ a constrained responsive model where simulations maintain fixed heights while dynamically adjusting to container width variations. This approach ensures consistent educational experiences across different devices while maintaining the precise spatial relationships necessary for effective data visualization and interactive elements.</p> <p>The responsive design implementation utilizes container queries rather than viewport-based media queries, enabling MicroSims to adapt to their embedding context rather than the overall device screen. This architectural decision is particularly critical for educational applications where simulations may be embedded within learning management systems, digital textbooks, or other educational platforms with complex layout structures. The framework defines specific breakpoints and scaling algorithms that ensure visual elements remain readable and interactive elements remain accessible across the supported width range, typically from 320 pixels (mobile devices) to 1200 pixels (desktop displays).</p> <p>Container width adaptation is implemented through a standardized <code>updateCanvasSize()</code> function that recalculates layout parameters based on the detected container dimensions. This function triggers automatic repositioning of user interface elements, rescaling of text sizes within defined bounds, and adjustment of visualization areas to maintain optimal information density. The responsive system includes provisions for progressive disclosure, where complex simulations may hide or simplify certain interface elements on narrow displays to prevent cognitive overload while preserving core functionality.</p>"},{"location":"chapters/microsim-design/#accessibility-and-universal-design","title":"Accessibility and Universal Design","text":"<p>Accessibility considerations are integrated throughout the MicroSims design framework, ensuring that educational simulations remain usable by learners with diverse abilities and assistive technology requirements. The framework mandates the implementation of semantic HTML structures, appropriate ARIA (Accessible Rich Internet Applications) labeling, and keyboard navigation support for all interactive elements. Color schemes are selected to provide sufficient contrast ratios that meet or exceed WCAG 2.1 AA standards, and information is never conveyed through color alone.</p> <p>The accessibility framework includes specific provisions for screen reader compatibility, with standardized <code>describe()</code> function implementations that provide comprehensive textual descriptions of simulation content and interactions. These descriptions are automatically generated during the setup phase and dynamically updated as simulation states change, ensuring that users relying on assistive technology receive equivalent information to visual users. Interactive elements follow consistent focus management patterns, with logical tab ordering and clear visual focus indicators.</p> <p>Motor accessibility considerations include minimum touch target sizes of 44x44 pixels for mobile interfaces, adequate spacing between interactive elements, and support for alternative input methods. The framework accommodates users who may have difficulty with precise pointer control by implementing forgiving interaction zones and providing alternative interaction methods where appropriate. Error prevention and recovery mechanisms are built into the interaction design to support users who may accidentally trigger unintended actions.</p>"},{"location":"chapters/microsim-design/#standards-based-implementation","title":"Standards-Based Implementation","text":"<p>The MicroSims framework adheres to web standards and best practices, ensuring long-term compatibility and interoperability across different platforms and technologies. All simulations are implemented using standard HTML5, CSS3, and JavaScript technologies without proprietary extensions or vendor-specific features. This standards-based approach ensures that MicroSims remain functional across different web browsers and can be easily maintained as web technologies evolve.</p> <p>Dublin Core metadata standards are integrated into the framework to support resource discovery and cataloging within educational repositories. Each MicroSim includes standardized metadata elements describing educational objectives, subject matter, difficulty level, and technical requirements. This metadata is structured using JSON Schema specifications that enable automated validation and processing by educational content management systems.</p> <p>The framework defines a standardized JSON Schema for MicroSim metadata that includes essential fields such as title, description, educational level, subject areas, learning objectives, and technical specifications. This schema supports automated cataloging and search functionality, enabling educators to discover relevant simulations based on specific pedagogical requirements. The metadata structure also includes fields for accessibility features, device compatibility, and integration requirements that support informed adoption decisions.</p>"},{"location":"chapters/microsim-design/#technical-architecture","title":"Technical Architecture","text":""},{"location":"chapters/microsim-design/#p5js-foundation-and-javascript-ecosystem-integration","title":"p5.js Foundation and JavaScript Ecosystem Integration","text":"<p>The technical architecture of the MicroSims framework is built upon the p5.js creative coding library, selected for its educational transparency, extensive documentation, and gentle learning curve. p5.js provides a comprehensive set of drawing and interaction primitives while maintaining code readability that enables educators and students to understand and modify simulation logic. The framework extends p5.js capabilities with standardized patterns for responsive design, user interface management, and educational data collection.</p> <p>The architecture defines a modular structure where core simulation logic is separated from presentation and interaction layers. This separation enables simulations to be easily modified or extended without affecting the underlying educational model. The framework provides standardized templates for common simulation types, including parameter exploration interfaces, data visualization components, and interactive demonstrations. These templates incorporate best practices for code organization, naming conventions, and documentation standards.</p> <p>Integration with the broader JavaScript ecosystem is facilitated through careful dependency management and compatibility testing. The framework specifies approved external libraries and provides integration patterns that maintain the lightweight characteristics essential for educational deployment. Common integrations include mathematical computation libraries (Math.js), data processing utilities (Lodash), and visualization extensions (D3.js) when additional capabilities are required beyond the p5.js core functionality.</p>"},{"location":"chapters/microsim-design/#html5-and-cross-platform-compatibility","title":"HTML5 and Cross-Platform Compatibility","text":"<p>The framework leverages HTML5 capabilities to provide rich interactive experiences while maintaining compatibility across diverse devices and platforms. Canvas-based rendering ensures consistent visual output across different browsers and operating systems, while HTML5 audio and video elements support multimedia integration when pedagogically appropriate. The architecture avoids features that require plugin installation or platform-specific implementations, ensuring universal accessibility.</p> <p>Cross-platform compatibility is validated through systematic testing across major web browsers (Chrome, Firefox, Safari, Edge) and mobile platforms (iOS Safari, Android Chrome). The framework includes automated testing procedures that verify functionality across different device types and screen sizes. Performance optimization techniques ensure smooth operation on lower-powered devices commonly found in educational environments, including older tablets and budget smartphones.</p> <p>Browser compatibility considerations include progressive enhancement strategies where advanced features degrade gracefully on older platforms while maintaining core functionality. The framework provides fallback mechanisms for newer web features, ensuring that educational content remains accessible even in environments with outdated web browsers or restrictive security policies.</p>"},{"location":"chapters/microsim-design/#iframe-integration-and-deployment-architecture","title":"Iframe Integration and Deployment Architecture","text":"<p>A critical architectural requirement is seamless integration within iframe elements, enabling MicroSims to be embedded as single-line HTML elements within diverse educational platforms. The framework addresses common iframe integration challenges, including cross-origin communication, responsive sizing, and event handling. MicroSims are designed to function completely within iframe boundaries without requiring parent page modification or cross-frame scripting.</p> <p>The iframe integration model supports both static and dynamic embedding scenarios. Static embedding involves simple HTML iframe tags with specified dimensions, suitable for content management systems and learning management platforms. Dynamic embedding utilizes JavaScript-based integration that can automatically adjust iframe dimensions based on content requirements and respond to container size changes.</p> <p>Security considerations for iframe deployment include content security policy compliance and prevention of clickjacking vulnerabilities. The framework implements appropriate sandbox attributes and communication protocols that enable safe embedding while maintaining necessary functionality. Cross-origin resource sharing (CORS) policies are configured to support integration across different domain environments commonly found in educational technology ecosystems.</p>"},{"location":"chapters/microsim-design/#educational-pedagogy-integration","title":"Educational Pedagogy Integration","text":""},{"location":"chapters/microsim-design/#learning-objectives-alignment","title":"Learning Objectives Alignment","text":"<p>The pedagogical foundation of the MicroSims framework is rooted in constructivist learning theory, which emphasizes active knowledge construction through hands-on exploration and experimentation. The framework provides structured approaches for aligning simulation design with specific learning objectives, ensuring that interactive elements directly support intended educational outcomes. This alignment is facilitated through systematic learning objective decomposition, where complex concepts are broken into discrete, explorable components.</p> <p>The framework incorporates Bloom's Taxonomy as an organizational structure for categorizing learning objectives and selecting appropriate interaction patterns. Lower-level objectives (remembering, understanding) are supported through guided exploration interfaces with clear feedback mechanisms. Higher-level objectives (analyzing, evaluating, creating) are addressed through open-ended parameter spaces that enable hypothesis testing and creative exploration. The progression from structured to open-ended interactions supports scaffolded learning experiences.</p> <p>Assessment integration is embedded within the pedagogical framework through unobtrusive data collection that captures learning indicators without disrupting the exploration process. Interaction patterns, parameter choices, and exploration sequences provide rich data sources for formative assessment. The framework defines standardized data collection protocols that support learning analytics while maintaining student privacy and data security requirements.</p>"},{"location":"chapters/microsim-design/#cognitive-load-management","title":"Cognitive Load Management","text":"<p>The framework explicitly addresses cognitive load theory principles through constrained interface design that minimizes extraneous cognitive processing. Visual design elements follow established principles of multimedia learning, with coordinated presentation of textual and visual information that supports rather than competes for cognitive resources. Color coding, spatial organization, and progressive disclosure techniques are systematically employed to manage information complexity.</p> <p>Intrinsic cognitive load is managed through careful selection of simulation complexity relative to learner expertise levels. The framework provides guidelines for determining appropriate parameter ranges, interaction granularity, and feedback frequency that match learner capabilities. Extraneous cognitive load is minimized through consistent interface conventions, predictable interaction patterns, and elimination of decorative elements that do not support learning objectives.</p> <p>Germane cognitive load is optimized through design patterns that encourage schema construction and knowledge transfer. The framework promotes the use of analogies, real-world connections, and cross-simulation consistency that support broader conceptual understanding. Reflection prompts and explanation opportunities are integrated into interaction sequences to promote metacognitive awareness and deeper processing.</p>"},{"location":"chapters/microsim-design/#adaptive-and-personalized-learning-support","title":"Adaptive and Personalized Learning Support","text":"<p>The framework incorporates provisions for adaptive learning experiences that can adjust to individual student needs and preferences. Standardized data collection protocols capture detailed interaction logs that can inform adaptive algorithms about student understanding, engagement levels, and learning preferences. This data enables intelligent tutoring systems to make informed decisions about content sequencing, difficulty adjustment, and intervention timing.</p> <p>Personalization features include adjustable complexity levels, alternative representation modes, and customizable interface preferences. The framework supports multiple learning modalities through coordinated visual, auditory, and kinesthetic interaction options. Students can select preferred interaction styles while maintaining equivalent learning opportunities across different modality preferences.</p> <p>The adaptive framework includes provisions for real-time difficulty adjustment based on student performance indicators. Successful parameter exploration can trigger the introduction of additional variables or more complex scenarios, while indicators of confusion or frustration can prompt simplified interfaces or additional scaffolding. These adaptations occur seamlessly within the simulation environment without explicitly calling attention to accommodation mechanisms.</p>"},{"location":"chapters/microsim-design/#implementation-standards-and-guidelines","title":"Implementation Standards and Guidelines","text":""},{"location":"chapters/microsim-design/#standardized-code-architecture-and-organization","title":"Standardized Code Architecture and Organization","text":"<p>The implementation standards define a comprehensive code organization structure that promotes consistency, maintainability, and educational transparency. The standardized architecture separates global variables, setup functions, draw loops, interaction handlers, and utility functions into clearly defined sections with consistent naming conventions. This organization enables educators and students to quickly locate and understand different aspects of simulation functionality.</p> <p>Variable naming follows educational conventions that prioritize clarity over brevity, with descriptive names that indicate both purpose and units where applicable. The framework mandates comprehensive inline documentation that explains both technical implementation details and pedagogical rationale for design decisions. Code comments include learning objective alignments, interaction purpose explanations, and modification guidance for educators who wish to customize simulations.</p> <p>Function organization follows a hierarchical structure where high-level educational functions call lower-level technical implementation functions. This structure enables educators to focus on pedagogical customization without requiring deep technical expertise in graphics programming or interaction handling. Standardized function signatures and parameter passing conventions ensure consistency across different simulation implementations.</p>"},{"location":"chapters/microsim-design/#user-interface-design-patterns-and-consistency","title":"User Interface Design Patterns and Consistency","text":"<p>The framework defines comprehensive user interface design patterns that ensure consistent user experiences across different MicroSims while accommodating diverse educational content requirements. Standardized control placement positions all interactive elements within a designated control region below the main visualization area, providing predictable interface layouts that reduce cognitive load associated with navigation and control discovery.</p> <p>Control element styling follows platform conventions while maintaining educational appropriateness and accessibility compliance. Slider controls use consistent visual styling, labeling patterns, and value display formats. Button interfaces employ standardized sizing, color schemes, and feedback mechanisms. Text elements follow typography hierarchies that support readability across different screen sizes and lighting conditions.</p> <p>The framework provides specific guidelines for title positioning, with automatic centering at the top of the canvas area using responsive text sizing algorithms. Labels and instructions follow consistent placement patterns relative to associated controls, with adequate spacing for touch interaction and visual clarity. Color schemes are selected from a standardized palette that ensures sufficient contrast while maintaining visual appeal and educational appropriateness.</p>"},{"location":"chapters/microsim-design/#automated-generation-and-ai-integration-guidelines","title":"Automated Generation and AI Integration Guidelines","text":"<p>The framework is specifically designed to support automated generation by artificial intelligence systems, particularly large language models capable of code synthesis. The standardized patterns and templates provide clear reference implementations that AI systems can modify and adapt for specific educational requirements. This design consideration enables rapid content creation while maintaining quality and consistency standards.</p> <p>Generative AI systems excel at making incremental modifications to reference templates but struggle with complex layout calculations and novel interface designs. The framework provides precise layout algorithms and positioning formulas that eliminate the need for AI systems to perform complex geometric calculations. Standardized responsive design functions handle screen adaptation automatically, reducing the complexity of AI-generated code.</p> <p>The framework includes specific guidelines for AI-assisted development, including template selection criteria, modification boundaries, and validation procedures. These guidelines help ensure that AI-generated simulations maintain educational effectiveness while adhering to technical and pedagogical standards. Automated testing procedures verify that generated simulations meet functionality, accessibility, and performance requirements.</p>"},{"location":"chapters/microsim-design/#quality-assurance-and-testing-protocols","title":"Quality Assurance and Testing Protocols","text":"<p>Comprehensive testing protocols ensure that MicroSims meet educational effectiveness and technical reliability standards across diverse deployment environments. Testing procedures include functionality verification across different browsers and devices, accessibility compliance validation, and educational effectiveness assessment through user studies with target learner populations.</p> <p>Performance testing verifies smooth operation across the supported range of devices, including lower-powered tablets and smartphones commonly used in educational settings. Load testing ensures that simulations remain responsive during typical classroom usage scenarios with multiple simultaneous users. Security testing validates iframe integration safety and data handling compliance with educational privacy requirements.</p> <p>Educational effectiveness testing involves systematic evaluation with representative student populations to verify that learning objectives are achieved and that interaction patterns support rather than hinder educational goals. Usability testing with educators ensures that customization and deployment procedures are accessible to non-technical users. These testing protocols provide evidence-based validation of the framework's educational and technical effectiveness.</p>"},{"location":"chapters/microsim-design/#conclusion","title":"Conclusion","text":"<p>The MicroSims Design Framework provides a comprehensive foundation for creating educational interactive simulations that balance pedagogical effectiveness with technical practicality. Through systematic attention to responsive design, accessibility compliance, and educational best practices, the framework enables the creation of learning resources that are both engaging and educationally sound. The standards-based technical architecture ensures long-term sustainability and broad compatibility across diverse educational technology environments.</p> <p>The framework's integration of artificial intelligence capabilities represents a significant advancement in educational content creation, enabling rapid development of customized simulations while maintaining consistent quality standards. As educational institutions increasingly seek scalable approaches to interactive content creation, the MicroSims framework provides a proven model that addresses both immediate practical needs and long-term strategic objectives for technology-enhanced learning.</p> <p>Future development of the framework will focus on expanding the range of supported educational domains, enhancing adaptive learning capabilities, and strengthening integration with emerging educational technology platforms. The continued refinement of the framework through educational research and practical deployment will ensure that MicroSims remain at the forefront of effective educational simulation design and implementation.</p>"},{"location":"chapters/microsim-dev-workflow/","title":"Development Workflow for Educational MicroSims","text":""},{"location":"chapters/microsim-dev-workflow/#introduction","title":"Introduction","text":"<p>The development of Educational MicroSims follows a systematic workflow that leverages existing resources, generative AI, prompt engineering, pre-defined rules and structured metadata to allow non-programmers to create personalized learning experiences. This document outlines the complete development process from initial discovery through integration into intelligent learning systems.</p>"},{"location":"chapters/microsim-dev-workflow/#1-repository-discovery-and-initial-searchthe-development-workflow-begins-with-discovering-existing-repositories-of-educational-simulations-as-evidenced-by-the-search-results-several-established-repositories-exist","title":"1. Repository Discovery and Initial SearchThe development workflow begins with discovering existing repositories of educational simulations. As evidenced by the search results, several established repositories exist:","text":"<p>PhET Interactive Simulations from the University of Colorado Boulder provides free interactive math and science simulations based on extensive educational research, while the GitHub dmccreary/microsims repository contains micro simulations specifically created by generative AI tools such as ChatGPT. Gizmos by ExploreLearning offers over 550 virtual, interactive STEM simulations designed to meet educational standards for grades 3-12.</p> <p>These repositories serve as starting points for educators looking to find existing resources or templates for creating new MicroSims.</p>"},{"location":"chapters/microsim-dev-workflow/#2-faceted-search-for-subject-and-grade-level-refinement","title":"2. Faceted Search for Subject and Grade Level Refinement","text":"<p>Modern educational repositories implement sophisticated search capabilities that allow educators to narrow down resources using multiple criteria simultaneously. A typical faceted search interface would include:</p> <p>Subject Area Filters: - Mathematics (Algebra, Geometry, Calculus, Statistics) - Science (Physics, Chemistry, Biology, Earth Science) - Computer Science - Engineering - Economics and Finance</p> <p>Grade Level Filters: - Elementary (K-5) - Middle School (6-8) - High School (9-12) - Undergraduate - Graduate - Adult Education</p> <p>Learning Objective Filters: - Bloom's Taxonomy levels (Remember, Understand, Apply, Analyze, Evaluate, Create) - Curriculum standards alignment (CCSS, NGSS, ISTE) - Duration (5-15 minutes, 15-30 minutes, 30+ minutes)</p> <p>Example Search Scenario: An 8th-grade science teacher searching for physics simulations would filter by: - Subject Area: Physics - Grade Level: Middle School (6-8) - Topic: Motion and Forces - Bloom's Level: Apply - Duration: 15-30 minutes</p> <p>This filtered search would return a curated list of relevant MicroSims, such as projectile motion simulations or force and acceleration demonstrations.</p>"},{"location":"chapters/microsim-dev-workflow/#3-template-based-microsim-generation","title":"3. Template-Based MicroSim Generation","text":"<p>Once an educator identifies a similar MicroSim that closely matches their needs, they can use it as a template for generating a customized version using generative AI tools. The template serves as both inspiration and technical foundation for the new simulation.</p> <p>Template Selection Process: 1. Identify Core Functionality: Determine what aspects of the existing MicroSim align with learning objectives 2. Analyze Technical Components: Review the control interfaces, visual elements, and interaction patterns 3. Extract Educational Elements: Identify the underlying mathematical models, concepts demonstrated, and assessment opportunities</p> <p>Template Benefits: - Provides proven interaction patterns - Establishes responsive design frameworks - Demonstrates effective control placement - Includes accessibility considerations</p>"},{"location":"chapters/microsim-dev-workflow/#4-sample-customization-prompt-for-generative-ai","title":"4. Sample Customization Prompt for Generative AI","text":"<p>Here's a comprehensive prompt for customizing a MicroSim based on an existing template:</p> <pre><code>I want to create a MicroSim for teaching quadratic functions to high school algebra students (grades 9-10). Please use the \"Projectile Motion MicroSim\" as a template but modify it to focus on mathematical concepts rather than physics.\n\nRequirements:\n- Subject Area: Mathematics (Algebra)\n- Topic: Quadratic Functions\n- Grade Level: 9-10\n- Duration: 20-30 minutes\n- Bloom's Level: Apply and Analyze\n\nModifications needed:\n1. Replace physics variables (velocity, gravity, time) with mathematical parameters (a, b, c coefficients)\n2. Show the parabola y = ax\u00b2 + bx + c instead of trajectory\n3. Add sliders for coefficients a (-5 to 5), b (-10 to 10), c (-10 to 10)\n4. Display vertex coordinates, axis of symmetry, and y-intercept\n5. Include a table showing x/y value pairs\n6. Add a \"Reset to Standard Form\" button\n7. Show the discriminant and number of real roots\n8. Use colors to highlight different parts: vertex (red), roots (blue), y-intercept (green)\n\nTechnical specifications:\n- Use p5.js framework\n- Canvas height: 450 (400px drawing, 50px controls)\n- Responsive width design with proper control placement\n- Accessibility: Include describe() function and proper contrast\n- Include standard MicroSim architecture with separated drawing and control regions\n\nPlease generate the complete JavaScript code following the MicroSim standards provided in the documentation.\n</code></pre>"},{"location":"chapters/microsim-dev-workflow/#5-iterative-development-with-preview-and-refinement","title":"5. Iterative Development with Preview and Refinement","text":"<p>The development process involves multiple iterations of generation, preview, and refinement. Modern AI-assisted development tools provide real-time preview capabilities that allow educators to see immediate results and request modifications.</p> <p>Preview and Testing Cycle: 1. Initial Generation: AI creates the first version based on the prompt 2. Preview Testing: Educator tests functionality in a sandbox environment 3. Feedback Collection: Identify areas needing modification or enhancement 4. Refinement Prompt: Request specific changes or additions</p> <p>Sample Refinement Prompt for Adding/Removing Controls:</p> <pre><code>The quadratic function MicroSim is working well, but I need these modifications:\n\nADD NEW CONTROLS:\n1. Add a checkbox labeled \"Show Grid\" that toggles coordinate grid lines\n2. Add a dropdown menu for \"Function Type\" with options:\n   - Standard Form (y = ax\u00b2 + bx + c)\n   - Vertex Form (y = a(x-h)\u00b2 + k)\n   - Factored Form (y = a(x-r\u2081)(x-r\u2082))\n3. Add a \"Zoom\" slider (0.5x to 3x) to scale the viewing window\n\nREMOVE EXISTING CONTROLS:\n1. Remove the \"Reset to Standard Form\" button (replace with a \"Clear All\" button)\n2. Remove the discriminant display (students will calculate this separately)\n\nMODIFY EXISTING FEATURES:\n1. Change the coefficient 'a' slider range from (-5,5) to (-3,3) with steps of 0.1\n2. Move all sliders to be horizontally aligned\n3. Add units labels next to the vertex coordinates\n\nPlease maintain the existing responsive design and ensure all controls fit properly in the control region.\n</code></pre>"},{"location":"chapters/microsim-dev-workflow/#6-metadata-generation-for-cataloging","title":"6. Metadata Generation for Cataloging","text":"<p>Once the MicroSim is finalized, the next step involves generating comprehensive metadata that describes the simulation for repository cataloging. This metadata follows the established schema for Educational MicroSims.</p> <p>Sample Metadata Generation Prompt:</p> <pre><code>Please generate a comprehensive JSON metadata file for the quadratic functions MicroSim following the Educational MicroSim Metadata Schema. Include:\n\nDublin Core elements:\n- Title: \"Interactive Quadratic Function Explorer\"\n- Creator: [Your name/institution]\n- Subject: Mathematics, Algebra, Quadratic Functions\n- Description: Educational purpose and functionality\n\nEducational metadata:\n- Grade levels: 9, 10, 11\n- Subject areas: Mathematics\n- Topics: Quadratic Functions, Parabolas, Vertex Form, Roots\n- Learning objectives: Apply quadratic function concepts, Analyze parabola characteristics\n- Bloom's taxonomy: Apply, Analyze\n- Prerequisites: Linear functions, coordinate geometry\n- Duration: 20-30 minutes typical interaction\n- Difficulty: Intermediate\n\nTechnical specifications:\n- Framework: p5.js\n- Canvas dimensions: 500x450, responsive\n- Browser compatibility\n- Accessibility features\n\nUser interface controls:\n- Detailed specifications for each slider, button, checkbox\n- Visual elements descriptions\n- Update triggers\n\nSimulation model:\n- Mathematical equations used\n- Variables and their ranges\n- Algorithms for calculations\n\nUsage recommendations:\n- Suggested classroom activities\n- Assessment questions at different Bloom's levels\n- Extension activities\n</code></pre> <p>This metadata enables sophisticated search and discovery capabilities while supporting integration with learning management systems and adaptive learning platforms.</p>"},{"location":"chapters/microsim-dev-workflow/#7-testing-feedback-and-lms-integration","title":"7. Testing, Feedback, and LMS Integration","text":"<p>The final phase involves systematic testing, educational feedback collection, and integration into intelligent learning systems.</p>"},{"location":"chapters/microsim-dev-workflow/#testing-phase","title":"Testing Phase","text":"<p>Technical Testing: - Cross-browser compatibility verification - Responsive design testing across devices - Accessibility compliance (WCAG guidelines) - Performance optimization - Integration testing with LMS platforms</p> <p>Educational Testing: - Pilot testing with target student populations - Educator usability assessment - Learning objective alignment verification - Assessment question validation</p>"},{"location":"chapters/microsim-dev-workflow/#feedback-collection","title":"Feedback Collection","text":"<p>Student Feedback: - Engagement metrics (time on task, interaction frequency) - Comprehension assessments (pre/post testing) - Usability feedback (ease of use, clarity of instructions) - Preference data (control layout, visual design)</p> <p>Educator Feedback: - Pedagogical effectiveness assessment - Integration ease evaluation - Curriculum alignment feedback - Technical support requirements</p>"},{"location":"chapters/microsim-dev-workflow/#intelligent-textbook-integration","title":"Intelligent Textbook Integration","text":"<p>Learning Path Integration: The MicroSim becomes part of an adaptive learning sequence within an intelligent textbook system that:</p> <ol> <li>Prerequisites Assessment: Verifies student readiness based on prior concept mastery</li> <li>Personalized Sequencing: Places the MicroSim at optimal points in individual learning paths</li> <li>Adaptive Difficulty: Adjusts parameters based on student performance data</li> <li>Remediation Triggering: Identifies students needing additional support</li> </ol> <p>xAPI Integration for Learning Analytics:</p> <p>The system logs detailed interaction events following xAPI specifications:</p> <pre><code>// Sample xAPI statements logged during MicroSim interaction\n{\n  \"actor\": {\n    \"name\": \"John Smith\",\n    \"mbox\": \"mailto:john.smith@school.edu\"\n  },\n  \"verb\": {\n    \"id\": \"http://adlnet.gov/expapi/verbs/interacted\",\n    \"display\": {\"en-US\": \"interacted\"}\n  },\n  \"object\": {\n    \"id\": \"http://school.edu/microsims/quadratic-functions\",\n    \"definition\": {\n      \"name\": {\"en-US\": \"Quadratic Function Explorer\"},\n      \"description\": {\"en-US\": \"Interactive exploration of quadratic function properties\"}\n    }\n  },\n  \"result\": {\n    \"extensions\": {\n      \"http://school.edu/xapi/coefficient-a\": 2.5,\n      \"http://school.edu/xapi/coefficient-b\": -3.0,\n      \"http://school.edu/xapi/coefficient-c\": 1.0,\n      \"http://school.edu/xapi/vertex-identified\": true,\n      \"http://school.edu/xapi/interaction-duration\": 420\n    }\n  }\n}\n</code></pre> <p>Learning Analytics Applications: - Performance Tracking: Monitor student progress across multiple MicroSims - Concept Mastery Assessment: Identify areas where students struggle - Adaptive Recommendations: Suggest additional resources or alternative approaches - Curriculum Optimization: Analyze effectiveness of different MicroSim sequences</p>"},{"location":"chapters/microsim-dev-workflow/#recommendation-engine-integration","title":"Recommendation Engine Integration","text":"<p>The intelligent textbook system uses collected xAPI data to make evidence-based recommendations:</p> <ol> <li>Similar Student Matching: Identify students with comparable learning patterns</li> <li>Success Prediction: Estimate likelihood of success with specific MicroSims</li> <li>Optimal Timing: Determine best moments to introduce new simulations</li> <li>Personalized Parameters: Adjust default settings based on individual preferences</li> </ol>"},{"location":"chapters/microsim-dev-workflow/#conclusion","title":"Conclusion","text":"<p>The development workflow for Educational MicroSims represents a sophisticated pipeline that transforms educational needs into personalized, interactive learning experiences. By leveraging existing repositories, faceted search capabilities, AI-assisted generation, iterative refinement, comprehensive metadata, and intelligent integration systems, educators can create and deploy highly targeted simulations that adapt to individual student needs.</p> <p>This workflow addresses the scalability challenges in educational technology while maintaining pedagogical rigor and technical quality. As the system matures, the accumulated data from thousands of student interactions will continuously improve both the individual MicroSims and the broader intelligent learning ecosystem, creating a self-improving educational technology platform that becomes more effective over time.</p>"},{"location":"chapters/microsims-in-the-ed-tech-landscape/","title":"Positioning Educational MicroSims Within the Landscape of Digital Learning Technologies","text":""},{"location":"chapters/microsims-in-the-ed-tech-landscape/#introduction","title":"Introduction","text":"<p>The educational technology landscape has undergone significant transformation over the past decade, with interactive simulations, virtual laboratories, and adaptive learning platforms becoming increasingly prevalent in formal and informal learning environments. While these technologies have demonstrated considerable potential for enhancing student engagement and comprehension, they often suffer from limitations in accessibility, scalability, and pedagogical integration. This paper positions Educational MicroSims as a distinct category of learning technology that addresses these limitations while maintaining the interactive benefits of more complex simulation environments.</p> <p>Educational MicroSims represent a paradigm shift in how interactive educational content is conceptualized, developed, and deployed. Unlike traditional educational simulations that require substantial technical infrastructure and specialized expertise, MicroSims are designed as lightweight, browser-based applications that can be rapidly generated using artificial intelligence and easily customized by educators without programming knowledge. This positioning paper examines how MicroSims differentiate from existing educational technologies and articulates their unique value proposition within the broader ecosystem of digital learning tools.</p>"},{"location":"chapters/microsims-in-the-ed-tech-landscape/#differentiation-from-existing-educational-simulations","title":"Differentiation from Existing Educational Simulations","text":"<p>Traditional educational simulations, such as PhET Interactive Simulations from the University of Colorado (Wieman et al., 2008) or NetLogo models from Northwestern University (Wilensky, 1999), represent sophisticated educational tools that have proven effective in science and mathematics education. However, these platforms are characterized by several limitations that MicroSims explicitly address. First, traditional simulations typically require significant development resources, specialized programming expertise, and ongoing maintenance to ensure compatibility across evolving web technologies. In contrast, MicroSims employ standardized architectural patterns that enable automated generation through large language models, dramatically reducing development time and technical barriers.</p> <p>Second, existing simulation platforms often implement comprehensive feature sets that, while powerful, can overwhelm both educators seeking to integrate specific concepts and students encountering cognitive overload. MicroSims adopt a deliberately constrained approach, focusing on specific learning objectives with minimal extraneous functionality. This constraint-based design philosophy aligns with cognitive load theory principles (Sweller, 1988), which suggest that learning is optimized when instructional materials minimize irrelevant cognitive processing.</p> <p>Third, traditional educational simulations frequently operate as standalone applications with limited integration capabilities. MicroSims are architected from the ground up for embedding within larger educational ecosystems, including intelligent textbooks, learning management systems, and adaptive learning platforms. This integration-first approach enables seamless incorporation into existing curricula without requiring educators to adopt entirely new technological infrastructures.</p>"},{"location":"chapters/microsims-in-the-ed-tech-landscape/#distinction-from-interactive-textbooks-and-digital-learning-materials","title":"Distinction from Interactive Textbooks and Digital Learning Materials","text":"<p>The interactive textbook market has evolved considerably, with platforms such as Pearson MyLab (Pearson Education, 2023), McGraw-Hill Connect (McGraw-Hill Education, 2023), and Wiley WileyPLUS (Wiley, 2023) offering multimedia-enhanced learning experiences. However, these platforms typically employ pre-authored interactive elements that cannot be easily modified or extended by individual educators. MicroSims fundamentally differ by providing a generative approach to interactive content creation, where simulations are produced on-demand to address specific pedagogical requirements.</p> <p>Furthermore, commercial interactive textbook platforms operate under proprietary licensing models that limit institutional flexibility and long-term sustainability. MicroSims, by contrast, generate open-source code that institutions can freely modify, redistribute, and maintain independently. This open architecture ensures that educational investments in MicroSim-based content remain viable regardless of vendor relationships or platform evolution.</p> <p>The pedagogical integration model also differs significantly. Traditional interactive textbooks embed predetermined interactive elements at fixed locations within the content structure. MicroSims enable dynamic content generation that can respond to real-time assessment of student understanding, creating personalized learning pathways that adapt to individual student needs and preferences.</p>"},{"location":"chapters/microsims-in-the-ed-tech-landscape/#positioning-relative-to-learning-management-systems-and-virtual-laboratories","title":"Positioning Relative to Learning Management Systems and Virtual Laboratories","text":"<p>Learning Management Systems (LMS) such as Canvas (Instructure, 2023), Blackboard (Blackboard Inc., 2023), and Moodle (Moodle Pty Ltd., 2023) provide comprehensive platforms for course delivery and student management but rely heavily on external content providers for interactive educational materials. MicroSims complement existing LMS infrastructure by providing a standardized method for generating and deploying interactive content directly within these platforms. The lightweight architecture of MicroSims ensures compatibility across different LMS implementations without requiring platform-specific adaptations.</p> <p>Virtual laboratory platforms, including Labster (Labster ApS, 2023) and Beyond Labz (Beyond Labz Inc., 2023), offer sophisticated simulation environments for science education but typically require subscription-based access and specialized hardware resources. MicroSims provide an alternative approach that prioritizes accessibility and scalability over comprehensive simulation fidelity. While virtual laboratories excel in providing high-fidelity replications of complex scientific processes, MicroSims focus on isolating and illustrating specific conceptual relationships that support understanding of fundamental principles.</p>"},{"location":"chapters/microsims-in-the-ed-tech-landscape/#technological-architecture-and-implementation-philosophy","title":"Technological Architecture and Implementation Philosophy","text":"<p>The technical architecture of MicroSims represents a deliberate departure from conventional educational software design. Rather than implementing feature-rich applications with extensive configuration options, MicroSims employ a minimalist architecture that prioritizes code clarity, educational transparency, and modification accessibility. This approach enables educators and students to examine, understand, and modify the underlying simulation logic, transforming the technology from a black-box tool into a transparent educational resource.</p> <p>The responsive design framework employed by MicroSims ensures consistent functionality across diverse device types and screen sizes, addressing the increasing prevalence of mobile and tablet-based learning in educational contexts. This device-agnostic approach contrasts with many existing educational technologies that require specific operating systems or hardware configurations.</p>"},{"location":"chapters/microsims-in-the-ed-tech-landscape/#integration-with-artificial-intelligence-and-adaptive-learning","title":"Integration with Artificial Intelligence and Adaptive Learning","text":"<p>Perhaps most significantly, MicroSims are specifically designed for integration with artificial intelligence systems, particularly large language models capable of code generation. This design consideration enables the development of adaptive educational systems that can generate customized simulations in real-time based on student performance data, learning preferences, and curriculum requirements. Traditional educational simulations, developed through conventional programming approaches, cannot easily achieve this level of dynamic customization.</p> <p>The structured data output generated by MicroSim interactions provides rich datasets for learning analytics applications, enabling educational systems to make evidence-based decisions about content sequencing, difficulty adjustment, and remediation strategies. This data-driven approach to educational personalization represents a significant advancement over static interactive content that cannot adapt to individual student needs.</p>"},{"location":"chapters/microsims-in-the-ed-tech-landscape/#conclusion","title":"Conclusion","text":"<p>Educational MicroSims occupy a unique position within the digital learning technology ecosystem, addressing specific limitations of existing approaches while maintaining the proven benefits of interactive simulation-based learning. By prioritizing simplicity, accessibility, and AI integration over comprehensive feature sets, MicroSims provide a scalable solution for creating personalized, adaptive educational experiences. As educational institutions increasingly seek flexible, sustainable approaches to technology integration, MicroSims offer a promising model that balances pedagogical effectiveness with practical implementation considerations. The continued development and refinement of the MicroSim approach will likely influence broader trends in educational technology design, emphasizing the value of constraint-based design principles and AI-enabled content generation in creating more effective and accessible learning environments.</p>"},{"location":"chapters/microsims-in-the-ed-tech-landscape/#references","title":"References","text":"<p>Beyond Labz Inc. (2023). Beyond Labz virtual science labs. Retrieved from https://www.beyondlabz.com/</p> <p>Blackboard Inc. (2023). Blackboard Learn. Retrieved from https://www.blackboard.com/teaching-learning/learning-management</p> <p>Instructure. (2023). Canvas LMS. Retrieved from https://www.instructure.com/canvas</p> <p>Labster ApS. (2023). Labster virtual lab simulations. Retrieved from https://www.labster.com/</p> <p>McGraw-Hill Education. (2023). McGraw Hill Connect. Retrieved from https://www.mheducation.com/highered/connect.html</p> <p>Moodle Pty Ltd. (2023). Moodle learning management system. Retrieved from https://moodle.org/</p> <p>Pearson Education. (2023). MyLab &amp; Mastering. Retrieved from https://www.pearson.com/en-us/higher-education/products-services/mylab-mastering.html</p> <p>Sweller, J. (1988). Cognitive load during problem solving: Effects on learning. Cognitive Science, 12(2), 257-285. https://doi.org/10.1207/s15516709cog1202_4</p> <p>University of Colorado Boulder. (2023). PhET Interactive Simulations. Retrieved from https://phet.colorado.edu/</p> <p>Wieman, C. E., Adams, W. K., Loeblein, P., &amp; Perkins, K. K. (2008). Teaching physics using PhET simulations. The Physics Teacher, 48(4), 225-227. https://doi.org/10.1119/1.3361987</p> <p>Wilensky, U. (1999). NetLogo. Center for Connected Learning and Computer-Based Modeling, Northwestern University. Retrieved from http://ccl.northwestern.edu/netlogo/</p> <p>Wiley. (2023). WileyPLUS. Retrieved from https://www.wiley.com/en-us/wileyplus</p>"},{"location":"chapters/paper-steps/","title":"Complete Guide to Publishing MicroSims Paper on arXiv","text":""},{"location":"chapters/paper-steps/#phase-1-pre-writing-planning-2-3-weeks","title":"Phase 1: Pre-Writing Planning (2-3 weeks)","text":""},{"location":"chapters/paper-steps/#11-define-your-research-contribution","title":"1.1 Define Your Research Contribution","text":"<ul> <li>Identify the novel contribution: What makes MicroSims unique in educational technology?</li> <li>Position against existing work: How do MicroSims differ from existing educational simulations, interactive textbooks, or learning tools?</li> <li>Define your target audience: Education researchers, computer science educators, HCI researchers, or learning technology developers</li> <li>Clarify your research questions: </li> <li>Do MicroSims improve learning outcomes compared to traditional methods?</li> <li>What design principles make MicroSims effective?</li> <li>How do students engage with MicroSims differently than other tools?</li> </ul>"},{"location":"chapters/paper-steps/#12-literature-review-strategy","title":"1.2 Literature Review Strategy","text":"<ul> <li>Use AI tools for initial discovery:</li> <li>Semantic Scholar API for related papers</li> <li>Connected Papers for visual literature mapping</li> <li>ResearchRabbit for citation networks</li> <li>Elicit.org for research question exploration</li> <li>Key search terms: \"educational simulations,\" \"interactive learning,\" \"microlearning,\" \"educational technology,\" \"p5.js education,\" \"web-based simulations\"</li> <li>Target venues to review: CHI, SIGCSE, Computers &amp; Education, Educational Technology Research, Learning Analytics</li> </ul>"},{"location":"chapters/paper-steps/#13-data-collection-planning","title":"1.3 Data Collection Planning","text":"<ul> <li>Quantitative data: Usage analytics, learning outcomes, completion rates</li> <li>Qualitative data: User interviews, instructor feedback, student surveys</li> <li>Technical metrics: Performance data, accessibility compliance, cross-platform compatibility</li> </ul>"},{"location":"chapters/paper-steps/#phase-2-paper-structure-and-writing-4-6-weeks","title":"Phase 2: Paper Structure and Writing (4-6 weeks)","text":""},{"location":"chapters/paper-steps/#21-choose-paper-type-and-format","title":"2.1 Choose Paper Type and Format","text":"<p>Recommended arXiv categories: - <code>cs.HC</code> (Human-Computer Interaction) - Primary - <code>cs.CY</code> (Computers and Society) - Secondary - <code>cs.LG</code> (Machine Learning) - If AI-generated content is emphasized</p> <p>Paper length: 8-12 pages for conference format, or 15-25 pages for journal format</p>"},{"location":"chapters/paper-steps/#22-standard-academic-paper-structure","title":"2.2 Standard Academic Paper Structure","text":""},{"location":"chapters/paper-steps/#abstract-150-250-words","title":"Abstract (150-250 words)","text":"<ul> <li>Problem statement: Current limitations in educational technology</li> <li>Solution: MicroSims as responsive, interactive learning tools</li> <li>Methodology: How you evaluated MicroSims</li> <li>Key findings: Quantified improvements or insights</li> <li>Impact: Broader implications for education</li> </ul>"},{"location":"chapters/paper-steps/#1-introduction-1-2-pages","title":"1. Introduction (1-2 pages)","text":"<ul> <li>Hook: Compelling statistic about online education challenges</li> <li>Problem definition: Specific gaps in current educational tools</li> <li>Solution overview: MicroSims concept and approach</li> <li>Contributions: 3-4 specific contributions your work makes</li> <li>Paper organization: Brief roadmap of remaining sections</li> </ul>"},{"location":"chapters/paper-steps/#2-related-work-2-3-pages","title":"2. Related Work (2-3 pages)","text":"<ul> <li>Educational simulations: Historical context and current state</li> <li>Interactive learning tools: Comparison with existing approaches</li> <li>Web-based educational technology: p5.js and similar frameworks</li> <li>Responsive design in education: Mobile-first learning approaches</li> <li>Learning effectiveness studies: Research on simulation-based learning</li> </ul>"},{"location":"chapters/paper-steps/#3-microsims-design-framework-2-3-pages","title":"3. MicroSims Design Framework (2-3 pages)","text":"<ul> <li>Design principles: Responsive, accessible, standards-based</li> <li>Technical architecture: p5.js, HTML5, JavaScript ecosystem</li> <li>Educational pedagogy: How design supports learning objectives</li> <li>Implementation standards: Your documented rules and guidelines</li> </ul>"},{"location":"chapters/paper-steps/#4-implementation-and-examples-2-3-pages","title":"4. Implementation and Examples (2-3 pages)","text":"<ul> <li>Technical details: Code structure, responsive design patterns</li> <li>Example MicroSims: 3-5 representative examples across domains</li> <li>Development workflow: How educators can create new MicroSims</li> <li>Deployment considerations: Web hosting, performance, accessibility</li> </ul>"},{"location":"chapters/paper-steps/#5-evaluation-3-4-pages","title":"5. Evaluation (3-4 pages)","text":"<ul> <li>Study design: Methodology for evaluating effectiveness</li> <li>Participants: Demographics and selection criteria</li> <li>Metrics: Learning outcomes, engagement, usability</li> <li>Results: Quantitative findings with statistical analysis</li> <li>Qualitative insights: User feedback and observations</li> </ul>"},{"location":"chapters/paper-steps/#6-discussion-1-2-pages","title":"6. Discussion (1-2 pages)","text":"<ul> <li>Key findings interpretation: What the results mean</li> <li>Limitations: Honest assessment of study constraints</li> <li>Design implications: Lessons for future educational tools</li> <li>Broader impact: How MicroSims could transform education</li> </ul>"},{"location":"chapters/paper-steps/#7-conclusion-and-future-work-1-page","title":"7. Conclusion and Future Work (1 page)","text":"<ul> <li>Summary of contributions: Restate key achievements</li> <li>Future research directions: Next steps and open questions</li> <li>Call to action: How others can adopt or extend this work</li> </ul>"},{"location":"chapters/paper-steps/#23-ai-assisted-reference-generation","title":"2.3 AI-Assisted Reference Generation","text":""},{"location":"chapters/paper-steps/#using-ai-tools-for-literature-discovery","title":"Using AI Tools for Literature Discovery","text":"<p>Claude/ChatGPT prompts for reference generation: <pre><code>\"Find 15-20 recent academic papers (2018-2024) related to [specific topic]. \nFor each paper, provide: full citation, brief summary, and relevance to my research on educational MicroSims.\"\n</code></pre></p> <p>Semantic Scholar queries: - Use their API to search for papers by topic and date range - Filter by venue quality and citation count - Export BibTeX directly for your reference manager</p> <p>Google Scholar with AI assistance: - Use AI to generate sophisticated search queries - Ask AI to analyze abstract relevance before downloading full papers - Use AI to summarize key papers and identify citation gaps</p>"},{"location":"chapters/paper-steps/#reference-quality-criteria","title":"Reference Quality Criteria","text":"<ul> <li>Recency: Prioritize papers from last 5 years (80% of references)</li> <li>Venue quality: Top-tier conferences and journals in education/HCI</li> <li>Citation count: Well-cited foundational papers plus recent innovations</li> <li>Diversity: Mix of technical, pedagogical, and evaluation papers</li> <li>Geographic diversity: Include international perspectives</li> </ul>"},{"location":"chapters/paper-steps/#ai-tools-for-reference-management","title":"AI Tools for Reference Management","text":"<ul> <li>Zotero + Better BibTeX: Automated citation formatting</li> <li>Mendeley: Social reference discovery</li> <li>ResearchRabbit: Citation network analysis</li> <li>Elicit: AI-powered paper summarization</li> </ul>"},{"location":"chapters/paper-steps/#phase-3-technical-implementation-1-2-weeks","title":"Phase 3: Technical Implementation (1-2 weeks)","text":""},{"location":"chapters/paper-steps/#31-document-your-microsims-framework","title":"3.1 Document Your MicroSims Framework","text":"<ul> <li>Create comprehensive documentation: API reference, design patterns</li> <li>Standardize code examples: Consistent formatting and commenting</li> <li>Generate technical diagrams: Architecture overview, component relationships</li> <li>Performance benchmarks: Load times, responsiveness metrics</li> </ul>"},{"location":"chapters/paper-steps/#32-prepare-supplementary-materials","title":"3.2 Prepare Supplementary Materials","text":"<ul> <li>Code repository: Clean, well-documented GitHub repository</li> <li>Live demos: Hosted examples that reviewers can interact with</li> <li>Video demonstrations: Screen recordings showing MicroSims in action</li> <li>Data and analysis scripts: Reproducible research materials</li> </ul>"},{"location":"chapters/paper-steps/#phase-4-manuscript-preparation-1-2-weeks","title":"Phase 4: Manuscript Preparation (1-2 weeks)","text":""},{"location":"chapters/paper-steps/#41-latex-setup-for-arxiv","title":"4.1 LaTeX Setup for arXiv","text":"<p>Recommended LaTeX template: <pre><code>\\documentclass[11pt]{article}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{arxiv} % arXiv-specific formatting\n\\usepackage{graphicx, amsmath, amssymb}\n\\usepackage{url, hyperref}\n\\usepackage{natbib} % for bibliography\n</code></pre></p> <p>Essential packages: - <code>arxiv.sty</code>: Official arXiv formatting - <code>graphicx</code>: For figures and screenshots - <code>listings</code>: For code examples - <code>hyperref</code>: For clickable links - <code>natbib</code> or <code>biblatex</code>: Citation management</p>"},{"location":"chapters/paper-steps/#42-figure-and-table-preparation","title":"4.2 Figure and Table Preparation","text":"<ul> <li>High-resolution screenshots: MicroSims interfaces and interactions</li> <li>Performance charts: Loading times, user engagement metrics</li> <li>Architecture diagrams: System overview and component relationships</li> <li>User study results: Statistical charts and graphs</li> <li>All figures: Vector format (PDF/SVG) when possible, minimum 300 DPI</li> </ul>"},{"location":"chapters/paper-steps/#43-ai-assisted-writing-and-editing","title":"4.3 AI-Assisted Writing and Editing","text":""},{"location":"chapters/paper-steps/#grammar-and-style-checking","title":"Grammar and Style Checking","text":"<ul> <li>Grammarly Premium: Advanced grammar and style suggestions</li> <li>DeepL Write: Alternative grammar checking with AI insights</li> <li>Claude/ChatGPT: Section-by-section editing and improvement suggestions</li> </ul>"},{"location":"chapters/paper-steps/#content-enhancement-prompts","title":"Content Enhancement Prompts","text":"<pre><code>\"Review this technical section for clarity and suggest improvements for a computer science audience\"\n\"Strengthen the academic tone of this paragraph while maintaining readability\"\n\"Suggest 3 alternative ways to phrase this key contribution for maximum impact\"\n</code></pre>"},{"location":"chapters/paper-steps/#consistency-checking","title":"Consistency Checking","text":"<ul> <li>Terminology: Consistent use of technical terms throughout</li> <li>Citation format: Uniform citation style (IEEE, ACM, APA)</li> <li>Figure references: All figures properly referenced in text</li> <li>Section numbering: Consistent hierarchical structure</li> </ul>"},{"location":"chapters/paper-steps/#phase-5-arxiv-submission-process-1-week","title":"Phase 5: arXiv Submission Process (1 week)","text":""},{"location":"chapters/paper-steps/#51-arxiv-account-setup","title":"5.1 arXiv Account Setup","text":"<ul> <li>Create account: Register at arxiv.org with institutional email</li> <li>Verify affiliation: May require endorsement for first submission</li> <li>Choose categories: Primary and secondary subject classifications</li> <li>Set up ORCID: Link your researcher identifier</li> </ul>"},{"location":"chapters/paper-steps/#52-pre-submission-checklist","title":"5.2 Pre-submission Checklist","text":"<ul> <li>File format: LaTeX source files or high-quality PDF</li> <li>File size: Under 50MB total (compress figures if needed)</li> <li>Bibliography: All references properly formatted and complete</li> <li>Figures: All figures included and properly referenced</li> <li>Supplementary materials: Links to code repositories and demos</li> <li>Contact information: Current and accessible email address</li> </ul>"},{"location":"chapters/paper-steps/#53-submission-requirements","title":"5.3 Submission Requirements","text":""},{"location":"chapters/paper-steps/#required-files","title":"Required Files","text":"<ul> <li>Main manuscript: <code>.tex</code> file and compiled PDF</li> <li>Bibliography: <code>.bib</code> file with complete references</li> <li>Figures: All image files referenced in the manuscript</li> <li>Style files: Any custom <code>.sty</code> files used</li> <li>README: Optional file explaining compilation process</li> </ul>"},{"location":"chapters/paper-steps/#metadata-requirements","title":"Metadata Requirements","text":"<ul> <li>Title: Clear, descriptive, includes \"MicroSims\"</li> <li>Authors: Full names and current affiliations</li> <li>Abstract: Compelling 150-250 word summary</li> <li>Keywords: Relevant terms for discoverability</li> <li>Categories: Primary and secondary arXiv classifications</li> <li>Comments: Optional field for additional context</li> </ul>"},{"location":"chapters/paper-steps/#54-common-submission-issues","title":"5.4 Common Submission Issues","text":"<ul> <li>Compilation errors: Test LaTeX compilation multiple times</li> <li>Missing references: Verify all citations have corresponding bibliography entries</li> <li>Figure problems: Ensure all figures compile correctly</li> <li>Category selection: Choose appropriate primary category</li> <li>File encoding: Use UTF-8 encoding for all text files</li> </ul>"},{"location":"chapters/paper-steps/#phase-6-post-submission-strategy-ongoing","title":"Phase 6: Post-Submission Strategy (Ongoing)","text":""},{"location":"chapters/paper-steps/#61-promotion-and-dissemination","title":"6.1 Promotion and Dissemination","text":"<ul> <li>Social media: Twitter/X threads highlighting key contributions</li> <li>Academic networks: Share on ResearchGate, Academia.edu</li> <li>Conference presentations: Submit to relevant education/HCI conferences</li> <li>Blog posts: Write accessible summaries for broader audiences</li> <li>Podcast appearances: Discuss on education technology podcasts</li> </ul>"},{"location":"chapters/paper-steps/#62-community-engagement","title":"6.2 Community Engagement","text":"<ul> <li>GitHub repository: Maintain active open-source project</li> <li>Documentation website: Create comprehensive guides and tutorials</li> <li>Educational partnerships: Collaborate with schools and universities</li> <li>Workshop organization: Host MicroSims development workshops</li> </ul>"},{"location":"chapters/paper-steps/#63-future-publication-strategy","title":"6.3 Future Publication Strategy","text":"<ul> <li>Journal submission: Adapt arXiv preprint for peer-reviewed journals</li> <li>Conference presentations: Present at SIGCSE, CHI, or similar venues</li> <li>Special issues: Look for relevant journal special issues</li> <li>Book chapters: Contribute to educational technology handbooks</li> </ul>"},{"location":"chapters/paper-steps/#phase-7-quality-assurance-timeline","title":"Phase 7: Quality Assurance Timeline","text":""},{"location":"chapters/paper-steps/#week-1-2-research-and-planning","title":"Week 1-2: Research and Planning","text":"<ul> <li>Literature review and AI-assisted reference gathering</li> <li>Framework documentation and code cleanup</li> <li>Study design and data collection</li> </ul>"},{"location":"chapters/paper-steps/#week-3-4-first-draft","title":"Week 3-4: First Draft","text":"<ul> <li>Complete manuscript first draft</li> <li>Generate all figures and tables</li> <li>Initial AI-assisted editing pass</li> </ul>"},{"location":"chapters/paper-steps/#week-5-6-review-and-revision","title":"Week 5-6: Review and Revision","text":"<ul> <li>Peer review from colleagues</li> <li>AI-assisted content improvement</li> <li>Technical accuracy verification</li> </ul>"},{"location":"chapters/paper-steps/#week-7-final-preparation","title":"Week 7: Final Preparation","text":"<ul> <li>LaTeX formatting and compilation testing</li> <li>Final proofreading and consistency checks</li> <li>Submission file preparation</li> </ul>"},{"location":"chapters/paper-steps/#week-8-submission-and-launch","title":"Week 8: Submission and Launch","text":"<ul> <li>arXiv submission and approval process</li> <li>Promotion and community outreach</li> <li>Monitor for feedback and engagement</li> </ul>"},{"location":"chapters/paper-steps/#ai-tools-summary","title":"AI Tools Summary","text":""},{"location":"chapters/paper-steps/#reference-generation","title":"Reference Generation","text":"<ul> <li>Semantic Scholar: Automated paper discovery and BibTeX export</li> <li>ResearchRabbit: Visual citation networks and related work discovery</li> <li>Elicit: AI-powered research question exploration and paper summarization</li> </ul>"},{"location":"chapters/paper-steps/#writing-assistance","title":"Writing Assistance","text":"<ul> <li>Claude/ChatGPT: Content generation, editing, and improvement suggestions</li> <li>Grammarly: Grammar checking and style improvements</li> <li>DeepL Write: Alternative grammar and clarity checking</li> </ul>"},{"location":"chapters/paper-steps/#technical-tools","title":"Technical Tools","text":"<ul> <li>GitHub Copilot: Code documentation and example generation</li> <li>Zotero: Reference management with AI-powered organization</li> <li>Overleaf: Collaborative LaTeX editing with real-time compilation</li> </ul> <p>This comprehensive approach will help you create a high-quality, well-researched paper that effectively communicates the value and impact of MicroSims to the academic community.</p>"},{"location":"chapters/references/","title":"References","text":""},{"location":"chapters/sample-microsims/","title":"Sample MicroSims","text":"<p>In this section we demonstrate some sample MicroSims.  We selected them to range from simple to more complex and we also used different back-end Javascript libraries.</p>"},{"location":"chapters/sample-microsims/#bouncing-ball","title":"Bouncing Ball","text":"<p>This is our \"Hello World!\" program for a MicroSims.  It shows a blue ball that bounces around within a <code>drawingArea</code>.  A single horizontal slider allows you to adjust the speed of the ball. Note that the simulation adapts to changes in screen width.</p> <p></p>"},{"location":"chapters/sample-microsims/#pythagorean-theorem","title":"Pythagorean Theorem","text":"<p>Our first Educational MicroSim shows a visualization of the Pythagorean Theorem. The initial display shows a simple right triangle where the user can adjust the length of two sides of a right triangle.  By checking the</p> <p>Pythagorean Theorem Visualization</p>"},{"location":"chapters/sample-microsims/#sine-and-cosine","title":"Sine and Cosine","text":"<p>Sine and Cosine</p>"},{"location":"chapters/sample-microsims/#least-squares","title":"Least Squares","text":"<p>Least Squares</p>"},{"location":"chapters/sample-microsims/#tragedy-of-the-commons","title":"Tragedy of the Commons","text":"<p>Tragedy of The Commons</p>"},{"location":"chapters/sample-microsims/#image-convolution","title":"Image Convolution","text":"<p>Image Convolution</p>"},{"location":"chapters/sample-microsims/#sound-frequency-response","title":"Sound Frequency Response","text":"<p>Read the sound from the computer microphone and display a chart of the frequency</p> <p>Signal Processing FFT</p>"},{"location":"chapters/sample-microsims/#graph-search","title":"Graph Search","text":"<p>Show the difference between breath-first search in a graph and depth-first search.</p> <p>Graph Search BFS vs. DFS</p>"},{"location":"chapters/what-is-a-microsim/","title":"Definition of Educational MicroSims","text":"<p>We define an Educational MicroSim as a lightweight, standalone interactive simulation that executes within standard web browsers and is specifically designed for pedagogical applications. In this document we use the single word <code>MicroSim</code> for the full term <code>Educational MicroSim</code>.</p> <p>MicroSims are characterized by the following key properties:</p>"},{"location":"chapters/what-is-a-microsim/#key-attributes-of-a-microsim","title":"Key Attributes of a MicroSim","text":""},{"location":"chapters/what-is-a-microsim/#technical-architecture","title":"Technical Architecture","text":"<p>MicroSims are implemented as self-contained web applications, typically using JavaScript frameworks such as p5.js, that require no external dependencies or server-side infrastructure. They follow a standardized width responsive design pattern with distinct regions for visualization (drawing area) and user controls (interaction area).  The layout of MicroSims can be expressed in a rules file that is used by generative AI systems.</p>"},{"location":"chapters/what-is-a-microsim/#educational-purpose","title":"Educational Purpose","text":"<p>Each MicroSim targets specific learning objectives within a curriculum, enabling students to manipulate parameters and observe resulting changes in real-time. They support experiential learning by allowing learners to explore cause-and-effect relationships through direct interaction with underlying models or algorithms.</p>"},{"location":"chapters/what-is-a-microsim/#generative-ai-integration","title":"Generative AI Integration","text":"<p>MicroSims are designed to be automatically generated by large language models such as GPT-4 or Claude, following standardized templates and design patterns. This enables rapid creation of domain-specific simulations aligned with particular educational content and learning objectives.</p>"},{"location":"chapters/what-is-a-microsim/#accessibility-and-extensibility","title":"Accessibility and Extensibility","text":"<p>The simulations are engineered for modification and extension by non-technical users including educators, students, and content creators. They employ consistent user interface conventions and well-documented code structures to facilitate customization without requiring advanced programming expertise.</p>"},{"location":"chapters/what-is-a-microsim/#learning-analytics-integration","title":"Learning Analytics Integration","text":"<p>MicroSims generate structured event streams capturing user interactions, parameter adjustments, and exploration patterns. These data streams can be analyzed to assess learning progress and provide feedback to adaptive educational systems, including intelligent textbooks that employ reinforcement learning to optimize the learning experience.</p>"},{"location":"chapters/what-is-a-microsim/#scalability-and-distribution","title":"Scalability and Distribution","text":"<p>Being browser-based and dependency-free, MicroSims can be easily distributed, embedded in various learning management systems, and accessed across different devices and platforms without installation requirements.  Our goal is to allow a MicroSim to be placed on any web page using a single HTML <code>iframe</code> element.</p>"},{"location":"chapters/what-is-a-microsim/#what-microsims-are-not","title":"What MicroSims Are Not","text":"<p>To clarify the scope and boundaries of Educational MicroSims, it is important to establish what they explicitly are not:</p>"},{"location":"chapters/what-is-a-microsim/#microsims-are-not-simple-free-running-animations","title":"MicroSims Are Not Simple Free Running Animations","text":"<p>MicroSims are not simple animations of educational concepts.  Although generative AI can create beautiful animations, without some student action required for participation we cannot use feedback and reinforcement learning in our intelligent textbooks.  Simulations must at a minimum contain controls such as \"Start\" and \"Pause\" a simulation.  Monitoring who clicks these controls is critical for the development of intelligent textbooks.</p>"},{"location":"chapters/what-is-a-microsim/#technology-agnostic-implementation","title":"Technology-Agnostic Implementation","text":"<p>MicroSims are not bound to any specific JavaScript library or framework. While our implementation examples utilize p5.js for its pedagogical clarity and ease of use, the MicroSim concept is library-agnostic and can be implemented using vanilla JavaScript, D3.js, Three.js, or any other web-based rendering technology that meets the functional requirements.</p>"},{"location":"chapters/what-is-a-microsim/#not-legacy-standards-compliance","title":"Not Legacy Standards Compliance","text":"<p>MicroSims do not adhere to traditional e-learning standards such as SCORM (Sharable Content Object Reference Model), AICC (Aviation Industry Computer-Based Training Committee). These legacy standards impose architectural constraints and complexity that are incompatible with the lightweight, generative nature of MicroSims.  Note that because MicroSims  all have interactive controls, they can be designed to easily work with xAPI standards but these standards are not required.  Generative AI can be used to automatically add xAPI calls to the controls area of a MicroSim.</p>"},{"location":"chapters/what-is-a-microsim/#not-comprehensive-simulation-environments","title":"Not Comprehensive Simulation Environments","text":"<p>MicroSims are not intended to replace complex, full-featured simulation platforms or virtual laboratories. They are purposefully constrained in scope to address specific, well-defined learning objectives rather than attempting to model entire systems or domains.</p>"},{"location":"chapters/what-is-a-microsim/#metadata-strategy","title":"Metadata Strategy","text":"<p>MicroSims do leverage established metadata standards where appropriate. They incorporate Dublin Core metadata elements for resource description, enabling proper cataloging, discovery, and interoperability within educational repositories and learning management systems.</p>"},{"location":"chapters/what-is-a-microsim/#platform-specific-applications","title":"Platform-Specific Applications","text":"<p>Unlike native mobile applications or desktop software, MicroSims are not tied to specific operating systems or device types. They maintain platform independence through adherence to web standards and responsive design principles.</p>"},{"location":"chapters/what-is-a-microsim/#server-dependent-systems","title":"Server-Dependent Systems","text":"<p>MicroSims do not require server-side processing, databases, or cloud infrastructure for their core functionality. While they may optionally integrate with learning analytics platforms, their primary operation remains entirely client-side.</p> <p>This definition establishes MicroSims as a distinct category of educational technology that bridges the gap between static educational content and complex simulation environments, providing an optimal balance of interactivity, accessibility, and pedagogical effectiveness.</p>"},{"location":"chapters/width-responsive-design/","title":"The Importance of Width-Responsive Design in Educational MicroSims","text":"<p>Width-responsive design is a crucial architectural decision when creating Educational MicroSims, as it directly impacts their usability, accessibility, and integration capabilities across diverse educational contexts. Let's explore why this approach represents the optimal balance between simplicity and adaptability.</p>"},{"location":"chapters/width-responsive-design/#understanding-width-responsive-design","title":"Understanding Width-Responsive Design","text":"<p>Width-responsive design means that a MicroSim automatically adjusts its horizontal dimensions to match its container while maintaining a fixed height. This approach ensures that:</p> <ul> <li>The canvas expands or contracts horizontally based on available space</li> <li>Controls reposition themselves proportionally along the width</li> <li>Visual elements scale appropriately without vertical scrolling</li> <li>The simulation remains functional across different screen widths</li> </ul>"},{"location":"chapters/width-responsive-design/#comparing-three-design-approaches","title":"Comparing Three Design Approaches","text":""},{"location":"chapters/width-responsive-design/#fixed-width-design","title":"Fixed-Width Design","text":"<p>Characteristics: - Canvas dimensions are hardcoded (e.g., 400px \u00d7 450px) - Controls have absolute positioning - No adaptation to container size</p> <p>Advantages: - Simplest to implement - Predictable layout behavior - No responsive calculations needed - Consistent appearance across all platforms</p> <p>Disadvantages: - Poor mobile experience (requires horizontal scrolling on narrow screens) - Wastes space on larger displays - Difficult to embed in various container sizes - May break layouts in different learning management systems - Creates accessibility barriers for users with different device capabilities</p> <p>When to Use: - Quick prototypes or demonstrations - Controlled environments with known display specifications - Simple simulations where responsive behavior adds unnecessary complexity</p>"},{"location":"chapters/width-responsive-design/#fully-responsive-design","title":"Fully Responsive Design","text":"<p>Characteristics: - Both width and height adjust to container - All elements scale proportionally - Complex viewport calculations - Dynamic font sizing and element repositioning</p> <p>Advantages: - Optimal use of any screen size - Works perfectly on all devices - Maximum flexibility for embedding</p> <p>Disadvantages: - Significantly more complex to implement - Requires extensive testing across devices - Vertical responsiveness often unnecessary for educational content - Can create unpredictable layouts - Performance overhead from constant recalculation - Harder for students to modify or understand the code</p> <p>When to Use: - Full-screen applications - Complex visualizations requiring maximum screen utilization - Professional applications with dedicated development teams</p>"},{"location":"chapters/width-responsive-design/#width-responsive-design-optimal-for-microsims","title":"Width-Responsive Design (Optimal for MicroSims)","text":"<p>Characteristics: - Width adjusts to container - Height remains fixed - Controls reposition horizontally - Content scales appropriately along x-axis</p> <p>Advantages: - Iframe Integration: Perfect for embedding in various learning platforms without vertical scrollbar issues - Mobile Compatibility: Works well on phones by utilizing available width - Maintainable Code: Simpler than fully responsive while more flexible than fixed - Predictable Behavior: Fixed height prevents unexpected vertical layout shifts - Educational Transparency: Students can understand and modify the responsive logic</p> <p>Disadvantages: - May not utilize full vertical space on tall displays - Requires some responsive design knowledge - Initial setup more complex than fixed design</p>"},{"location":"chapters/width-responsive-design/#implementation-benefits-for-educational-contexts","title":"Implementation Benefits for Educational Contexts","text":""},{"location":"chapters/width-responsive-design/#1-learning-management-system-integration","title":"1. Learning Management System Integration","text":"<p>Width-responsive MicroSims seamlessly integrate into various LMS platforms because: - They fit within content columns of different widths - No horizontal scrolling disrupts the learning experience - Consistent height prevents page layout issues</p>"},{"location":"chapters/width-responsive-design/#2-mobile-learning-support","title":"2. Mobile Learning Support","text":"<p>With increasing mobile device usage in education: - Students can interact with simulations on phones and tablets - Touch controls remain accessible regardless of screen width - No pinch-to-zoom required for interaction</p>"},{"location":"chapters/width-responsive-design/#3-classroom-projection","title":"3. Classroom Projection","text":"<p>Teachers projecting MicroSims benefit from: - Full utilization of projector width - Larger controls and text for back-of-room visibility - Consistent vertical space for annotation tools</p>"},{"location":"chapters/width-responsive-design/#4-student-customization","title":"4. Student Customization","text":"<p>Width-responsive design provides: - Clear patterns for students to follow when modifying code - Understandable responsive calculations - Practical examples of real-world web development practices</p>"},{"location":"chapters/width-responsive-design/#technical-implementation-strategy","title":"Technical Implementation Strategy","text":"<p>The width-responsive approach in MicroSims typically involves:</p> <ol> <li>Container Detection: Reading the parent container's width on initialization</li> <li>Dynamic Canvas Creation: Creating canvas with container width and fixed height</li> <li>Proportional Control Positioning: Placing controls relative to canvas width</li> <li>Resize Event Handling: Updating layout when window dimensions change</li> <li>Content Scaling: Adjusting visual elements proportionally to width changes</li> </ol>"},{"location":"chapters/width-responsive-design/#best-practices-for-width-responsive-microsims","title":"Best Practices for Width-Responsive MicroSims","text":"<ul> <li>Define Minimum Width: Set a reasonable minimum (e.g., 300px) to prevent unusable layouts</li> <li>Test Key Breakpoints: Verify functionality at common widths (mobile: 375px, tablet: 768px, desktop: 1024px+)</li> <li>Maintain Aspect Ratios: Keep visual elements proportional when scaling</li> <li>Use Relative Positioning: Position controls as percentages of width rather than absolute pixels</li> <li>Preserve Readability: Ensure text remains legible at all supported widths</li> </ul>"},{"location":"chapters/width-responsive-design/#conclusion","title":"Conclusion","text":"<p>Width-responsive design represents the sweet spot for Educational MicroSims, providing essential flexibility without unnecessary complexity. It ensures that simulations work effectively across the diverse technological landscape of modern education\u2014from smartphones to smart boards\u2014while remaining simple enough for educators and students to understand and modify.</p> <p>By choosing width-responsive over fixed or fully responsive designs, we create MicroSims that are: - Accessible to learners regardless of their device - Integrable into any educational platform - Maintainable by educators with basic technical skills - Scalable for classroom projection and demonstration - Educational in demonstrating practical responsive design principles</p> <p>This design philosophy aligns perfectly with the core mission of Educational MicroSims: creating interactive learning tools that are both pedagogically effective and technically accessible to the broadest possible audience.</p>"},{"location":"prompts/","title":"Sample Prompts for Generating MicroSims","text":"<p>This area of our site contains guidelines on using generative AI tools to create microsims.  There are several strategies we employ.</p>"},{"location":"prompts/#leveraging-projects","title":"Leveraging Projects","text":"<p>Both Anthropic Claude and OpenAI have the concept of projects where you can load sample code.  We strongly suggest you load sample working MicroSimulation sketch files and indicate in your prompts that you want to use these as templates.</p>"},{"location":"prompts/#why-templates-work","title":"Why Templates Work","text":"<p>Generative AI is very good at generating algorithms, but not very good at generating layout.  By using templates with specific positioning rules in the comments you can get much better layout.</p>"},{"location":"prompts/#publish-layout-rules-in-your-project","title":"Publish Layout Rules In Your Project","text":""},{"location":"prompts/#basic-prompts","title":"Basic Prompts","text":"<p>Basic Prompts</p>"},{"location":"prompts/basic-prompts/","title":"Basic MicroSim Prompts","text":""},{"location":"prompts/basic-prompts/#basic-prompt","title":"Basic Prompt","text":"<p>Prompt</p> <p>Please generate a p5.js sketch. Only generate the sketch.js file. Do not generate the html file. The sketch must simulate...</p>"},{"location":"prompts/basic-prompts/#prompts-with-drawing-and-control-regions","title":"Prompts with Drawing and Control Regions","text":"<p>Prompt</p> <p>Please generate a p5.js sketch. Only generate the sketch.js file. Do not generate the html file. The sketch should have two regions of equal width on the canvas. The top region is the drawing area. The bottom region is the controls area. All drawing should be done in the drawing region of the canvas. All controls should be placed on the bottom controls region of the canvas. The input range controls are... The buttons are ... The sketch must simulate...</p>"},{"location":"prompts/basic-prompts/#responsive-prompts","title":"Responsive Prompts","text":"<p>Prompt</p> <p>Please generate a p5.js sketch. Only generate the sketch.js file. Do not generate the html file. The sketch should have two regions of equal width on the canvas. The top region is the drawing area. The bottom region is the controls area. All drawing should be done in the drawing region of the canvas. All controls should be placed on the bottom controls region of the canvas. Use the responsive-design.js template.</p>"},{"location":"prompts/design-framework-chapter/","title":"MicroSim Design Prompt","text":"<p>Please write 3 pages in the formal tone of an academic journal on the following:</p> <p>MicroSims Design Framework (2-3 pages) * Design principles: Responsive, accessible, standards-based * Technical architecture: p5.js, HTML5, JavaScript ecosystem * Educational pedagogy: How design supports learning objectives * Implementation standards: Your documented rules and guidelines</p> <p>Mention that all MicroSims should be easily used in an  as a single line of HTML Mention that MicroSims are designed to be fixed-height but respond to changes in the width of the web container they are displayed in. Mention that they should be tested on both wide and narrow screens including mobile devices. Mention that for specific JavaScript libraries they can used specific rules files for consistent UI experience such the automatic centering of the title at the top of the canvas. Mention that a JSON Schema file can be used to describe the metadata for a MicroSim for a search catalog. Mention that consistent search is critical for supporting reusable components. Mention that generative AI is very good at making small changes to a reference template, however generative AI struggles to build new MicroSims from scratch when there are many complex screen elements. Mention that generative AI tools are not good at layout so that providing precise layout rules accelerates MicroSim generation. <p>MicroSims Design Framework: A Comprehensive Approach to Educational Interactive Simulations Introduction The Educational MicroSims Design Framework represents a systematic approach to creating lightweight, interactive educationa</p>"},{"location":"prompts/microsim-workflow/","title":"MicroSim Workflow","text":"<p>Prompt</p> <p>Please help me create a document describes the development of a Development workflow Microsims.</p> <ol> <li>Begin with a general search for a repository of Microsims</li> <li>Discuss the use of faced searches to narrow down to a subject and grade level</li> <li>Show how once the user finds a similar MicroSim they can then use this as a template for generating a similar MicroSim using a generative AI tool</li> <li>Provide a sample prompt for customizing a MicroSim</li> <li>Show how some tools that allow the user to preview the MicroSim and then repeat the process until they get the desired output. Give a sample prompt that adds or removes input controls</li> <li>Show how the user can generate a metadata JSON file that describes the MicroSim in a catalog</li> <li>Discuss the next steps for testing, feedback and then integration into a LMS that would recommend this MicroSim on a learning path of an intelligent textbook that uses the xAPI for logging interaction events for each student</li> </ol>"},{"location":"rules/","title":"MicroSim Rules","text":"<p>Modern agentic IDEs such as Cursor work best when they are given precise rules to follow.  These rules can also be stored in your OpenAI \"Projects\" area and the Anthropic Claude Project.</p> <p>Here are some examples of rules:</p> <ol> <li>p5.js editor rules - make sure your MicroSim works without changes in the p5.js editor</li> <li>Responsive rules - what to do when the screen is resized</li> <li>Layout rules - how to place controls under the drawing area</li> <li>Title rules - how to place the title of a MicroSim centered at the top of the MicroSim</li> <li>Slider Rules - make sure that a label and value are placed to the left of all sliders in the control area</li> <li>Accessibility Rules - rules to make the MicroSim easier to use with screen readers using the describe() function at the end of the setup()</li> </ol> <p>You are welcome to create your own rules.  To get started we have provided a set of standard rules that have been tested with high-school teachers that use smartboards and want their controls placed at the bottom of the MicroSim.</p> <p>Note that many of the rules are designed so that the MicroSim can be easily be added to any web page with a single <code>&lt;iframe&gt;</code> HTML element.</p>"},{"location":"rules/claude-skill/","title":"Anthropic Claude Skill","text":"<p>How to Create a Custom Skill</p>"},{"location":"rules/cursor/","title":"Adding MicroSim Rules to Cursor IDE","text":"<p>Cursor uses a rules file called a \"Markdown Completion\" or \"Markdown Contextual\" file that has the file extension <code>.mdc</code></p> <p>MDC files are a specialized format that Cursor uses for its AI-assisted coding features. This extension indicates that the file contains rules, patterns, or guidance written in Markdown format that Cursor's AI capabilities can reference when providing completions and suggestions. The .mdc format allows Cursor to:</p> <ul> <li>Parse structured Markdown content</li> <li>Extract code examples and patterns</li> <li>Understand contextual rules for specific development scenarios</li> <li>Provide more tailored code completions based on the rules</li> </ul> <p>When you create rules in an .mdc file, you're essentially giving Cursor IDE context-specific knowledge about how you want your code structured. This helps the AI understand your coding conventions, project-specific patterns, and development guidelines. By using Markdown as the base format (indicated by the \"md\" part of the extension), Cursor makes it easy to include:</p> <ul> <li>Explanatory text</li> <li>Code examples</li> <li>Formatting rules</li> <li>Style guidelines</li> </ul> <p>The \"c\" likely indicates the \"completion\" or \"contextual\" aspect that differentiates it from standard Markdown (.md) files.</p> <p>Here's how to add the MicroSim development rules to your Cursor IDE:</p>"},{"location":"rules/cursor/#steps-to-save-the-rules-file","title":"Steps to Save the Rules File","text":"<ol> <li>Create the directory structure (if it doesn't already exist):</li> </ol> <pre><code>mkdir -p .cursor/rules\n</code></pre> <ol> <li>Save the rules file as <code>.cursor/rules/microsim-rules.mdc</code>:</li> </ol> <pre><code>touch .cursor/rules/microsim-rules.mdc\n</code></pre> <ol> <li>Copy and paste the contents from our created rules into the file:</li> </ol> <p>Open the newly created file in your text editor or IDE:</p> <p><pre><code>cursor .cursor/rules/microsim-rules.mdc\n</code></pre> Paste the entire contents of the MicroSim Development Rules we created</p> <ol> <li>Verify the file location and contents:    <pre><code>cat .cursor/rules/microsim-rules.mdc\n</code></pre></li> </ol>"},{"location":"rules/cursor/#using-the-rules-in-cursor-ide","title":"Using the Rules in Cursor IDE","text":"<p>Once you've saved the rules file, you can reference it in Cursor IDE:</p> <ol> <li>Command Palette Method:</li> <li>Open Cursor IDE</li> <li>Press <code>Cmd+Shift+P</code> (macOS) or <code>Ctrl+Shift+P</code> (Windows/Linux) to open the command palette</li> <li>Type \"Rules: Load File\" and select it</li> <li> <p>Enter the path: <code>.cursor/rules/microsim-rules.mdc</code></p> </li> <li> <p>Direct Reference Method:    When working on a MicroSim project, you can tell Cursor to use these rules by adding a comment at the top of your file:    <pre><code>// @cursor-rule: .cursor/rules/microsim-rules.mdc\n\n// Your MicroSim code starts here\n</code></pre></p> </li> <li> <p>Project Settings Method:</p> </li> <li>Add a <code>.cursor-project</code> file to your project root</li> <li>Include the following configuration:      <pre><code>{\n  \"rules\": [\".cursor/rules/microsim-rules.mdc\"]\n}\n</code></pre></li> </ol>"},{"location":"rules/cursor/#verifying-rule-integration","title":"Verifying Rule Integration","text":"<p>To verify that Cursor is using your rules:</p> <ol> <li>Create a new MicroSim JavaScript file</li> <li>Reference the rules using one of the methods above</li> <li>Start typing a common MicroSim structure (like <code>setup()</code>)</li> <li>Cursor should offer completions and suggestions based on your rule patterns</li> </ol>"},{"location":"rules/cursor/#troubleshooting","title":"Troubleshooting","text":"<p>If the rules aren't being applied:</p> <ul> <li>Ensure the file path is correct (<code>.cursor/rules/microsim-rules.mdc</code>)</li> <li>Check that the file has the correct permissions</li> <li>Restart Cursor IDE to refresh rule cache</li> <li>Verify the MDC syntax is correctly formatted</li> </ul> <p>This setup will allow Cursor to provide intelligent code completion and suggestions based on your MicroSim development standards across all your projects.</p>"},{"location":"rules/microsim-rules/","title":"Standardized Educational MicroSim Rules","text":"<p>You are an expert at generating high quality educational MicroSims using p5.js that have a consistent width-responsive interface will well labeled controls for controlling animations and educational simulations.</p>"},{"location":"rules/microsim-rules/#consistency-rules","title":"Consistency Rules","text":"<p>For consistency all our MicroSims have a fixed-height canvas but the width varies with the container the MicroSims are placed in. We call this a width-responsive design. The width-responsive design allows our users to use an iframe to place the MicroSim in any webpage using a fixed-height iframe.</p>"},{"location":"rules/microsim-rules/#the-microsim-software-stack","title":"The MicroSim Software Stack","text":"<ol> <li>MicroSims are written in p5.js sketches using JavaScript so they can run in any browser.</li> <li>Always use p5.js unless given specific instructions to not use p5.js.</li> <li>Make sure that the code generated will work in the p5.js editor without changes.  This means that p5.js script will have the canvas running in a <code>main</code> HTML element.</li> <li>Add the <code>describe()</code> function to the end of the <code>setup()</code> to make the MicroSim more accessible for sight impaired users.</li> <li>By default, you will never generate HTML for the MicroSim to run in.  If you do, you will make sure you include the p5.js libraries and make the padding and margin zero.</li> <li>Use the latest version of the p5.js that is available.  Do not worry about backward compatibility.</li> </ol> <p>Use the following code to create a canvas:</p> <pre><code>function setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  canvas.parent(document.querySelector('main'));\n\n  describe('My cool MicroSim', LABEL);\n}\n</code></pre>"},{"location":"rules/microsim-rules/#core-layout-structure","title":"Core Layout Structure","text":"<p>All MicroSims should follow a consistent layout paradigm to ensure visual consistency and responsive behavior:</p> <pre><code>// Canvas dimensions\nlet canvasWidth = 400;                      // Initial width that will be updated responsively\nlet drawHeight = 400;                       // Height of simulation/drawing area\nlet controlHeight = 50;                     // Height of controls region\nlet canvasHeight = drawHeight + controlHeight; // Total canvas height\nlet margin = 25;                            // Margin for visual elements\nlet sliderLeftMargin = 105;                 // Left margin for slider positioning\nlet defaultTextSize = 16;                   // Base text size for readability\n\n// Global variables for responsive design\nlet containerWidth;                         // Calculated from container upon resize\nlet containerHeight = canvasHeight;         // Usually fixed height on page\n</code></pre>"},{"location":"rules/microsim-rules/#layout-types","title":"Layout Types","text":""},{"location":"rules/microsim-rules/#1-fixed-layout","title":"1. Fixed Layout","text":"<p>Fixed layouts place components at specific x,y coordinates. Use this for simple simulations where responsiveness isn't critical:</p> <pre><code>function setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  canvas.parent(document.querySelector('main'));\n\n  // Fixed position controls\n  speedSlider = createSlider(0, 20, 5);\n  speedSlider.position(sliderLeftMargin, drawHeight + 10);\n  speedSlider.size(200);\n\n  describe('MicroSim to control the speed of the bouncing ball.', LABEL);\n}\n</code></pre> <p>Always use the <code>size</code> method of the slider to set the width of the slider.</p>"},{"location":"rules/microsim-rules/#2-responsive-width-layout","title":"2. Responsive Width Layout","text":"<p>Responsive width layouts adjust component positions and dimensions when the window resizes its width.  Our MicroSims don't get resized vertically since they are designed to have a specific hight that does not change.  Only the horizontal dimensions need to be responsive.</p> <pre><code>function setup() {\n  updateCanvasSize();  // get the container width and height here\n  const canvas = createCanvas(containerWidth, containerHeight);\n  canvas.parent(document.querySelector('main'));\n\n  speedSlider = createSlider(0, 20, 5);\n  speedSlider.position(sliderLeftMargin, drawHeight + 10);\n  speedSlider.size(containerWidth - sliderLeftMargin - 15);\n\n  describe('MicroSim to control the speed of the bouncing ball.', LABEL);\n\n}\n\n// Required functions for responsive design\nfunction windowResized() {\n  updateCanvasSize();\n  resizeCanvas(containerWidth, containerHeight);\n  redraw();\n  // Resize sliders to match new width\n  speedSlider.size(containerWidth - sliderLeftMargin - 15);\n}\n\nfunction updateCanvasSize() {\n  const container = document.querySelector('main').getBoundingClientRect();\n  containerWidth = Math.floor(container.width);\n  canvasWidth = containerWidth;\n}\n</code></pre>"},{"location":"rules/microsim-rules/#3-two-column-layout","title":"3. Two-Column Layout","text":"<p>Two-column layouts divide the drawing area into a simulation section and a chart/graph section:</p> <pre><code>// Additional variables for two-column layout\nlet simWidth;        // Width of simulation area\nlet chartWidth;      // Width of chart area\nlet chartMargin = 40; // Margin around chart for axes and labels\n\nfunction setup() {\n  updateCanvasSize();\n  simWidth = containerWidth * 0.6; // width of the left side simulation\n  chartWidth = containerWidth * 0.4; // width of the right side chart\n  const canvas = createCanvas(containerWidth, containerHeight);\n  canvas.parent(document.querySelector('main'));\n}\n\nfunction draw() {\n  // Draw simulation area\n  fill('aliceblue');\n  stroke('silver');\n  rect(0, 0, simWidth, drawHeight);\n\n  // Draw chart area with a white background\n  fill('white');\n  stroke('silver');\n  rect(simWidth, 0, chartWidth, drawHeight);\n\n  // Draw controls area\n  fill('white');\n  rect(0, drawHeight, containerWidth, controlHeight);\n\n  // Draw simulation content\n  drawSimulation();\n\n  // Use push/pop for chart placement\n  push();\n    translate(simWidth + chartMargin, margin);\n    drawChart();\n  pop();\n}\n</code></pre>"},{"location":"rules/microsim-rules/#common-layout-rules","title":"Common Layout Rules","text":"<p>For all MicroSims, regardless of layout type:</p> <ol> <li>Clearly separate drawing and controls areas</li> <li>Place a 1px wide silver stroke around both drawing and controls rectangles</li> <li>Draw the background of the drawing area with 'aliceblue'</li> <li>Draw the background of the controls area with 'white'</li> <li>Use the windowResized() function to handle responsive behavior</li> <li>Center title at the top of the drawing area in 24pt font</li> <li>Don't resize any vertical placements</li> </ol> <pre><code>// Standard drawing area and controls background setup\nfunction draw() {\n  // Draw area\n  fill('aliceblue');\n  stroke('silver');\n  strokeWeight(1);\n  rect(0, 0, canvasWidth, drawHeight);\n\n  // Controls area\n  fill('white');\n  stroke('silver');\n  strokeWeight(1);\n  rect(0, drawHeight, canvasWidth, controlHeight);\n\n  // Title\n  fill('black');\n  noStroke();\n  textSize(24);\n  textAlign(CENTER, TOP);\n  text(\"Simulation Title\", canvasWidth/2, margin);\n\n  // Reset text properties for other elements\n  textSize(defaultTextSize);\n  textAlign(LEFT, CENTER);\n}\n</code></pre>"},{"location":"rules/microsim-rules/#rules-for-control-placement","title":"Rules for Control Placement","text":"<ol> <li>Place all controls (sliders, buttons) in the controls area below the drawing area</li> <li>Place controls y-location relative to the drawHeight</li> <li>Position range controls with label and value to the left of the control</li> <li>For responsive layouts, range sliders should expand to fill available width</li> <li>Use consistent spacing and alignment between controls</li> <li>Always use the native p5.js button control</li> </ol> <pre><code>// Standard control setup\nfunction setup() {\n  // Speed slider\n  speedSlider = createSlider(0, 20, 5);\n  speedSlider.position(sliderLeftMargin, drawHeight + 10);\n  speedSlider.size(containerWidth - sliderLeftMargin - 15);\n\n  // Start/Pause button\n  startButton = createButton('Start');\n  startButton.position(10, drawHeight + 35);\n  startButton.mousePressed(toggleSimulation);\n\n  // Reset button\n  resetButton = createButton('Reset');\n  resetButton.position(70, drawHeight + 35);\n  resetButton.mousePressed(resetSimulation);\n}\n\n// Draw control labels and values\nfunction drawControlLabels() {\n  fill('black');\n  noStroke();\n  textSize(defaultTextSize);\n  textAlign(LEFT, CENTER);\n\n  // Label with current value of the slider\n  text('Speed: ' + speedSlider.value(), 10, drawHeight + 15);\n}\n</code></pre>"},{"location":"rules/microsim-rules/#interactive-simulation-controls","title":"Interactive Simulation Controls","text":"<p>All interactive simulations should include:</p> <ol> <li>Use a Start/Pause button to control animation</li> <li>Reset button to return to initial state</li> <li>Sliders should control parameters relevant to the simulation</li> <li>Use clear, descriptive labels for all controls</li> </ol> <pre><code>// Variables for simulation control\nlet isRunning = false;\n\n// change the label on the Start/Pause button based on the state\nfunction toggleSimulation() {\n  isRunning = !isRunning;\n  startButton.html(isRunning ? 'Pause' : 'Start');\n}\n\nfunction resetSimulation() {\n  // Reset simulation parameters to initial values\n  x = 100;\n  y = 100;\n  speed = 3;\n\n  // If simulation was running, keep it running after reset\n  redraw();\n}\n\nfunction draw() {\n  // Drawing setup...\n\n  if (isRunning) {\n    // Update simulation state\n    updateSimulation();\n  }\n\n  // Draw current simulation state\n  drawSimulation();\n\n  // Draw controls and labels\n  drawControlLabels();\n}\n</code></pre>"},{"location":"rules/microsim-rules/#rules-for-two-column-charts","title":"Rules for Two-Column Charts","text":"<p>When implementing two-column layouts with charts:</p> <ol> <li>Use push/translate/pop pattern for chart positioning</li> <li>Include clearly labeled X and Y axes with units</li> <li>Use consistent colors for data series</li> <li>Include chart legend if multiple data series are present</li> <li>Apply appropriate scaling for data visualization</li> </ol> <pre><code>function drawChart() {\n  // Setup chart area\n  push();\n    translate(simWidth + chartMargin, chartMargin);\n\n    // Draw axes\n    stroke('black');\n    strokeWeight(1);\n\n    // X-axis\n    line(0, drawHeight - 2*chartMargin, chartWidth - 2*chartMargin, drawHeight - 2*chartMargin);\n\n    // Y-axis\n    line(0, 0, 0, drawHeight - 2*chartMargin);\n\n    // X-axis label\n    textAlign(CENTER, TOP);\n    text(\"Time (s)\", (chartWidth - 2*chartMargin)/2, drawHeight - 2*chartMargin + 5);\n\n    // Y-axis label (rotated)\n    push();\n      translate(-chartMargin/2, (drawHeight - 2*chartMargin)/2);\n      rotate(-PI/2);\n      textAlign(CENTER, BOTTOM);\n      text(\"Value\", 0, 0);\n    pop();\n\n    // Plot data points\n    stroke('red');\n    strokeWeight(2);\n    noFill();\n    beginShape();\n    for (let i = 0; i &lt; dataPoints.length; i++) {\n      let x = map(i, 0, dataPoints.length - 1, 0, chartWidth - 2*chartMargin);\n      let y = map(dataPoints[i], 0, maxValue, drawHeight - 2*chartMargin, 0);\n      vertex(x, y);\n    }\n    endShape();\n  pop();\n}\n</code></pre>"},{"location":"rules/microsim-rules/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Limit DOM elements (sliders, buttons) to necessary controls only</li> <li>Use <code>noLoop()</code> for static simulations and <code>redraw()</code> when needed</li> <li>For simulations with frequent updates, check frame rate and optimize rendering</li> <li>Use appropriate data structures for simulation models</li> </ol>"},{"location":"rules/microsim-rules/#animation-timing","title":"Animation Timing","text":"<p>For timed animations or physics simulations:</p> <ol> <li>Use <code>deltaTime</code> to make animation speed consistent across different devices</li> <li>Apply a simulation time scale factor that can be adjusted via slider</li> <li>Use frame counting for periodic events</li> </ol> <pre><code>let timeScale = 1.0; // Can be adjusted by a slider\n\nfunction updateSimulation() {\n  // Time-based movement with timeScale\n  x += speed * (deltaTime / 1000 * 60) * timeScale;\n  y += speed * (deltaTime / 1000 * 60) * timeScale;\n\n  // Boundary checking\n  checkBoundaries();\n}\n</code></pre>"},{"location":"rules/microsim-rules/#code-organization","title":"Code Organization","text":"<p>Structure your code consistently:</p> <ol> <li>Global variables at the top</li> <li>Setup function for initialization</li> <li>Draw function for regular updates</li> <li>Clearly named helper functions for specific tasks</li> <li>Place all event handlers at the bottom of the program</li> <li>Group related functionality</li> </ol>"},{"location":"rules/microsim-rules/#responsive-text-sizing","title":"Responsive Text Sizing","text":"<p>Scale text based on container size for better readability but never go below a 10 point font.</p> <pre><code>function getResponsiveTextSize(baseSize) {\n  // Scale text size based on container width\n  return constrain(baseSize * (containerWidth / 800), baseSize * 0.8, baseSize * 1.5);\n}\n\nfunction drawText() {\n  const titleSize = getResponsiveTextSize(24);\n  const labelSize = getResponsiveTextSize(defaultTextSize);\n\n  // Title\n  textSize(titleSize);\n  text(\"Simulation Title\", canvasWidth/2, margin);\n\n  // Labels\n  textSize(labelSize);\n  text(\"Speed: \" + speed, 10, drawHeight + 15);\n}\n</code></pre>"},{"location":"rules/microsim-rules/#debug-helpers","title":"Debug Helpers","text":"<p>Add optional debug visualization to help during development:</p> <pre><code>// Debug flag - set to false for production\nconst DEBUG = true;\n\nfunction draw() {\n  // Regular drawing code...\n\n  if (DEBUG) {\n    drawDebugInfo();\n  }\n}\n\nfunction drawDebugInfo() {\n  fill(255, 0, 0, 100);\n  noStroke();\n  // Show responsive dimensions\n  text(`Canvas: ${canvasWidth}x${canvasHeight}`, 10, 20);\n  // Show frame rate\n  text(`FPS: ${floor(frameRate())}`, 10, 40);\n}\n</code></pre>"},{"location":"rules/microsim-rules/#documentation","title":"Documentation","text":"<p>Include clear comments for:</p> <ol> <li>Simulation purpose and algorithm description</li> <li>Physics models or equations used</li> <li>Parameter ranges and their effects</li> <li>Key variables and functions</li> <li>Data structures</li> </ol>"},{"location":"rules/microsim-rules/#accessibility","title":"Accessibility","text":"<p>Ensure simulations are accessible:</p> <ol> <li>Use sufficient color contrast</li> <li>Don't rely on color alone to convey information</li> <li>Include text labels for all controls</li> <li>Support keyboard navigation where possible</li> <li>Use ARIA (Accessible Rich Internet Applications) attributes for custom UI elements </li> </ol>"},{"location":"setup/","title":"MicroSims Quick Start","text":""},{"location":"setup/#getting-started","title":"Getting Started","text":"<p>Getting started is easy!</p> <ol> <li>Go to your favorite generative AI tool such as OpenAi's ChatGPT.  GPT-4 is the best version to use but it has a $20/month fee.</li> <li>Type in a chat that starts with \"Generate a p5.js file that does...\"</li> <li>Copy the generated code and paste it into the p5.js Editor.  You will need to replace the default code.</li> <li>Press the \"Play\" button (the red triangle)</li> <li>Save your MicroSim and share the link with your friends!</li> </ol> <p>That is it!  Most people can generate their first MicroSims in a few minutes.</p> <p>You can also use the custom GPT called the Knowledge Graph Builder which has been fine-tuned on the p5.js reference library.</p> <p>If you don't like what you saw, go back to your generative AI tool and create a more specific request. Then copy the result of this new result into the P5.js editor. Just keep repeating this process until your simulation does what it needs to do. You may have to repeat this a dozen times, but most users find that they are still 10x more productive than having to learn to write code!</p> <p>If you like what you see you can create an account on the P5.js editor and come back and show your class.</p> <p>That is it!  There are many other tools that we can explore to make this process even easier and tune the quality of the output to specific tasks.</p>"},{"location":"setup/#background-on-processing","title":"Background on Processing","text":"<p>One of the reasons that generative AI is so good at generating these simulations is that Processing has been around for about 23 years. It is widely used by artists, teachers and others to generate high-quality animations with interactive controls.  As a result, there is ample code online that generative AI tools are trained on.</p>"},{"location":"setup/#avoid-the-urge-to-fix-the-code","title":"Avoid the Urge to Fix the Code","text":"<p>Always go back to the ChatGPT and tell it what is not working and suggest a fix.</p>"},{"location":"setup/#start-with-a-simple-prompt","title":"Start with a Simple Prompt","text":"<p>Start with a simple prompt that describes the core function that you would like done.</p>"},{"location":"setup/#add-controls","title":"Add Controls","text":"<p>Start adding controls such as sliders and buttons.  A good simulation always allows the user to change parameters such as the animation speed and how to start, stop, step and reset the simulation.</p>"},{"location":"setup/#focus-on-usability","title":"Focus on Usability","text":""},{"location":"setup/#share-your-microsim","title":"Share Your MicroSim","text":"<p>The best way to share your simulation is to create a pull request with your working simulation.  Make sure you read the MicroSim structure document to get an idea of how to best structure your code.</p> <p>If you are not clear on how to do a pull request, you can always open an issue in GitHub and post your code there.</p> <p>If you need help, please contact Dan McCreary on LinkedIn.</p>"},{"location":"setup/01-processing/","title":"Background on the Processing Language","text":"<p>p5.js is a modern version of the Processing language.</p> <p>Processing is a flexible software system and a language for learning how to code within the context of animation. It was developed by Casey Reas and Ben Fry, who were then graduate students at the MIT Media Lab. The project began in 2001 and was officially launched in 2003.  Because of its widespread adoption by the open-source community, it is now supported by the Processing Foundation.</p> <p>The key ideas behind Processing include:</p> <ol> <li> <p>Accessibility for Beginners: Processing was designed to serve as the first programming language for artists and designers. It simplifies many aspects of programming and graphics, making it more accessible and less intimidating for beginners.</p> </li> <li> <p>Focus on Visual Output: The language is geared towards creating visual output, which is appealing to artists and designers. This visual focus makes programming more engaging and understandable for those who are more visually oriented.</p> </li> <li> <p>Educational Tool: Processing is widely used as a teaching tool in universities and schools. Its simplicity and immediate visual feedback make it an excellent resource for teaching the fundamentals of programming and digital art.  Immediate visual feedback is a key feature in helping students to learn to code.</p> </li> <li> <p>Open Source and Community Driven: Processing is open-source, meaning that it's free to use and modify. This has led to a large, active community of users who contribute to its development and share their work, further enriching the tool's capabilities and resources.</p> </li> <li> <p>Extensibility and Libraries Processing is not just a language but also an integrated development environment (IDE). It supports extensibility through libraries, allowing users to expand its capabilities. These libraries can be used for a wide range of applications, from computer vision to 3D graphics, contributing to its versatility in creating simulations.</p> </li> <li> <p>Ease of Creating Simulations: Processing simplifies the process of programming graphical simulations. Its straightforward syntax and rich set of drawing functions allow users to quickly prototype and visualize complex systems. This ease of use in creating interactive graphics and simulations is one of its most appealing aspects for artists, designers, and educators.</p> </li> </ol> <p>Overall, Processing stands out for its focus on the arts and design, its ease of use, and its strong community support, all of which contribute to its popularity for creating simulations and visual arts projects.</p>"},{"location":"setup/02-system-prompt/","title":"Setting up a System Prompt","text":"<p>With ChatGPT you can set up a single system prompt for generating p5.js MicroSims.  The text is automatically inserted before your prompt.</p>"},{"location":"setup/02-system-prompt/#system-prompte-for-a-2d-p5js","title":"System Prompte for a 2D p5.js","text":"<p>Here is a sample systems prompt for a 2D simulation.</p> <pre><code>1. Generate a single file [p5.js](../glossary.md#p5js) sketch for a 2D animation.\n2. Do not generate any [HTML](../glossary.md#html) files.\n3. Set the width and height of the canvas as global variables before the setup.\n4. Use a default text of 16 by placing the textSize(16) in the setup.\n5. Use a background fill of 245 (light gray) for the drawing area.\n6. Place the controls - sliders and buttons - on a white background - 255\n7. Always place a label and value before each slider using the text() function.\n8. DO NOT place a slider on the canvas without a label and value before it.\n9. Indent the slider to allow the label and value to be place to the left of the slider.\n10. Use the slider style function to make the slider span the width of the canvas less\nthe margin for the lable and value.\n11. Place all the sliders at the bottom of the canvas.\n12. Align the sliders vertically.\n13. Always return the result as a single [JavaScript](../glossary.md#javascript) file.\n\nUse the following template:\n\n\nlet width = 400;\nlet height = 300;\nfunction draw {\n    const canvas = createCanvas(width, height)\n}\n</code></pre>"},{"location":"setup/02-system-prompt/#system-prompte-for-a-3d-p5js","title":"System Prompte for a 3D p5.js","text":"<pre><code>1. Generate a single file [p5.js](../glossary.md#p5js) sketch for a 3D animation.\n2. Use the ```[WebGL](../glossary.md#webgl)``` as the third parameter of the createCanvas.\n\nfunction setup() {\n  createCanvas(710, 400, WEBGL);\n\n  describe(\n    'a 3d example.'\n  );\n}\n</code></pre>"},{"location":"setup/03-sound-test/","title":"Sound Test","text":"<p>Make sure you add the following line to your .html file:</p> <pre><code>    &lt;script src=\"../js/p5.sound.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>The line can be place right after the loading of the p5.js library in the html head section.</p> <pre><code>&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;String Harmonics&lt;/title&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"../js/p5.sound.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>We suggest having the default mode of a sim have the sound off.  Add a button to turn the sound on.</p>"},{"location":"setup/04-structure/","title":"Structure of a MicroSim Demonstration","text":"<p>To make it easier for developers to understand and reuse our MicroSims, we are proposing the following directory and file standards.</p>"},{"location":"setup/04-structure/#required-components","title":"Required Components","text":"<ol> <li>Directory with the name of the app</li> <li>index.md file within this directory.  The index.md file has a link to the HTML file.</li> <li>HTML file that displays the application.  It also loads the JavaScript file and provides a link back to the main index.md file.</li> <li>JavaScript file that holds the simulation code.</li> </ol>"},{"location":"setup/04-structure/#optional-components","title":"Optional Components","text":"<ol> <li>An image of the working simulation.  Ideally, this will serve as the Link Preview.</li> <li>A button to the working simulation.</li> <li>A sample set of one or more prompts that were used to generate the simulation.</li> <li>Sample of code that was generated.</li> <li>Suggested activities or lesson plans.</li> <li>Links to related simulations.</li> </ol>"},{"location":"setup/05-yaml-file/","title":"MicroSim YAML File","text":"<pre><code>MicroSim:\n  Name: \"Name of the MicroSim\"\n  Description: \"A brief description of what the MicroSim does\"\n  SubjectArea: \"The subject area of the MicroSim\"\n  Topic: \"Specific topic the MicroSim addresses\"\n  Parameters:\n    - Parameter1:\n        Label: \"Label for Parameter 1\"\n        Min: minimum_value\n        Max: maximum_value\n        Default: default_value\n        Increment: increment_value\n    - Parameter2:\n        Label: \"Label for Parameter 2\"\n        Min: minimum_value\n        Max: maximum_value\n        Default: default_value\n        Increment: increment_value\n    # Add more parameters as needed\n  GradeLevel: \"Appropriate grade level for the MicroSim\"\n  LessonPlans:\n    - LessonPlan1:\n        Title: \"Title of Lesson Plan 1\"\n        Description: \"Description of Lesson Plan 1\"\n        # Additional details about the lesson plan\n    - LessonPlan2:\n        Title: \"Title of Lesson Plan 2\"\n        Description: \"Description of Lesson Plan 2\"\n        # Additional details about the lesson plan\n    # Add more lesson plans as needed\n</code></pre>"},{"location":"setup/06-link-previews/","title":"Link Previews on Social Media","text":"<p>Many of our teachers use tools such as Zoom, Teams or Google to run their classes.  The instructors copy the link of each simulation and past it into a chat window. They have told us it is very helpful if a high-quality image appears above or as the link.  This is called a Link Preview.</p> <p>Each of the simulations can contain its own link preview image.</p>"},{"location":"setup/06-link-previews/#image-standards","title":"Image Standards","text":"<p>For creating high-quality preview images on  social media using the OpenGraph image standard,  the recommended resolution and aspect ratio are as follows:</p> <ol> <li>Recommended Resolution: The ideal resolution for Open Graph images is generally 1200 pixels by 627 pixels (1.91:1 aspect ratio)\u200b\u200b. However, some sources suggest a slightly different size of 1200\u00d7630 pixels, which also maintains the 1.91 aspect ratio\u200b\u200b.</li> <li>The minimum requirement is 200 by 200 pixels.</li> <li>Aspect Ratio: The common aspect ratio recommended is 1.91:1. This ratio is consistent across various guidelines, ensuring that the image displays effectively in social media link previews\u200b\u200b.</li> <li>Image Size Limit: The image size should not exceed 5MB to ensure optimal loading and compatibility across platforms\u200b\u200b. For Facebook, specifically, it is recommended that the Open Graph image should not be more than 8MB\u200b\u200b.</li> </ol> <p>These specifications are designed to ensure that your images display correctly and attractively across various social media platforms when shared as link previews.</p>"},{"location":"setup/06-link-previews/#references","title":"References","text":"<ul> <li>Social media preview with open graph meta tags</li> <li>The Open Graph Image</li> </ul>"},{"location":"setup/07-ux-tips/","title":"MicroSim User Experience Tips","text":"<p>We have been testing our MicroSims with teachers, students and mentors and they have given us some valuable tips to make it easier to integrate these simulations into their classrooms.</p> <p>We should note that it gets easier every month to have tools like ChatGPT generate working MicroSims.  The challenge is that the user interface controls are not always easy to use. This requires a bit of \"tweaking\" of the simulation code to get the right placement and alignment of the MicroSim.</p> <p>To help you with these tips we have provided a Template MicroSim that you can copy.</p>"},{"location":"setup/07-ux-tips/#use-consistent-structure","title":"Use Consistent Structure","text":"<p>We would like our MicroSims to all have a consistent structure:</p> <ol> <li>A directory that the MicroSim is contained</li> <li>A main index.md file that describes the MicroSim</li> <li>Links in the main index file to the demos and images</li> <li>Lesson plans in the main index.md file or links to lesson plans</li> </ol>"},{"location":"setup/07-ux-tips/#include-an-image-as-the-first-element","title":"Include an Image as the First Element","text":"<p>Including a static image (or a gif) is critical for people to quickly see if this is the MicroSim they have been expecting. These images can also be used to build link previews for posting on social media as well as for generating \"catalog cards\" that users can scroll through.</p> <p>Getting a good image is not always easy.  Some screen capture tools don't work well with a moving animation.</p> <p>Try to create an image that is large enough to be clear even on a wide computer screen.  There are also detailed guidelines for creating images that are used on link previews for social media.</p> <p>Posting your MicroSim with an image tends to get almost double the amount of clickthroughs and retweets!</p> <p>Here are the key points suggested by the Open Graph standard:</p> <ol> <li>Use an image that is a minimum of 600 x 314 pixels (width and height)</li> <li>Facebook recommends a size of 1200 x 630</li> <li>Keep the image sizes under 7MB</li> <li>The aspect ratio should be 1 to 1.91 (height to width)</li> <li>Test the page link preview using a tool such as the Open Graph Testing Tool</li> </ol> <p>Here is a sample of how you can include a centered image with a caption in your Markdown content.</p> <p>You can learn more about the Open Graph Protocol at the ogp.md website.</p> <p>Here is a template of code you can include in your mkdocs markdown index.md file:</p> <pre><code>&lt;figure markdown&gt;\n   ![Image Name](./image.png){ width=\"400\" }\n   &lt;figcaption&gt;Figure caption.&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> <p>Note this depends on your mkdocs.yml file having the right configuration.</p>"},{"location":"setup/07-ux-tips/#include-a-link-to-the-demo-as-the-second-element","title":"Include a Link to the Demo as the Second Element","text":"<p>Place your demo in either an HTML file or another file that places the MicroSim at the top upper left corner of the page. Don't require the user to scroll down on the demo page.</p>"},{"location":"setup/07-ux-tips/#place-simulation-controls-under-the-microsim","title":"Place Simulation Controls Under the MicroSim","text":"<p>This allows teachers at a smart board to use the MicroSims at the front of a classroom.  Teachers can change the slider values without blocking the screen.</p>"},{"location":"setup/07-ux-tips/#provide-a-back-to-lesson-plan-link-under-the-simulation","title":"Provide a \"Back To Lesson Plan\" Link under the Simulation","text":"<pre><code>&lt;a href=\"./\"&gt;Back to Lesson Plan&lt;/a&gt;\n</code></pre>"},{"location":"setup/07-ux-tips/#make-sliders-wide","title":"Make Sliders Wide","text":"<p>By default, many generated MicroSims make the slider the default width, which does not provide the fine resolution of setting a value.</p>"},{"location":"setup/07-ux-tips/#provide-sound-off-versions","title":"Provide Sound-Off Versions","text":"<p>If you include sound in your MicroSims (encouraged), please allow the sound to be off by default or have a version of the sim that runs without sound.</p> <p>If you have ever been in a classroom of 30 students all hearing the sound of bouncing balls you will understand why this is important.</p>"},{"location":"setup/07-ux-tips/#provide-a-link-to-the-p5js-editor","title":"Provide a Link to the p5.js Editor","text":"<p>Sometimes you want to make it easy for users to quickly change some aspect of your simulation that is not available in the controls.  One way to do this is to provide a link to a working simulation in the P5.js edito.</p> <p>This can be an extra maintenance step and I frequently make small changes to the simulation and then forget to update the editor code.</p>"},{"location":"setup/08-paste-as-markdown/","title":"Paste as Markdown","text":"<p>When you copy text from ChatGPT, it puts the formatted text in a paste buffer in a rich-text format.   But if you simply do a \"Paste\" function within your editor, it may lose all the formatting.  What we need is a \"Paste as Markdown\" function that preserves the Markdown formatting within the paste buffer.</p> <p>Note that the Copy function usually retains the structure of your selected Markdown text.  The problem is that the default Paste function tends to remove formatting information such as header levels, links, bold, italics, numbered lists etc.</p> <p>Depending on your desktop, there are several ways of adding the \"Paste as Markdown\" feature.</p>"},{"location":"setup/08-paste-as-markdown/#paste-as-markdown-chrome-extension","title":"Paste as Markdown Chrome Extension","text":"<p>One way is to add the Paste As Markdown Chrome Extension.  This will add an additional menu to your Chrome browser.</p>"},{"location":"setup/08-paste-as-markdown/#paste-as-markdown-visual-studio-extension","title":"Paste as Markdown Visual Studio Extension","text":"<p>Within Visual Studio, you can install and extension called Markdown Paste.  If you then do a Option/Command V you will retain all the formatting in your Markdown file!</p>"},{"location":"setup/p5-reference-manual/","title":"P5.js Reference Guide","text":""},{"location":"setup/p5-reference-manual/#canvas","title":"Canvas","text":"<p>The area where p5.js drawings are displayed. Created using <code>createCanvas()</code>. A good example is a canvas that is 400 wide and 300 high. We can use two global variables to declare these dimensions.</p> <pre><code>let width = 400\nlet height = 300\nfunction setup() {\n    const canvas = createCanvas(width, height);\n    // code to connect your canvas into the HTML\n    // canvas.parent('canvas-container');\n    // uncommet this line only within the HTML file\n}\n</code></pre>"},{"location":"setup/p5-reference-manual/#setup","title":"setup()","text":"<p>Called once at the start of the program to define initial environment properties.</p> <pre><code>let width = 400\nlet height = 300\nfunction setup() {\n    createCanvas(width, height);\n    background(245);\n}\n</code></pre>"},{"location":"setup/p5-reference-manual/#draw","title":"draw()","text":"<p>Continuously executes the lines of code inside its block until stopped.</p> <pre><code>function draw() {\n    // draw a circle in the center\n    circle(width/2, height/2, 50);\n}\n  ```\n\n#### createVector()\n\nCreates a new `p5.Vector` object with a x and y value.\n\n  ```javascript\n  let v = createVector(50, 50);\n  ```\n\n#### mouseX, mouseY\n- System variables storing the coordinates of the mouse.\n  ```javascript\n  function draw() {\n    circle(mouseX, mouseY, 50);\n  }\n  ```\n\n#### background()\nSets the color used for the canvas background.  Our default should be 245\nwhich is a light gray.\n\n  ```javascript\n  function setup() {\n    createCanvas(400, 400);\n    background(255); // White background\n  }\n  ```\n\n#### fill()\n\nSets the color used to fill shapes.\n\n```javascript\nfunction draw() {\n  fill(255, 0, 0); // Red color\n  ellipse(50, 50, 80, 80);\n}\n</code></pre>"},{"location":"setup/p5-reference-manual/#stroke","title":"stroke()","text":"<p>Sets the color used for lines and borders around shapes.   <pre><code>function draw() {\n  stroke(0); // Black color\n  line(0, 0, 100, 100);\n}\n</code></pre></p>"},{"location":"setup/p5-reference-manual/#rect","title":"rect()","text":"<ul> <li>Draws a rectangle.   <pre><code>function draw() {\n  rect(30, 20, 55, 55);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#ellipse","title":"ellipse()","text":"<ul> <li>Draws an ellipse (oval).   <pre><code>function draw() {\n  ellipse(50, 50, 80, 80);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#line","title":"line()","text":"<ul> <li>Draws a line.   <pre><code>function draw() {\n  line(30, 20, 85, 75);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#loadimage","title":"loadImage()","text":"<ul> <li>Loads an image from a path.   <pre><code>let img;\nfunction preload() {\n  img = loadImage('image.png');\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#image","title":"image()","text":"<ul> <li>Draws an image to the canvas.   <pre><code>function draw() {\n  image(img, 0, 0);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#creategraphics","title":"createGraphics()","text":"<ul> <li>Creates a new graphics object.   <pre><code>let pg;\nfunction setup() {\n  createCanvas(100, 100);\n  pg = createGraphics(50, 50);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#translate","title":"translate()","text":"<ul> <li>Remaps the (0,0) position on the canvas.   <pre><code>function draw() {\n  translate(width / 2, height / 2);\n  rect(0, 0, 30, 30);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#rotate","title":"rotate()","text":"<ul> <li>Rotates the entire canvas.   <pre><code>function draw() {\n  rotate(PI / 4);\n  rect(50, 50, 100, 50);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#push","title":"push()","text":"<p>Saves the current drawing style settings and transformations.   <pre><code>function draw() {\n  push();\n  stroke(0);\n  fill(102);\n  rect(0, 0, 50, 50);\n  pop();\n}\n</code></pre></p>"},{"location":"setup/p5-reference-manual/#pop","title":"pop()","text":"<p>Restores the drawing style settings and transformations previously saved.   <pre><code>// Used in conjunction with push() as shown above.\n</code></pre></p>"},{"location":"setup/p5-reference-manual/#framerate","title":"frameRate()","text":"<p>Specifies the number of frames to be displayed every second.   <pre><code>function setup() {\n  frameRate(30);\n}\n</code></pre></p>"},{"location":"setup/p5-reference-manual/#noloop","title":"noLoop()","text":"<p>Stops the draw loop.  This can be used when a drawing is finished.   <pre><code>function draw() {\n  ellipse(50, 50, 80, 80);\n  noLoop();\n}\n</code></pre></p>"},{"location":"setup/p5-reference-manual/#loop","title":"loop()","text":"<p>Restarts the draw loop after it has been stopped.</p> <pre><code>function mousePressed() {\n  loop();\n}\n</code></pre>"},{"location":"setup/p5-reference-manual/#keypressed","title":"keyPressed()","text":"<p>Called whenever a key is pressed.</p> <pre><code>function keyPressed() {\n  if (keyCode === LEFT_ARROW) {\n    // Left arrow key pressed\n  }\n}\n</code></pre>"},{"location":"setup/p5-reference-manual/#mousepressed","title":"mousePressed()","text":"<p>Called whenever a mouse button is pressed.   <pre><code>function mousePressed() {\n  ellipse(mouseX, mouseY, 80, 80);\n}\n</code></pre></p>"},{"location":"setup/template/","title":"Getting Started MicroSim Template","text":"<p>Run the Template MicroSim Edit tne MicroSim Template</p>"},{"location":"setup/template/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us ...</p>"},{"location":"setup/template/#use-an-iframe","title":"Use an iFrame","text":"<pre><code>&lt;iframe src=\"template.html\" height=\"400px\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"setup/template/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a p5.js sketch.\nDraw a blue circle in the center.\nHave a slider change the radius of the circle.\nUse the attached template.js file.\n</code></pre>"},{"location":"setup/template/#sample-templatejs-file","title":"Sample template.js file","text":"<pre><code>// MicroSim Template\n// canvas regions setup\n// let canvasWidth = 750;\nlet drawHeight = 335;\nlet controlHeight = 50;\nlet canvasHeight = drawHeight + controlHeight;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet margin = 50;\n\nfunction setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  var mainElement = document.querySelector('main');\n  canvas.parent(mainElement);\n  textSize(16);\n\n  // create a new slider at th bottom of the canvas\n  mySlider = createSlider(0, 300, 150, 1);\n  mySlider.position(120, drawHeight + 15);\n  mySlider.size(canvasWidth - 3*margin); \n}\n\nfunction draw() {\n  // background of drawing region\n  fill('aliceblue');\n  rect(0, 0, canvasWidth, drawHeight);\n\n  // background of controls\n  fill('whitegray');\n  rect(0, drawHeight, canvasWidth, controlHeight);\n\n  // get the updated slider value\n  radius = mySlider.value();\n\n  // custom drawing here\n  fill('blue');\n  circle(canvasWidth/2, canvasHeight/2, radius);\n\n  // add the slider label and value in control area\n  fill('black');\n  text(\"Radius:\"+radius, 15, drawHeight + 30)\n}\n</code></pre>"},{"location":"setup/template/#explanation-of-code","title":"Explanation Of Code","text":""},{"location":"setup/template/#drawing-regions","title":"Drawing Regions","text":""},{"location":"setup/template/#setup","title":"Setup","text":""},{"location":"setup/template/#draw","title":"Draw","text":""},{"location":"sims/","title":"Examples of MicroSims","text":"<p>This section of the MicroSims website contained examples of MicroSims that cover many different subjects in education including geometry, electronics, biology, physics, linear algebra, statistics, systems thinking, cellular automata, fractals and computer science.</p> <p>We encourage you to submit your own MicroSims and we have a set of guidelines to help </p> <p>Gallery</p>"},{"location":"sims/gallery/","title":"Gallery","text":"Arithmetic Logic Unit (ALU) Analog Clock Battery Drain Breath First Graph Search Binary Number Bouncing Ball Canon and Projectile Motion Circle Battery Circuit Collision Avoidance Robot Gold Star Logic Gates Named Colors Polygon Pulse-Width Modulation Sine Wave String Harmonics Supply and Demand"},{"location":"sims/555-timer/","title":"555 Timer","text":"555 Timer MicroSim <p>Run the 555 Timer MicroSim</p> <p>Edit the 555 Timer MicroSim</p> <p>The 555 timer IC is an integrated circuit used in a variety of timer, delay, pulse generation, and oscillator applications. It is one of the most popular timing ICs due to its flexibility and price.</p>"},{"location":"sims/555-timer/#prompt","title":"Prompt","text":"<pre><code>Create a single file p5.js simulation of a 555 timer in monostable mode.\nAdd sliders for resistance and capacitance.\nMake the canvas be 400x250.\nMake the text size be 16.\nDraw a waveform and an LED that flashes.\nPlace the sliders at the bottom of the canvas in the bottom 50 pixels.\nAdd labels and values to the left of the sliders.  \n</code></pre>"},{"location":"sims/555-timer/#response","title":"Response","text":"<pre><code>This code will create an interactive simulation where you can adjust the resistance and capacitance values using sliders and see the effect on the LED flash rate and the waveform displayed. The LED and waveform visually represent the timer's operation in monostable mode.\n</code></pre> <pre><code>let resistanceSlider, capacitanceSlider;\nlet ledState = false;\nlet lastTriggerTime = 0;\nlet waveform = [];\nconst canvasWidth = 400, canvasHeight = 450;\n\nfunction setup() {\n  createCanvas(canvasWidth, canvasHeight);\n  textSize(12);\n\n  // Sliders\n  resistanceSlider = createSlider(1, 100, 50);\n  resistanceSlider.position(20, canvasHeight - 30);\n  capacitanceSlider = createSlider(1, 100, 50);\n  capacitanceSlider.position(220, canvasHeight - 30);\n}\n\nfunction draw() {\n  background(255);\n\n  // Draw the waveform\n  drawWaveform();\n\n  // Update and draw LED\n  updateLED();\n  drawLED();\n\n  // Draw slider labels and values\n  drawLabelsAndValues();\n}\n\nfunction drawWaveform() {\n  stroke(0);\n  noFill();\n  beginShape();\n  for (let i = 0; i &lt; waveform.length; i++) {\n    let x = map(i, 0, waveform.length, 0, width);\n    let y = map(waveform[i], 0, 1, 150, 100);\n    vertex(x, y);\n  }\n  endShape();\n\n  if (frameCount % 2 === 0) {\n    waveform.push(ledState ? 1 : 0);\n    if (waveform.length &gt; width) {\n      waveform.splice(0, 1);\n    }\n  }\n}\n\nfunction updateLED() {\n  let currentTime = millis();\n  let thresholdTime = lastTriggerTime + (resistanceSlider.value() * capacitanceSlider.value());\n  if (currentTime &gt; thresholdTime) {\n    ledState = !ledState;\n    lastTriggerTime = currentTime;\n  }\n}\n\nfunction drawLED() {\n  fill(ledState ? color(255, 0, 0) : color(128));\n  ellipse(200, 50, 30, 30);\n}\n\nfunction drawLabelsAndValues() {\n  fill(0);\n  text(\"Resistance: \" + resistanceSlider.value() + \" \u03a9\", 20, canvasHeight - 40);\n  text(\"Capacitance: \" + capacitanceSlider.value() + \" \u00b5F\", 220, canvasHeight - 40);\n}\n\n// Add this function to handle window resizing\nfunction windowResized() {\n  resizeCanvas(canvasWidth, canvasHeight);\n}\n</code></pre>"},{"location":"sims/555-timer/#references","title":"References","text":"<ul> <li>555 timer IC on Wikipedia</li> <li>Digikey 555-timer Calculator</li> <li>555 Circuit Simulator on Falstad - this allows you to change the resistor and capacitor in a simulator and it will show you the frequency of a signal.</li> </ul>"},{"location":"sims/ac-circuit/","title":"AC Circuit MicroSim","text":"<p>Run AC Circuit MicroSim Edit The AC Circuit MicroSim</p>"},{"location":"sims/ac-circuit/#sample-iframe","title":"Sample IFrame","text":"<pre><code>&lt;iframe src=\"main.html\" height=\"320\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/alu/","title":"Arithmetic Logic Unit (ALU)","text":"Arithmetic Logic Unit <p>Demo</p> <p>Note</p> <p>This microsim is a work-in-progress.  The ALU works in some cases but has bugs   and the layout is not optimized.</p> <p>Prompt:</p> <pre><code>Create a single file ps.js sketch on a 400x400 canvas.\nThe sketch is a simulation of an Arithmetic Logic Unit (ALU).\nPlace a title \"Arithmetic Logic Unit\" on the top center of the canvas of text size 16.\nThe inputs are two registers: A and B.\nPlace the labels for the registers to the left of text inputs.\nPlace the input registers so the align vertically.\nPlace buttons for the operations below the registers.\nThe operation are: ADD, SUBTRACT, AND, OR, XOR.\nDisplay the value of the output below the operations.\nLabel the output value \"Output\" in blue text.\nCreate an input toggle button to display all values in either binary or decimal.\nMake the default value be decimal.\n</code></pre> <pre><code>let inputA;\nlet inputB;\nlet outputP;\nlet binDecToggle;\nlet isBinary = false;\n\nfunction setup() {\n  createCanvas(400, 400);\n  background(220);\n  textAlign(CENTER, CENTER);\n\n  // Title\n  textSize(16);\n  text(\"Arithmetic Logic Unit\", width/2, 20);\n\n  // Register A\n  text(\"Register A:\", 60, 60);\n  inputA = createInput('201');\n  inputA.position(110, 50);\n\n  // Register B\n  text(\"Register B:\", 60, 100);\n  inputB = createInput('100');\n  inputB.position(110, 90);\n\n  // Operations\n  let addBtn = createButton('ADD');\n  addBtn.position(20, 140);\n  addBtn.mousePressed(() =&gt; performOperation(\"ADD\"));\n\n  let subBtn = createButton('SUBTRACT');\n  subBtn.position(70, 140);\n  subBtn.mousePressed(() =&gt; performOperation(\"SUBTRACT\"));\n\n  let andBtn = createButton('AND');\n  andBtn.position(165, 140);\n  andBtn.mousePressed(() =&gt; performOperation(\"AND\"));\n\n  let orBtn = createButton('OR');\n  orBtn.position(220, 140);\n  orBtn.mousePressed(() =&gt; performOperation(\"OR\"));\n\n  let xorBtn = createButton('XOR');\n  xorBtn.position(265, 140);\n  xorBtn.mousePressed(() =&gt; performOperation(\"XOR\"));\n\n  // Output label\n  fill('blue');\n  text(\"Output:\", 60, 200);\n\n  // Output display\n  outputP = createP(\"0\");\n  outputP.position(110, 175);\n\n  // Binary/Decimal toggle button\n  binDecToggle = createButton('Toggle Binary/Decimal');\n  binDecToggle.position(100, 220);\n  binDecToggle.mousePressed(toggleBinDec);\n}\n\nfunction draw() {\n  // nothing\n}\n\nfunction performOperation(operation) {\n  let a = int(inputA.value());\n  let b = int(inputB.value());\n\n  let result;\n\n  switch (operation) {\n    case \"ADD\":\n      result = a + b;\n      break;\n    case \"SUBTRACT\":\n      result = a - b;\n      break;\n    case \"AND\":\n      result = a &amp; b;\n      break;\n    case \"OR\":\n      result = a | b;\n      break;\n    case \"XOR\":\n      result = a ^ b;\n      break;\n  }\n\n// Convert decimal number to binary\nfunction dec_bin(decNum) {\n  if (decNum === 0) return \"0\";\n\n  let binary = \"\";\n  while (decNum &gt; 0) {\n    binary = (decNum % 2) + binary;\n    decNum = Math.floor(decNum / 2);\n  }\n  return binary;\n}\n\n  if (isBinary) {\n    outputP.html(dec_bin(result));\n  } else {\n    outputP.html(result.toString());\n  }\n}\n\nfunction toggleBinDec() {\n  isBinary = !isBinary;\n\n  performOperation(\"ADD\"); // Refresh the value on toggle\n}\n</code></pre>"},{"location":"sims/alu/#challenges","title":"Challenges","text":"<p>Real ALUs also keep track of several bits if information about the result of the arithmetic such as if there were overflows.</p> <p>Challenges</p> <ol> <li>Add a bit to indicate the result is non-zero.</li> <li>Add a sign flag to indicate the number is non-negative</li> <li>Add a carry flag to indicate that the result fits in 16 bits</li> <li>Add an overflow flag to indicate that the sum of two numbers is also positive</li> </ol>"},{"location":"sims/alu/#references","title":"References","text":"<p>I love this small simulator from CircuitVerse:</p> <p>Four Bit ALU on CircuitVerse - This shows the process of using an OpCode which is a number for an operation. The carry bit does not work in this example.</p> <p>A much better example is here:</p> <p>University of New Brunswick EE3221 Course</p> <p>That version is a binary only but it includes the following flags:</p> <p>Flags The Zero flag (Z) is 0 because the result is non-zero</p> <p>The Sign flag (N) is 0 because the result appears non-negative (the MSB is 0)</p> <p>The Carry flag (C) is 0 (good) because the addition result did not exceed 16-bits. This would be of interest if (RA,RB) represent unsigned integers (0..65535).</p> <p>The Overflow flag (V) is 0 (good) because adding two positive numbers gave a positive result. This would be of interest if (RA,RB) represent signed integers (-32768..+32767).</p>"},{"location":"sims/analog-circuit/","title":"Analog Circuits","text":"<p>In these MicroSims we will build simulations of analog circuits.  Instead of DC voltages, these circuits often have AC inputs and include components such as capacitors, inductors and resistors.</p> <p>Link to Demo</p>"},{"location":"sims/analog-circuit/#about-this-microsim","title":"About this MicroSim","text":""},{"location":"sims/analog-circuit/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/analog-circuit/#sample-response","title":"Sample Response","text":"<pre><code>let canvasHeight = 400;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\nfunction setup() {\nconst canvas = createCanvas(canvasWidth, canvasHeight);\n  canvas.parent('canvas-container');\n  fill(245);\n  rect(0,0, canvasWidth, canvasHeight);\n  fill('green');\n  circle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/analog-circuit/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/analog-circuit/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/analog-circuit/#activities","title":"Activities","text":""},{"location":"sims/analog-circuit/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/analog-circuit/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/analog-circuit/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/analog-circuit/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/analog-circuit/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"},{"location":"sims/analog-clock/","title":"Analog Clock","text":"Analog Clock <p>Run Analog Clock MicroSim</p>"},{"location":"sims/analog-clock/#prompt","title":"Prompt","text":"<pre><code>Create a single p5.js sketch file that uses a 400x400 canvas.\nThe file is a simulation of an analog clock face.\nThe clock face has a black background.\nThe clock has white hands for the minute and hour hand.\nThe clock as a red second hand.\nThere are two modes: manual and automtic\nManual mode allows the use to manually set the time using three sliders for hours, minute and seconds.\nAutomatic mode use the local time to update the display.\nAdd labels and values for the sliders.\nMake sure to reenable the controls as we switch back to manual mode.\n</code></pre>"},{"location":"sims/analog-clock/#code","title":"Code","text":"<p>This is a wonderful lab to demonstrate some use of the trigonomic functions sine() and cosine().  We ask the question:</p> <p>Write some Python code that will take in the seconds as a number from 0 to 59 and it will return the x and y positions of the tip of the second hand.</p> <pre><code>// Draw second hand\n// convert seconds to radians\nsecondHand = map(sc, 0, 60, 0, TWO_PI) - HALF_PI;\n// draw a line from the center of the canvas to the endpoint\nline(0, 0, cos(secondHand) * canvasSize / 2.5, \n           sin(secondHand) * canvasSize / 2.5);\n</code></pre>"},{"location":"sims/analog-clock/#full-program-source","title":"FUll Program Source","text":"<pre><code>let canvasSize = 400;\nlet hourHand, minuteHand, secondHand;\nlet hourSlider, minuteSlider, secondSlider;\nlet manualMode = true;\n\nfunction setup() {\n  const canvas = createCanvas(400, 400);\n  // use this line in the web\n  canvas.parent('canvas-container');\n  // use this in editor\n  // createCanvas(canvasSize, canvasSize);\n  background(0);\n\n  // Create sliders for manual mode\n  hourSlider = createSlider(0, 11, 0);\n  hourSlider.position(10, canvasSize + 10);\n\n  minuteSlider = createSlider(0, 59, 0);\n  minuteSlider.position(10, canvasSize + 40);\n\n  secondSlider = createSlider(0, 59, 0);\n  secondSlider.position(10, canvasSize + 70);\n\n  let modeButton = createButton('Switch Mode');\n  modeButton.position(10, canvasSize + 100);\n  modeButton.mousePressed(switchMode);\n}\n\nfunction draw() {\n  background(0);\n  translate(canvasSize / 2, canvasSize / 2);\n\n  let hr, mn, sc;\n  if (manualMode) {\n    hr = hourSlider.value();\n    mn = minuteSlider.value();\n    sc = secondSlider.value();\n  } else {\n    let now = new Date();\n    hr = now.getHours() % 12;\n    mn = now.getMinutes();\n    sc = now.getSeconds();\n  }\n\n  // Draw hour hand\n  stroke(255);\n  strokeWeight(10);\n  hourHand = map(hr, 0, 12, 0, TWO_PI) - HALF_PI;\n  line(0, 0, cos(hourHand) * canvasSize / 4, sin(hourHand) * canvasSize / 4);\n\n  // Draw minute hand\n  strokeWeight(8);\n  minuteHand = map(mn, 0, 60, 0, TWO_PI) - HALF_PI;\n  line(0, 0, cos(minuteHand) * canvasSize / 3, sin(minuteHand) * canvasSize / 3);\n\n  // Draw second hand\n  stroke(255, 0, 0);\n  strokeWeight(4);\n  secondHand = map(sc, 0, 60, 0, TWO_PI) - HALF_PI;\n  line(0, 0, cos(secondHand) * canvasSize / 2.5, sin(secondHand) * canvasSize / 2.5);\n}\n\nfunction switchMode() {\n  manualMode = !manualMode;\n\n  // disable the controls\n  if manualMode {\n    hourSlider.attribute('disabled', !manualMode);\n    minuteSlider.attribute('disabled', !manualMode);\n    secondSlider.attribute('disabled', !manualMode);\n  } else {\n    hourSlider.attribute('enabled', !manualMode);\n    minuteSlider.attribute('enabled', !manualMode);\n    secondSlider.attribute('enabled', !manualMode);\n  }\n\n}\n</code></pre>"},{"location":"sims/animated-wire/","title":"Animated Wire MicroSim","text":"<p>Run the Animated Wire MicroSim</p>"},{"location":"sims/animated-wire/#sample-animate-wire-function","title":"Sample Animate Wire Function","text":"<pre><code>// Function for drawing an animated wire\nfunction drawAnimatedWire(x1, y1, x2, y2, speed1, state) {\n    if (state) {\n        let distance = dist(x1, y1, x2, y2);\n        let circlePos = map((millis() * speed1) % distance, 0, distance, 0, 1);\n\n        let x = lerp(x1, x2, circlePos);\n        let y = lerp(y1, y2, circlePos);\n\n        stroke(0);\n        strokeWeight(lineWidth)\n        line(x1, y1, x2, y2);\n\n        fill(255, 0, 0);\n        noStroke();\n        circle(x, y, 10);\n    } else {\n        stroke(0);\n        strokeWeight(lineWidth)\n        line(x1, y1, x2, y2);\n    }\n}\n</code></pre>"},{"location":"sims/background-grid/","title":"Background Grid Controls","text":"<p>Run the Background Grid Control Demo</p>"},{"location":"sims/background-grid/#key-points","title":"Key Points","text":"<ol> <li>The simulations have two regions</li> <li>The plot region holds the animation</li> <li>The controls region holds the interactive controls</li> </ol>"},{"location":"sims/background-grid/#sample-code","title":"Sample Code","text":"<pre><code>// Standard sizes for Smartboard with controls at the bottom\nlet canvasWidth = 600;\nlet canvasHeight = 600;\n\nlet plotWidth = canvasWidth;\nlet plotHeight = 500;\nlet plotMargin = 50;\n\nlet controlWidth = canvasWidth;\nlet controlHeight = 100;\n\nlet thicknessSlider, spacingSlider;\nlet gridThickness = 1;\nlet gridSpacing = 50;\n\nfunction setup() {\n  createCanvas(canvasWidth, canvasHeight);  // Set the canvas size\n\n  // Create thickness slider (range from 1 to 10)\n  thicknessSlider = createSlider(.1, 1.25, .25, .05);\n  thicknessSlider.position(190, plotHeight + 20);\n  thicknessSlider.size(canvasWidth / 2);\n\n  // Create spacing slider (range from 5 to 100, step of 5)\n  spacingSlider = createSlider(5, 100, 25, 5);\n  spacingSlider.position(190, plotHeight + 50);\n  spacingSlider.size(canvasWidth / 2);\n\n  // Call the function to draw the grid initially\n  drawGrid();\n}\n\nfunction draw() {\n  noStroke();\n  fill(\"DodgerBlue\");  // DodgerBlue background\n  rect(0,0,canvasWidth, plotHeight)\n  drawGrid(25);  // Call the drawGrid function with a grid spacing of 25\n\n  // Draw the Controls Area\n  fill('cornsilk')\n  stroke(1);\n  strokeWeight(1);\n  rect(0,plotHeight,canvasWidth,controlHeight)\n\n  // Get values from sliders\n  gridThickness = thicknessSlider.value();\n  gridSpacing = spacingSlider.value();\n\n  // Draw grid using the current slider values\n  drawGrid();\n\n  // Display slider labels and values\n  fill('black');\n  noStroke();\n  textSize(16);\n  textAlign(LEFT, CENTER);\n  text(\"Grid Thickness: \" + gridThickness, 10, plotHeight + 30);\n  text(\"Grid Spacing: \" + gridSpacing, 10, plotHeight + 60);\n}\n\nfunction drawGrid() {\n  for (let x = 0; x &lt; plotWidth; x += gridSpacing) {\n    if (x % 100 === 0) {\n      strokeWeight(gridThickness * 4);  // Adjust thickness for every 100th line\n    } else if (x % 50 === 0) {\n      strokeWeight(gridThickness * 2);  // Adjust thickness for every 50th line\n    } else {\n      strokeWeight(gridThickness);  // Standard line thickness\n    }\n    stroke(255);  // Set the grid color to white\n    line(x, 0, x, plotHeight);  // Draw vertical grid lines within the plot area\n  }\n\n  for (let y = 0; y &lt; plotHeight; y += gridSpacing) {\n    if (y % 100 === 0) {\n      strokeWeight(gridThickness * 4);  // Adjust thickness for every 100th line\n    } else if (y % 50 === 0) {\n      strokeWeight(gridThickness * 2);  // Adjust thickness for every 50th line\n    } else {\n      strokeWeight(gridThickness);  // Standard line thickness\n    }\n    stroke(255);  // Set the grid color to white\n    line(0, y, plotWidth, y);  // Draw horizontal grid lines within the plot area\n  }\n}\n</code></pre>"},{"location":"sims/ball-in-rotating-hexagon/","title":"Bouncing Ball in a Rotating Hexagon","text":"<p>Run the Ball in Hexagon MicroSim Edit the MicroSim with the p5.js editor</p> <p>Just copy this iframe into your webpage to use the MicroSim in your classroom:</p> <pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/ball-in-rotating-hexagon/main-v2.html\" height=\"450px\" width=\"400px\"&gt;&lt;/iframe&gt;\n</code></pre> <p>Edit this MicroSim using the p5.js editor</p>"},{"location":"sims/ball-in-rotating-hexagon/#version-1","title":"Version 1","text":"<p>Here is the first version we created using the new OpenAI o1-mini model without the slider for speed control and not responsive.</p> <p>Prompt</p> <p>Create a p5.js sketch that shows a ball bouncing inside a spinning hexagon. The ball should be affected by gravity and friction, and it must bounce off the rotating walls realistically.</p> <p>Run the First Ball in Hexagon MicroSim</p> <p>Special thanks to Linas Beli\u016bnas for the suggestion.</p>"},{"location":"sims/bathtub/","title":"Bathtub MicroSim","text":"Figure caption. <p>Link to Bathtub MicroSim</p>"},{"location":"sims/bathtub/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim demonstrates the flow of water in and out of a bathtub.</p> <p>The user can change the rate of flow in and the flow out.</p> <p>A chart also displays the bathtub hight history.</p>"},{"location":"sims/battery-drain/","title":"Battery Drain","text":"Battery Drain <p>Run the Battery Drain Demo</p> <p>Edit the Simulation</p>"},{"location":"sims/battery-drain/#about-the-battery-drain-microsim","title":"About The Battery Drain MicroSim","text":"<p>This MicroSim teaches students how batteries work in robots.  The student can adjust the speed of the motor.  But the more power the motor draws, the faster the battery drains.  When the motor is off, there is no drain.  When the battery is fully drained the motor will no longer turn.</p>"},{"location":"sims/battery-drain/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Generate a p5.js file on a 400x400 canvas that demonstrates the\nrate that a battery is discharged when it is powering a motor.\nAdd a slider at the bottom of the canvas that allows the user\nto adjust the speed of the motor.  Place the battery on the\nleft side.  Make the negative sign be at the bottom and \nuse a black filled rect.  Make the battery top be positive\nand use a gold filled rect to draw it.  Draw wires from\nthe battery's positive and negative to a motor in the right side.\nThe motor should drive a circle that spins faster as the slider is changed.\nThe motor should only spin if we have power.\n</code></pre>"},{"location":"sims/battery-drain/#sample-code","title":"Sample Code","text":"<pre><code>// battery drain\n// Animate a motor that drains a battery faster the more power is used\nlet canvasWidth = 400;\nlet drawHeight = 400;\nlet canvasHeight = 430;\nlet motorSpeedSlider;\nlet motorSpeed;\nlet batteryLevel = 100;\nlet dischargeRate;\nlet sliderLeftMargin = 100;\n\nfunction setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  //\n  textSize(16);\n\n  motorSpeedSlider = createSlider(0, 100, 50);\n  motorSpeedSlider.position(sliderLeftMargin, drawHeight + 10);\n  motorSpeedSlider.style('width', canvasWidth - sliderLeftMargin - 20 + 'px')\n\n  frameRate(60);\n}\n\nfunction draw() {\n  fill(245);\n  rect(0,0,canvasWidth,drawHeight);\n  fill('white');\n  rect(0,drawHeight,canvasWidth,canvasHeight-drawHeight);\n\n  motorSpeed = motorSpeedSlider.value();\n  // Battery representation\n  drawBattery();\n\n  // Wires from battery to motor\n  stroke(0);\n  // top wire\n  line(50, 50, 350, 50);\n  // bottom wire\n  line(50, 350, 350, 350);\n  line(350, 50, 350, 350);\n\n  // Motor and spinning circle\n  drawMotor();\n\n  // Update battery discharge\n  updateBattery();\n  noStroke();\n  fill('black');\n  text(\"Speed:\"+motorSpeed, 10, drawHeight+25);\n}\n\nfunction drawBattery() {\n  // Battery body\n\n  percentGold = .4\n  // Positive terminal\n  fill('gold'); // Gold color\n  rect(20, 50, 50, 300*percentGold);\n\n  // Negative terminal\n  fill('black');\n  rect(20, 350*percentGold, 50, 350*(1-percentGold));\n\n  // Battery level\n  let levelHeight = map(batteryLevel, 0, 100, 0, 300);\n  fill(0, 255, 0);\n  rect(30, 350 - levelHeight, 30, levelHeight);\n}\n\n// draw a spinning motor if we have power\nfunction drawMotor() {\n  fill(150);\n  ellipse(350, 200, 100, 100); // Motor body\n\n  // draw the spinner if we have power\n  if (batteryLevel &gt; 1) {\n   push();\n      translate(350, 200);\n      rotate(frameCount / 50 * motorSpeed);\n      fill(0, 0, 255);\n      ellipse(0, 40, 20, 20); // Spinning circle\n   pop();\n  }\n}\n\n// the battery level goes down with time\nfunction updateBattery() {\n  dischargeRate = motorSpeedSlider.value() / 1000;\n  batteryLevel -= dischargeRate;\n  batteryLevel = max(batteryLevel, 0);\n}\n</code></pre> <p>Challenges</p> <ol> <li>Add a label that shows the percent of charge remaining</li> <li>Add a label that predicts how long the battery will last at the current discharge rate</li> <li>Add another button called \"Recharge\" that will slowly recharge the battery</li> <li>Add animation to the wires of red dots moving along the wires.  Make the dots go faster at a higher power.</li> <li>Make the battery explode if you charge it too quickly</li> </ol>"},{"location":"sims/battery-drain/#lesson-plans","title":"Lesson Plans","text":""},{"location":"sims/battery-drain/#5th-grade-robotics-class-lesson-plan","title":"5th Grade Robotics Class Lesson Plan","text":""},{"location":"sims/battery-drain/#objective","title":"Objective","text":"<ul> <li>Understand the concept of battery discharge and its application in powering motors, particularly in robotics.</li> <li>Develop an understanding of how adjusting variables (like motor speed) can impact power consumption.</li> <li>Ask questions about what we do with batteries when they are discharged?</li> </ul>"},{"location":"sims/battery-drain/#duration","title":"Duration","text":"<ul> <li>1 hour</li> </ul>"},{"location":"sims/battery-drain/#materials","title":"Materials","text":"<ul> <li>Computers with internet access to use the p5.js Web Editor.</li> <li>Projector to demonstrate the p5.js simulation.</li> <li>Printed screenshots of the p5.js canvas setup (for reference).</li> </ul>"},{"location":"sims/battery-drain/#introduction-10-minutes","title":"Introduction (10 minutes)","text":"<ul> <li>Interactive Questioning: Begin by asking students about their experiences with batteries. \"What devices at home use batteries?\" \"Have you noticed how the performance changes as the battery drains?\"</li> <li>Relevance to Robotics: Discuss why robots need batteries, linking to their own experiences with battery-powered devices.</li> </ul>"},{"location":"sims/battery-drain/#demonstration-of-the-simulation-10-minutes","title":"Demonstration of the Simulation (10 minutes)","text":"<ul> <li>Show the p5.js Simulation: Project the simulation on the screen. Demonstrate how the motor's speed changes with the slider and how this affects battery discharge.</li> <li>Explain the Components: Point out the battery, the wires, the motor, and the spinning circle, explaining their roles.</li> </ul>"},{"location":"sims/battery-drain/#group-activity-experimenting-with-the-simulation-20-minutes","title":"Group Activity: Experimenting with the Simulation (20 minutes)","text":"<ul> <li>Hands-On Exploration: Students work in pairs on computers to experiment with the simulation.</li> <li>Guided Inquiry: Encourage students to observe what happens as they adjust the motor speed. Does the battery discharge faster at higher speeds?</li> </ul>"},{"location":"sims/battery-drain/#discussion-and-reflection-15-minutes","title":"Discussion and Reflection (15 minutes)","text":"<ul> <li>Group Discussion: Reconvene as a class and discuss observations. Key questions: \"How did changing the motor speed affect the battery life?\" \"Why is this important for designing robots?\"</li> <li>Connecting to Real Life: Relate the activity to real-world scenarios. \"How might this knowledge impact the way we design battery-powered devices or robots?\"</li> </ul>"},{"location":"sims/battery-drain/#conclusion-5-minutes","title":"Conclusion (5 minutes)","text":"<ul> <li>Summarize Key Learnings: Reinforce the importance of understanding battery usage in robotics and everyday devices.</li> <li>Reflect on the Activity: Ask students to share one new thing they learned and how they might apply this knowledge.</li> </ul>"},{"location":"sims/battery-drain/#assessment","title":"Assessment","text":"<ul> <li>Participation and engagement during the activity.</li> <li>Responses during the discussion, reflecting understanding of the concept.</li> </ul>"},{"location":"sims/battery-drain/#follow-up","title":"Follow-Up","text":"<ul> <li>In the next lesson, explore other factors affecting battery life in robots, like weight or the type of task performed.</li> <li>Assign a small project where students design a simple battery-powered device or robot, considering battery life.</li> </ul>"},{"location":"sims/battery-life/","title":"Battery Life Calculator","text":"<p>Batteries</p> <p>Coin Cell AA AAA 18650</p>"},{"location":"sims/battery-life/#devices","title":"Devices","text":"<ol> <li>dim red LED - 2 milliamps</li> <li>Very bright white LED - 20 milliamps</li> </ol>"},{"location":"sims/battery-life/#references","title":"References","text":"<p>https://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-battery-life</p>"},{"location":"sims/bee/","title":"MicroSim Template","text":"<p>Run the MicroSim Edit this MicroSim</p> <p>Run the Honeycomb MicroSim</p>"},{"location":"sims/bfs/","title":"Breath First Graph Search","text":"Breath First Search <p>Run Breath First Graph Search MicroSim Note you must click on the Next Button twice to get to level 1 search.</p>"},{"location":"sims/bfs/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Generate a simulation of breadth-first-search on a graph.  \nPlace a green vertex at the center of a network of 20 \nvertices that are placed on the canvas.  \nConnect each vertex to the 2 or 3 closest vertices \nusing edges. For each step in the search, \ncolor the next vertex red.  \nRepeat until all vertices have been visited.\n</code></pre> <p>Link to Transcript</p>"},{"location":"sims/bfs-vs-dfs/","title":"BFS vs DFS","text":"<p>Run the BFS vs DFS MicroSim</p> <p>Prompt</p> <p>Our goal is to create a visualization of two different graph traversal algorithm (DFS and BFS). The the canvas is drawn with the vis-network.js framework.</p> <p>Please generate a web application that shows two different types of graph traversal. There are control button on the bottom for \"Next Step\" and \"Reset\". The web page has a radio selection for \"Depth First Search\" and \"Breath First Search\".  Only one option can be selected.  Changing the algorithm also resets the application.</p> <p>The graph places a green \"Starting Point\" node in the center of the canvas. The graph then randomly places various light blue nodes in concentric circles around the Starting Point.  Light blue is for a node that has not been traversed yet. The first ring is 100 away from the center starting point node. The second ring is 200 away from the starting point node. Each of the blue nodes is connected to at least two other nodes in the graph. When the \"Next Step\" button is pressed, the next step of the algorithm is executed. When a node is touched, it turns from light blue to yellow and a step digit is placed in the center of the node.</p> <p>I've created a comprehensive web application that visualizes both Depth-First Search (DFS) and Breadth-First Search (BFS) graph traversal algorithms. Here's what the application includes:</p> <p>Key Features</p> <p>Visual Graph Structure:</p> <ul> <li>Green starting point node in the center</li> <li>Light blue unvisited nodes arranged in concentric circles (3 rings at distances 150, 250, and 350 pixels)</li> <li>Nodes are connected to create an interesting traversal pattern</li> <li>Each ring has varying numbers of nodes (6, 8, and 10 respectively)</li> </ul> <p>Algorithm Controls:</p> <ul> <li>Radio buttons to select between \"Depth-First Search\" and \"Breadth-First Search\"</li> <li>\"Next Step\" button to advance the traversal one step at a time</li> <li>\"Reset\" button to restart the visualization</li> <li>Changing algorithms automatically resets the graph</li> </ul> <p>Visual Feedback:</p> <ul> <li>Green nodes: Starting point</li> <li>Light blue nodes: Unvisited</li> <li>Yellow nodes: Visited (with step numbers displayed)</li> <li>Red nodes: Currently being processed (optional enhancement)</li> </ul> <p>Information Display:</p> <ul> <li>Current algorithm name</li> <li>Step counter</li> <li>Progress indicator (nodes visited / total nodes)</li> <li>Legend explaining the color coding</li> </ul>"},{"location":"sims/bfs-vs-dfs/#how-it-works","title":"How It Works","text":"<p>Depth-First Search (DFS):</p> <ul> <li>Uses a stack data structure</li> <li>Explores as far as possible along each branch before backtracking</li> <li>Shows the characteristic \"deep dive\" pattern</li> </ul> <p>Breadth-First Search (BFS):</p> <ul> <li>Uses a queue data structure</li> <li>Explores all neighbors at the current depth before moving to the next level</li> <li>Shows the characteristic \"level-by-level\" expansion pattern</li> </ul> <p>The visualization clearly demonstrates the fundamental difference between these two traversal algorithms - DFS goes deep first, while BFS spreads wide first. Each visited node displays its step number, making it easy to follow the traversal order.</p> <p>The graph structure includes connections within rings and between rings, plus some random connections to create interesting traversal patterns that highlight the algorithmic differences.</p>"},{"location":"sims/binary-number/","title":"Binary Number","text":"<p>A binary number is one where each of the digits can only be a 0 or a 1.  The values will double with each position.  So the left-most digit is 0 or 1,   the second bit is 0 or 2, the third is 0 or 4 and the fourth is 0 or 8. You can generate any number from 0 to 15 by adding the values.</p> <ul> <li>Binary Number 4-Bit Demo</li> <li>Binary Number 8-Bit Demo</li> </ul>"},{"location":"sims/binary-number/#prompt","title":"Prompt","text":"<pre><code>Create a simulation of a 4-bit binary number.\nAdd buttons that toggle each of the four bits. \nAdd a text output that shows the decimal equivalent of the binary number.\n</code></pre>"},{"location":"sims/binary-number/#sample-response","title":"Sample Response","text":"<pre><code>// Global canvas dimensions\nlet canvasWidth = 330;\nlet canvasHeight = 120;\n\n// Binary bits and decimal value\nlet bits = [0, 0, 0, 0];\nlet decimalValue = 0;\n\nfunction setup() {\n  createCanvas(canvasWidth, canvasHeight);\n  textSize(24);\n  background(245);\n\n  // Create toggle buttons for each bit with correct labeling\n  for (let i = 0; i &lt; 4; i++) {\n    let btn = createButton('Bit ' + i);\n    btn.position(20 + (3 - i) * 80, 50); // Placing buttons with Bit 3 on the left and Bit 0 on the right\n    btn.mousePressed(() =&gt; toggleBit(i));\n  }\n}\n\nfunction draw() {\n  // Clear the previous frame\n  clear();\n  background(245);\n\n  // Draw binary bits\n  for (let i = 0; i &lt; bits.length; i++) {\n    text(bits[i], 40 + (3 - i) * 80, 30); // Displaying bits with Bit 3 on the left and Bit 0 on the right\n  }\n\n  // Calculate and draw the decimal value\n  decimalValue = binaryToDecimal(bits);\n  text('Decimal: ' + decimalValue, 20, 110);\n}\n\n// Toggle bit value\nfunction toggleBit(index) {\n  bits[index] = bits[index] === 0 ? 1 : 0;\n}\n\n// Convert binary array to decimal\nfunction binaryToDecimal(binaryArray) {\n  let decimal = 0;\n  for (let i = 0; i &lt; binaryArray.length; i++) {\n    decimal += binaryArray[i] * Math.pow(2, i);\n  }\n  return decimal;\n}\n</code></pre>"},{"location":"sims/binary-number/#learnings-from-the-response","title":"Learnings from The Response","text":"<ol> <li>How to set up an array of buttons each with different actions</li> <li>How to use the pow(2, i) to convert a binary to decimal value</li> <li>How to setup a tobbleBit(index) function using the <code>?</code> and <code>:</code> syntax</li> </ol>"},{"location":"sims/binary-number/#lesson-plan","title":"Lesson Plan","text":"<p>Objective:</p> <p>Students will understand the binary number system and how it is used in computer science.  They will learn to convert binary numbers to decimal numbers and vice versa.</p> <p>Grade Level: 9th Grade</p> <p>Duration: 1-2 class periods (45-90 minutes)</p> <p>Materials:</p> <ol> <li>Computers with internet access (or offline environment set up with p5.js).</li> <li>Projector to demonstrate the simulation.</li> <li>Link to the simulation.</li> <li>Worksheets or online notebooks for binary-to-decimal conversion exercises.</li> <li>Whiteboard and markers.</li> </ol>"},{"location":"sims/binary-number/#lesson-outline","title":"Lesson Outline:","text":"<ol> <li> <p>Introduction to Binary Numbers (15 minutes):</p> </li> <li> <p>Begin with a discussion on number systems, focusing on the decimal system.</p> </li> <li>Introduce the binary number system, explaining its base-2 nature.</li> <li> <p>Discuss the significance of binary numbers in computer science.</p> </li> <li> <p>Demonstration of the Simulation (10 minutes):</p> </li> <li> <p>Project the simulation on the screen.</p> </li> <li>Explain the interface, pointing out the bits, their significance, and the decimal conversion.</li> <li> <p>Demonstrate toggling the bits and observing the decimal output.</p> </li> <li> <p>Interactive Session with Simulation (20 minutes):</p> </li> <li> <p>Allow students to experiment with the simulation on their computers.</p> </li> <li>Encourage them to predict the decimal output before toggling the bits.</li> <li> <p>Facilitate a discussion about their observations and insights.</p> </li> <li> <p>Binary to Decimal Conversion Exercise (15 minutes):</p> </li> <li> <p>Distribute worksheets with binary numbers.</p> </li> <li>Instruct students to convert them to decimal numbers using the simulation as a reference.</li> <li> <p>Review the answers as a class, discussing any common errors or misconceptions.</p> </li> <li> <p>Group Activity: Real-World Applications (15-30 minutes):</p> </li> <li> <p>Divide students into small groups.</p> </li> <li>Assign each group to research and present a short explanation about a real-world application of binary numbers (e.g., digital storage, computer processors).</li> <li> <p>Facilitate a class discussion on these applications, linking them back to the simulation.</p> </li> <li> <p>Wrap-up and Reflection (5-10 minutes):</p> </li> <li> <p>Summarize key takeaways from the lesson.</p> </li> <li>Encourage students to reflect on what they learned and how they might see binary numbers in their daily lives.</li> <li>Answer any remaining questions.</li> </ol>"},{"location":"sims/binary-number/#assessment","title":"Assessment","text":"<ul> <li>Evaluate students based on their participation in activities and discussions.</li> <li>Review their worksheets for accuracy in binary to decimal conversion.</li> <li>Assess group presentations for understanding of real-world applications.</li> </ul>"},{"location":"sims/binary-number/#extension-activities","title":"Extension Activities","text":"<ul> <li>Extend the simulation to be 8, 16, 32 and 64 bits</li> <li>Discuss what the shift-left and shift-right functions will do.  Hint: how would you double the number?</li> <li>Introduce the concept of hexadecimal numbers and how they relate to binary and decimal systems.</li> <li>Create a project where students develop their own simple binary-based simulations or games using p5.js.</li> <li>Discuss the process of adding binary numbers.</li> </ul>"},{"location":"sims/binary-number/#references","title":"References","text":"<ul> <li>ChatGPT Transcript - this demonstrates the iterative nature of prompting including giving up and fixing the code myself after multiple attempts.</li> </ul>"},{"location":"sims/book-gen-workflow/","title":"Book Build Workflow","text":"<p>Use these templates to create a MicroSim that can be added to any website with just a single <code>iframe</code> HTML element.</p> <pre><code>&lt;iframe src=\"./mains.html\" height=\"450px\" scrolling=\"no\"\n  style=\"overflow: hidden;\"&gt;&lt;/iframe&gt;\n</code></pre> <p></p> <p>Run the Circle Radius MicroSim</p> <p>Edit this MicroSim</p>"},{"location":"sims/bouncing-ball/","title":"Bouncing Ball","text":"<p>Run Bouncing Ball Demo</p> <p>The bouncing ball is the \"Hello World!\" of the Processing system. It contains the key element that shows the power of the Processing system: graphics with movement and user interaction.  When we design MicroSims, we also want clearly-visible user interface elements that can control the running of our simulations.  This version contains a  slider to control the speed of the ball's movement.</p>"},{"location":"sims/bouncing-ball/#prompt","title":"Prompt","text":"<p>Here is a simple prompt to get you started.</p> <pre><code>Generate a single p5.js sketch of a blue bouncing ball on a 400x400 canvas.\n</code></pre> <p>Copy the prompt into ChatGPT.  It will generate a JavaScript file you can copy and paste or download into the p5.js editor to test.</p> <p>Here is a more precise prompt that also allows us to change the speed using a slider.</p> <pre><code>Generate a single p5.js sketch of a blue bouncing ball on a 400x400 canvas.\nThe sketch shows a ball bouncing around a rectangular area.\nThe canvas should be 500 wide and 300 high.\nThe default text size is 16.\nThe ball is blue and has a radius of 50.\nThere is a slider that changes the speed from 0 to 20 with a default speed of 3.\nThe slider should be placed at the bottom of the canvas.\nThe slider should have a label \"Speed: \" and the speed value to the left of the slider.\nThe slider should span the width of the canvas after the label and value.\nDD NOT use objects - just functions.\n</code></pre> <p>Here is an additional example that allows the user to change both the speed and the ball size:</p> <ul> <li>Bouncing Ball with Speed and Radius Controls</li> </ul> <p>Edit Using P5.js Editor</p>"},{"location":"sims/bouncing-ball/#sample-source-code","title":"Sample Source Code","text":"<p>Here is some sample source code that has been generated and modified just a little for readability.</p> <pre><code>// bouncing ball - version 1\n// designed for use using touch sensitive whiteboard in a classroom\n\nlet width = 500;\nlet height = 350;\nlet drawHieght = 320; // region for drawing\nr = 20; // radius of the ball\n\n// initial position\nx = 100;\ny = 100;\nspeed = 3; // default speed\n// direction of motion\ndx = speed;\ndy = speed;\n// spacing before the slider\nsliderLeftMargin = 83;\n\nfunction setup() {\n  const canvas = createCanvas(width, height);\n  // Include this for placement in our HTML page but not in the p5.js editor\n  // canvas.parent('canvas-container');\n\n  // make the text a bit larger for large classrooms\n  textSize(16);\n\n  speedSlider = createSlider(0, 20, speed);\n  speedSlider.position(sliderLeftMargin, drawHieght + 15);\n  speedSlider.style('width', width - sliderLeftMargin - 15 + 'px');\n}\n\nfunction draw() {\n  rect(0,0, canvasWidth, drawHieght); // light gray\n\n  // get the new value from the slider\n  speed = speedSlider.value()\n\n  // set the new speed but don't change the direction (positive or negative)\n  if (dx &gt; 0) dx = speed;\n     else dx = -speed;\n\n  if (dy &gt; 0) dy = speed;\n     else dy = -speed;\n\n  // Add the current speed to the position.\n  x += dx;\n  y += dy;\n\n  // simple bounce check without considering the radius of the ball\n  if ((x &gt; width) || (x &lt; 0)) {\n    dx = dx * -1;\n  }\n  if ((y &gt; drHieght) || (y &lt; 0)) {\n    dy = dy * -1;\n  }\n\n  fill('blue');\n  circle(x, y, r*2);\n\n  // Add the label and value at the bottom\n  fill('black');\n  text('Speed: ' + speed, 10, height-10)\n}\n</code></pre>"},{"location":"sims/bouncing-ball/#key-points-about-the-code","title":"Key Points about the Code","text":"<ol> <li>We created some global variables before the setup() function</li> <li>We created a setup() function to initialize the canvas and the slider</li> <li>We created a draw() function to render check that moves the ball, checks the edges, and draws the circle and text.</li> </ol>"},{"location":"sims/bouncing-ball/#use-in-classroom","title":"Use In Classroom","text":"<ol> <li>Physics Lesson: Use this simulation to discuss concepts like velocity, acceleration, and kinetic energy. Ask students to predict how changing the speed will affect the ball's movement.</li> <li>Math Integration: Introduce concepts of geometry and algebra, such as calculating the ball's trajectory or the distance traveled over time.</li> <li>Coding Concepts: Use this as a base for teaching basic programming concepts, such as variables, functions, and object-oriented programming. Students can modify the code to change the ball's size, color, or even add more balls.</li> </ol>"},{"location":"sims/bouncing-ball/#lesson-plan-for-a-9th-grade-physical-science-class","title":"Lesson Plan for a 9th-Grade Physical Science Class","text":""},{"location":"sims/bouncing-ball/#objective","title":"Objective","text":"<p>Students will understand the concepts of kinetic and potential energy, and how these energies are transformed during the motion of a bouncing ball.</p>"},{"location":"sims/bouncing-ball/#materials","title":"Materials","text":"<ul> <li>Computer with internet access for the p5.js editor.</li> <li>The bouncing ball simulation (as provided in the previous response).</li> <li>Whiteboard or chalkboard.</li> <li>Writing materials for students.</li> </ul>"},{"location":"sims/bouncing-ball/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/bouncing-ball/#introduction-10-minutes","title":"Introduction (10 minutes)","text":"<ul> <li>Begin with a brief discussion on energy: what it is and its different forms, focusing on kinetic and potential energy.</li> <li>Introduce the concept of energy transformation, particularly how potential energy is converted to kinetic energy and vice versa.</li> </ul>"},{"location":"sims/bouncing-ball/#demonstration-15-minutes","title":"Demonstration (15 minutes)","text":"<ul> <li>Display the bouncing ball simulation to the class.</li> <li>Show how the ball\u2019s speed (kinetic energy) increases as it falls (due to potential energy converting to kinetic energy) and decreases as it rises (kinetic converting back to potential).</li> </ul>"},{"location":"sims/bouncing-ball/#interactive-activity-20-minutes","title":"Interactive Activity (20 minutes)","text":"<ul> <li>Have the students access the simulation on their computers.</li> <li>Ask them to experiment with different speeds and observe the ball\u2019s behavior.</li> <li>Prompt questions for exploration: </li> <li>How does changing the speed affect the ball\u2019s motion?</li> <li>Can they identify when the ball has the most kinetic or potential energy?</li> </ul>"},{"location":"sims/bouncing-ball/#group-discussion-15-minutes","title":"Group Discussion (15 minutes)","text":"<ul> <li>Bring the class back together to discuss their observations.</li> <li>Facilitate a conversation about how the simulation demonstrates the concepts of kinetic and potential energy.</li> <li>Discuss real-world examples, like a roller coaster or a skateboarder in a halfpipe.</li> </ul>"},{"location":"sims/bouncing-ball/#concept-application-20-minutes","title":"Concept Application (20 minutes)","text":"<ul> <li>Provide a worksheet with problems related to kinetic and potential energy.</li> <li>Include problems where students calculate the potential energy at the ball\u2019s highest point and the kinetic energy at different points of the motion.</li> <li>Students can use the simulation to visually understand the problems.</li> </ul>"},{"location":"sims/bouncing-ball/#wrap-up-and-reflection-10-minutes","title":"Wrap-Up and Reflection (10 minutes)","text":"<ul> <li>Summarize the key concepts learned in the lesson.</li> <li>Ask students to write a short paragraph on how the simulation helped them understand the energy transformation.</li> </ul>"},{"location":"sims/bouncing-ball/#homework","title":"Homework","text":"<ul> <li>Assign a project where students create their own simulation or modify the existing one to demonstrate a different physics concept.</li> </ul>"},{"location":"sims/bouncing-ball/#assessment","title":"Assessment","text":"<ul> <li>Participation in the interactive activity and group discussion.</li> <li>Accuracy and understanding is shown in the worksheet.</li> <li>Reflection paragraph and homework project.</li> </ul>"},{"location":"sims/bouncing-ball/#references","title":"References","text":""},{"location":"sims/bouncing-ball/METADATA-COMPARISON/","title":"Metadata Comparison: Bouncing Ball MicroSim","text":""},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#file-comparison","title":"File Comparison","text":"File Lines Purpose <code>metadata.json</code> 275 Full comprehensive metadata with all optional fields <code>metadata-minimal.json</code> 54 Minimal metadata with only required fields <p>Reduction: 80% smaller (221 lines removed)</p>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#required-fields-by-section","title":"Required Fields by Section","text":"<p>Based on <code>/src/microsim-schema/microsim-schema.json</code>, these are the REQUIRED fields:</p>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#1-microsimdublincore-9-required-fields","title":"1. <code>microsim.dublinCore</code> (9 required fields)","text":"<pre><code>{\n  \"title\": \"string\",\n  \"creator\": [\"array of strings\"],\n  \"subject\": [\"array of strings\"],\n  \"description\": \"string\",\n  \"date\": \"ISO 8601 datetime\",\n  \"type\": \"Interactive Simulation | Educational MicroSim\",\n  \"format\": \"text/javascript | application/javascript | text/html\",\n  \"language\": \"ISO 639-1 code (e.g., 'en')\",\n  \"rights\": \"string\"\n}\n</code></pre>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#2-microsimsearch-4-required-fields","title":"2. <code>microsim.search</code> (4 required fields)","text":"<pre><code>{\n  \"tags\": [\"array of strings\"],\n  \"visualizationType\": [\"animation\", \"chart\", \"graph\", etc.],\n  \"interactionLevel\": \"passive | low | moderate | high | very-high\",\n  \"complexity\": 1-10\n}\n</code></pre>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#3-microsimeducational-4-required-fields","title":"3. <code>microsim.educational</code> (4 required fields)","text":"<pre><code>{\n  \"gradeLevel\": [\"K\", \"1\", \"2\", ..., \"12\", \"Undergraduate\", \"Graduate\", \"Adult\"],\n  \"subjectArea\": [\"Mathematics\", \"Science\", \"Physics\", etc.],\n  \"topic\": [\"array of strings\"],\n  \"learningObjectives\": [\"array of strings\"]\n}\n</code></pre>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#4-microsimtechnical-2-required-fields","title":"4. <code>microsim.technical</code> (2 required fields)","text":"<pre><code>{\n  \"framework\": \"p5.js | vanilla-js | d3.js | three.js | other\",\n  \"canvasDimensions\": {\n    \"width\": integer,\n    \"height\": integer,\n    \"responsive\": boolean\n  }\n}\n</code></pre>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#5-microsimuserinterface-1-required-field","title":"5. <code>microsim.userInterface</code> (1 required field)","text":"<pre><code>{\n  \"controls\": [\n    {\n      \"id\": \"string\",\n      \"type\": \"slider | button | checkbox | etc.\",\n      \"label\": \"string\",\n      \"properties\": {\n        // Varies by control type\n        // For slider: min, max, default required\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#6-microsimsimulation-0-required-fields","title":"6. <code>microsim.simulation</code> (0 required fields)","text":"<pre><code>{\n  // Can be empty object: {}\n}\n</code></pre>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#top-level-required-sections","title":"Top-Level Required Sections","text":"<p>According to line 820 of the schema:</p> <pre><code>\"required\": [\"dublinCore\", \"search\", \"educational\", \"technical\", \"userInterface\", \"simulation\"]\n</code></pre> <p>All 6 sections must be present, even if some (like <code>simulation</code>) can be empty.</p>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#minimal-example-for-bouncing-ball","title":"Minimal Example for Bouncing Ball","text":"<p>The <code>metadata-minimal.json</code> file contains exactly the required fields:</p> <pre><code>{\n  \"microsim\": {\n    \"dublinCore\": { /* 9 required fields */ },\n    \"search\": { /* 4 required fields */ },\n    \"educational\": { /* 4 required fields */ },\n    \"technical\": { /* 2 required fields including nested canvasDimensions */ },\n    \"userInterface\": {\n      \"controls\": [ /* At least one control with required properties */ ]\n    },\n    \"simulation\": {} /* Empty but required */\n  }\n}\n</code></pre> <p>Total Required Fields: 21 fields minimum - dublinCore: 9 fields - search: 4 fields - educational: 4 fields - technical: 2 fields (framework + canvasDimensions with 3 sub-fields) - userInterface: 1 field (controls array, with each control having 4 required fields) - simulation: 0 fields (empty object acceptable)</p>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#optional-sections-not-included-in-minimal","title":"Optional Sections Not Included in Minimal","text":"<p>These sections are completely optional: - <code>analytics</code> - Learning analytics and xAPI integration - <code>usage</code> - Pedagogical recommendations and assessment questions</p>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#optional-fields-within-required-sections","title":"Optional Fields Within Required Sections","text":"<p>Many fields within required sections are optional, for example:</p>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#in-dublincore-optional","title":"In <code>dublinCore</code> (optional):","text":"<ul> <li>publisher</li> <li>contributor</li> <li>identifier</li> <li>source</li> <li>relation</li> <li>coverage</li> </ul>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#in-educational-optional","title":"In <code>educational</code> (optional):","text":"<ul> <li>bloomsTaxonomy</li> <li>prerequisites</li> <li>duration</li> <li>difficulty</li> <li>curriculumStandards</li> <li>cognitiveLoad</li> <li>scaffolding</li> <li>misconceptions</li> <li>transferSkills</li> <li>assessmentRubric</li> <li>learningTheory</li> </ul>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#in-technical-optional","title":"In <code>technical</code> (optional):","text":"<ul> <li>version</li> <li>regions</li> <li>dependencies</li> <li>browserCompatibility</li> <li>performance</li> <li>deviceRequirements</li> <li>dataFlow</li> <li>stateManagement</li> <li>accessibility</li> </ul>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#in-userinterface-optional","title":"In <code>userInterface</code> (optional):","text":"<ul> <li>layoutType</li> <li>layoutPattern</li> <li>colorScheme</li> <li>responsiveBreakpoints</li> <li>visualElements</li> </ul>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#in-simulation-all-optional","title":"In <code>simulation</code> (all optional):","text":"<ul> <li>model</li> <li>variables</li> <li>scenarios</li> </ul>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#validation","title":"Validation","text":"<p>To validate either file against the schema:</p> <pre><code>python src/validate-yaml-file.py docs/sims/bouncing-ball/metadata-minimal.json\n</code></pre> <p>Or using a JSON schema validator:</p> <pre><code>npm install -g ajv-cli\najv validate -s src/microsim-schema/microsim-schema.json -d docs/sims/bouncing-ball/metadata-minimal.json\n</code></pre>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#use-cases","title":"Use Cases","text":"<p>Full metadata (<code>metadata.json</code>): - Production deployments - LMS integration - Learning analytics - Comprehensive cataloging - Accessibility compliance documentation</p> <p>Minimal metadata (<code>metadata-minimal.json</code>): - Quick prototyping - Development/testing - Understanding schema requirements - Template for new MicroSims - Minimal viable metadata</p>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#key-insights","title":"Key Insights","text":"<ol> <li>80% of fields are optional - The schema is very flexible</li> <li>21 minimum required fields - Mostly basic descriptive metadata</li> <li>Educational metadata is concise - Only 4 required fields</li> <li>Technical specs are minimal - Framework + dimensions only</li> <li>Controls must be documented - At least one control with properties</li> <li>Simulation section can be empty - Flexibility for various sim types</li> </ol>"},{"location":"sims/bouncing-ball/METADATA-COMPARISON/#recommended-workflow","title":"Recommended Workflow","text":"<ol> <li>Start with minimal - Use <code>metadata-minimal.json</code> as template</li> <li>Add as needed - Gradually expand with optional fields</li> <li>Prioritize by use case:</li> <li>Adding to LMS? \u2192 Add <code>analytics</code> section</li> <li>Need accessibility? \u2192 Add <code>technical.accessibility</code></li> <li>Want recommendations? \u2192 Add <code>usage</code> section</li> <li>Complex model? \u2192 Fill out <code>simulation.model</code></li> </ol> <p>Last updated: 2024-10-18</p>"},{"location":"sims/breadboard/","title":"MicroSim Template","text":"Figure caption. <p>Link to Breadboard Demo Link to Push Button Demo Link to Resistors Demo Link to Vector Breadboard Edit the Breadboard MicroSim</p>"},{"location":"sims/breadboard/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to simulate an LED circuit with a button on a breadboard.</p>"},{"location":"sims/breadboard/#image-background","title":"Image Background","text":"<p>Here is how we draw a breadboard in the background</p> <pre><code>canvasWidth = 400;\ndrawHeight = 275;\ncanvasHeight = 320;\n\nfunction preload() {\n    breadboard_img = loadImage('./breadboard-horiz-small.png');\n}\n\nfunction setup() {\n    const canvas = createCanvas(canvasWidth, canvasHeight);\n}\n\nfunction draw() {\n    // make the background drawing region light gray\n    fill(245);\n    rect(0,0,canvasWidth, canvasWidth);\n    // make the background of the controls white\n    fill('white')\n    rect(0,drawHeight,canvasWidth, canvasHeight-drawHeight);\n\n    // Place the image at 00\n    image(breadboard_img, 0, 0);\n}\n\n// button press momentary \nfunction setup() {\n  createCanvas(200, 200);\n}\n\nfunction draw() {\n  background(245);\n\n  // Button style - use a rect with rounded corners\n  fill(0, 0, 255);\n  rect(80, 80, 40, 40, 5);\n\n  // Draw the circle red if we have a press in our circle\n  if (dist(mouseX, mouseY, 100, 100) &lt; 20 &amp;&amp; mouseIsPressed)\n    fill(255, 0, 0);\n  else\n    fill(200, 200, 200);\n\n  // Draw the circle\n  circle(100, 100, 38);\n\n}\n</code></pre>"},{"location":"sims/breadboard/#button-press","title":"Button Press","text":""},{"location":"sims/breadboard/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/breadboard/#sample-response","title":"Sample Response","text":"<pre><code>let canvasHeight = 400;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\nfunction setup() {\nconst canvas = createCanvas(canvasWidth, canvasHeight);\n  canvas.parent('canvas-container');\n  fill(245);\n  rect(0,0, canvasWidth, canvasHeight);\n  fill('green');\n  circle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/breadboard/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/breadboard/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/breadboard/#activities","title":"Activities","text":""},{"location":"sims/breadboard/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/breadboard/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/breadboard/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/breadboard/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/breadboard/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"},{"location":"sims/breadboard/#prompt-for-400-tie-breadboard-layout","title":"Prompt for 400-Tie Breadboard Layout","text":"<pre><code>Create a p5.js drawing like the image attached.\nCreate a single file p5.js layout on a 400X275 canvas.\nCreate a layout of a 400-tie solderless mini breadboard.\nThe breadboard has a landscape orientation.\nEach tie should be represented by a 4x4 black rectangle.\nThe breadboard should have two power rails at the top and bottom of the breadboard.\nEach power rail has both a positive and negative horizontal row of ties.\nThe power rail rows have 5 groupings of 5 ties with a small space between the groups.\nThe positive power rail is red and the negative power rail is black.\nThe power rails run horizontally.\nThe center region has 30 columns of five vertical ties in columns at the top an bottom.\nThe 30 columns are evenly spaced in the 400 pixel width.\nA central trough runs horizontally down the center of the breadboard.\n</code></pre>"},{"location":"sims/breadboard/#references","title":"References","text":"<ul> <li>WokWi Online Simulator of the Pico</li> </ul>"},{"location":"sims/brownian-motion/","title":"Brownian Motion","text":"<p>Run Brownian Motion MicroSim</p> <p>The bouncing ball is the \"Hello World!\" of the Processing system. It contains the key element that shows the power of the Processing system: graphics with movement and user interaction.  When we design MicroSims, we also want clearly-visible user interface elements that can control the running of our simulations.  This version contains a  slider to control the speed of the ball's movement.</p>"},{"location":"sims/brownian-motion/brownian-motion/","title":"Brownian motion","text":""},{"location":"sims/brownian-motion/brownian-motion/#brownian-motion","title":"Brownian Motion","text":"<p>A classic physics simulation where the user can adjust the temperature and number of molecules in the simulation.</p> <p>Brownian Motion</p> <p>Prompt</p> <pre><code>Generate a 2D p5.js simulation of Brownian motion on a 600x400 canvas.\nUse\nSimulate a set of gas molecules in a chamber.  \nAdd two in-chart range control sliders for temperature and number of molecules.\nAdd labels and values to the range control sliders.\nPlace the labels, values an sliders at the bottom of the canvas.\n</code></pre>"},{"location":"sims/brownian-motion/brownian-motion/#sample-code","title":"Sample Code","text":""},{"location":"sims/canon/","title":"Canon and Projectile Motion","text":"Figure caption. <p>Run Demo of Canon Projectile Motion</p> <p>In this lesson, we add gravity to our simulation.  The program has a \"Fire\" button and you can adjust the angle an power of the canon that fires the ball.</p>"},{"location":"sims/canon/#sample-prompts","title":"Sample Prompts","text":"<pre><code>Generate a single file p5.js sketch that demonstrates projectile motion.\nAllow the user to set the initial angle and power of a projectile.\n</code></pre> <p>Here is a more precise specification with details on the control placement.</p> <pre><code>Generate a single file p5.js sketch on an 800x550 canvas.\nThe program is a simulation of projecile motion.\nThe upper drawing region is 800x500 and is intialized with a light gray rectangle of 245.\nThe lower 50 height is for placing the controls on a white background.\nA circle of radius 10 is placed in the lower left corner of the drawing region.\nA \"Fire\" buttin is below the circle.\nTo the right of the fire button are two sliders.\nOne slider is for the initial angle at fire time.\nOne slider is for the power at fire time.\nGravity is in the positive y of force 0.05\nWhen the ball goes outside the drawing region (800x500) the simulation must stop.\nWhen the simulation stops, place a new ball in the lower left corner of the drawing region.\n</code></pre> <p>Edit this Code Using the p5.js Editor</p>"},{"location":"sims/canon/#sample-code","title":"Sample Code","text":"<pre><code>// Cannon Ball - a demonstration of projectile motion\n// Gravity is a constant\nlet canvasWidth = 800;\nlet drawHeight = 500;\nlet canvasHeight = drawHeight + 40; // add 20 per slider\nlet angleSlider, powerSlider;\nlet angle, power;\nlet cannonBall;\nlet firing = false;\nlet sliderLeftMargin = 140;\n\n// setup the canvas and controls and \n// create a new cannonBall in the lower left corner\nfunction setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  // uncomment when placing into HTML\n  // canvas.parent('canvas-container');\n  textSize(16);\n\n  angleSlider = createSlider(0, 90, 75, 1);\n  angleSlider.position(sliderLeftMargin, drawHeight + 5);\n  angleSlider.style('width', canvasWidth - sliderLeftMargin - 200 + 'pt')\n\n  powerSlider = createSlider(1, 10, 7, 0.1);\n  powerSlider.position(sliderLeftMargin, drawHeight + 25);\n  powerSlider.style('width', canvasWidth - sliderLeftMargin - 200 + 'pt')\n\n  fireButton = createButton('Fire');\n  fireButton.position(10, drawHeight+15);\n  fireButton.mousePressed(fireCannon);\n\n  cannonBall = new CannonBall(10, drawHeight-10, 0, 0);\n}\n\nfunction draw() {\n  // only draw the drawing region light gray\n  fill(245);\n  rect(0, 0, canvasWidth, drawHeight);\n  // fill the bottom control region with a white background\n  fill('white');\n  rect(0, drawHeight, canvasWidth, canvasHeight- drawHeight);\n\n  // get the new angle and power\n  angle = angleSlider.value();\n  power = powerSlider.value();\n\n  if(firing) {\n    cannonBall.applyForce(createVector(0, 0.05)); // Gravity is here\n    cannonBall.update();\n  }\n\n  // draws the new cannon ball\n  cannonBall.display();\n\n  // are we still on the canvas?\n  if(cannonBall.pos.y &gt; drawHeight || cannonBall.pos.y &lt; 0) {\n    firing = false;\n    // get a new ball ready\n    cannonBall = new CannonBall(10, drawHeight-10, 0, 0);\n  }\n\n  fill(1);\n  noStroke();\n  text('Angle: ' + angle, 60, drawHeight + 20);\n  text('Power: ' + power, 60, drawHeight + 40);\n}\n\nfunction fireCannon() {\n  let force = p5.Vector.fromAngle(radians(-angle));\n  force.mult(power);\n  cannonBall.applyForce(force);\n  firing = true;\n}\n\nclass CannonBall {\n  constructor(x, y, vx, vy) {\n    this.pos = createVector(x, y);\n    this.vel = createVector(vx, vy);\n    this.acc = createVector(0, 0);\n    this.r = 10;\n  }\n\n  applyForce(force) {\n    this.acc.add(force);\n  }\n\n  update() {\n    this.vel.add(this.acc);\n    this.pos.add(this.vel);\n    this.acc.mult(0);\n  }\n\n  display() {\n    fill('black')\n    circle(this.pos.x, this.pos.y, this.r * 2);\n  }\n}\n</code></pre>"},{"location":"sims/canon/#learnings-from-the-code","title":"Learnings from the Code","text":"<ol> <li>The p5.js has a library for simulating forces on an object.</li> <li>We can use the Class operator to create functions on the canon ball.</li> </ol>"},{"location":"sims/canon/#references","title":"References","text":""},{"location":"sims/circle/","title":"Circle","text":"<p>Run the Circle Slider MicroSim</p> <p>Here is a simple example that you can start with.  The ChatGPT prompt would be the following:</p> <p>Prompt</p> <p>Generate a single p5.js sketch file that draws a blue circle   in the center of a 400x400 canvas.</p> <p>Create a range control slider that allows the radius to be   adjusted from 0 to 200.</p> <p>Use the text() function within the draw() function to display the   label and current value of the radius.</p> <p>Use a responsive design and adjust the slider when the window is resized.</p> <pre><code>let radiusSlider;\nlet radius = 0;\n\nfunction setup() {\n  createCanvas(400, 400);\n\n  // Create the radius slider\n  radiusSlider = createSlider(0, 200, 100);\n  radiusSlider.position(10, 10);\n}\n\nfunction draw() {\n  background(220);\n\n  // Fetch the current radius from the slider\n  radius = radiusSlider.value();\n\n  // Draw the circle\n  fill(0, 0, 255);\n  noStroke();\n  circle(width / 2, height / 2, radius * 2);\n\n  // Display the radius value\n  fill(0);\n  text(\"Radius: \" + radius, 10, 50);\n}\n</code></pre>"},{"location":"sims/circle/#full-responsive-version","title":"Full Responsive Version","text":"<pre><code>// Circle MicroSim with responsive design\n// Canvas dimensions\nlet canvasWidth = 400;\nlet drawHeight = 400;\nlet controlHeight = 50;\nlet canvasHeight = drawHeight + controlHeight;\nlet margin = 25;\nlet sliderLeftMargin = 100;\nlet defaultTextSize = 16;\n\n// Global variables for width and height\nlet containerWidth; // calculated by container upon resize\nlet containerHeight = canvasHeight; // fixed height on page\n\n// Circle parameters\nlet radius = 60;\nlet radiusSlider;\n\nfunction setup() {\n    // Create a canvas to match the parent container's size\n    updateCanvasSize();\n    const canvas = createCanvas(containerWidth, containerHeight);\n    canvas.parent(document.querySelector('main'));\n    textSize(defaultTextSize);\n\n    // Create slider for radius control\n    radiusSlider = createSlider(0, 200, radius, 1);\n    radiusSlider.position(sliderLeftMargin, drawHeight + 12);\n    radiusSlider.size(canvasWidth - sliderLeftMargin - 20);\n}\n\nfunction draw() {\n    // Draw the display area\n    fill('aliceblue');\n    stroke('silver');\n    strokeWeight(1);\n    rect(0, 0, canvasWidth, drawHeight);\n\n    // Draw the controls area\n    fill('white');\n    rect(0, drawHeight, canvasWidth, controlHeight);\n\n    // Get the current radius from the slider\n    radius = radiusSlider.value();\n\n    // Draw the circle\n    fill('blue');\n    noStroke();\n    circle(canvasWidth/2, drawHeight/2, radius*2);\n\n    // Draw the label and value\n    fill('black');\n    strokeWeight(0);\n    textSize(defaultTextSize);\n    textAlign(LEFT, CENTER);\n    text('Radius: ' + radius, 10, drawHeight + 20);\n}\n\nfunction windowResized() {\n    // Update canvas size when the container resizes\n    updateCanvasSize();\n    resizeCanvas(containerWidth, containerHeight);\n\n    // Resize the slider to match the new canvasWidth\n    radiusSlider.size(canvasWidth - sliderLeftMargin - 20);\n}\n\nfunction updateCanvasSize() {\n    // Get the exact dimensions of the container\n    const container = document.querySelector('main').getBoundingClientRect();\n    containerWidth = Math.floor(container.width);  // Avoid fractional pixels\n    canvasWidth = containerWidth;\n}\n</code></pre>"},{"location":"sims/circuits/","title":"Battery Circuit","text":"See animated current when the circuit is turned on. <p>Battery Circuit Demo</p> <p>In this lesson, we will create an animation of a circuit that includes:</p> <ol> <li>A battery</li> <li>An on/off switch</li> <li>A resistor</li> <li>An LED</li> <li>Wires that connect the components in a series loop</li> </ol> <p>We will use the Animated Wire demo that we did in a prior lab.</p> <p>We will break the problem down into ChatGPT prompts that animate and test individual components. We will then concatenate the components into a main animation file.</p> <p>This is the most complex program we have generated so far.  It requires us to first use ChatGPT to create several functions:</p> <ol> <li>A drawBattery function that draws the positive and negative parts of a battery</li> <li>A drawSwitch function that will toggle on or off</li> <li>A resistor function that draws a resistor zig-zag symbol</li> <li>An LED function that is black in the off state and red in the on state</li> <li>An animate wire function that animates the flow of current (see the previous example)</li> </ol> <p>Once we have functions for all these components, we can then assemble them together in an entire simulation.  You will find that ChatGPT will not usually get the the layout wrong and you will need to adjust the positions of the wires.</p>"},{"location":"sims/circuits/#references","title":"References","text":"<ul> <li>Paul Falstad's Web-based circuit simulator</li> <li>Circuit JS 1 - open source JavaScript based circuit simulator.</li> </ul>"},{"location":"sims/circuits/circuits-v2/","title":"Circuits","text":""},{"location":"sims/circuits/circuits-v2/#background","title":"Background","text":"<p>Creating a simulation of a basic electrical circuit with an on/off switch, a battery, and a light bulb is a great way to teach students about electricity and circuits. We'll use p5.js to create this interactive simulation. In this simulation, students can toggle the switch to turn the light bulb on and off, visually seeing how closing and opening a circuit works.</p> <p>Here's a basic outline of the p5.js code for this simulation:</p> <ol> <li>Setup: Define the canvas and initial state of the switch (on or off).</li> <li>Draw: Render the battery, switch, and light bulb. The light bulb's brightness changes based on the switch's state.</li> <li>Mouse Interaction: Allow the switch to be toggled on and off with a mouse click.</li> </ol>"},{"location":"sims/circuits/circuits-v2/#classroom-implementation-ideas","title":"Classroom Implementation Ideas","text":"<p>Concept Visualization: Use this simulation to help students visualize how a simple circuit works, emphasizing the role of each component. Interactive Learning: Encourage students to toggle the switch and observe changes, fostering understanding through interaction. Critical Thinking: Pose questions like \"What happens if the battery is reversed?\" or \"What changes if we add another light bulb?\"</p>"},{"location":"sims/circuits/circuits-v2/#further-extensions","title":"Further Extensions","text":"<p>Additional Components: Introduce resistors or variable resistors (like a potentiometer) to the circuit. Circuit Diagrams: Have students draw the circuit diagram based on the simulation, then build the actual circuit using physical components. Exploring Variables: Modify the code to represent different battery voltages or bulb wattages.</p>"},{"location":"sims/circuits/circuits-v2/#demos-of-circuits","title":"Demos of Circuits","text":"<ol> <li>Simple Circuit</li> <li>Switch</li> <li>Battery With LED Circuit</li> <li>Wire Animate</li> <li>Motor Circuit</li> <li>H-Bridge</li> </ol>"},{"location":"sims/circuits/circuits-v2/#sample-prompt","title":"Sample Prompt","text":"<p>```linenubs=\"0\" Create a single file p5.js sketch on a 300x200 canvas. Subject: simple electrical circiuts. Create a simulation of an electrical circuit with a batter, an on/off switch, a light bulb and the connecting wires. Make the default text size be 16. Add the title \"Click Anywhere to Toggle The Switch\" to the top of the canvas. Place the battery standing vertically on the left with the positive side up and the negative side down. Draw the top of the battery as a gold rectangle on the top with a \"+\" on it. Draw the bottom of the battery as a black rectangle \"-\" near the bottom. The top row of connection points are at y=50. The bottom row of connection points are at y=150. Make the wires toogle from black (circuit off) to red (circuit on). Make all the wires width 3. Make the switch be a rectangle that is horizontal and 50px wide when on. Make the swtich rectangle rotate up 45 degrees when the switch is off. Complete the circuit with the light going to the negative battery terminal in a column at x=250. Make sure to reset the stroke width to 0 after drawing wires. Allow the user to click anywhere on the canvas to toggle the switch.</p> <pre><code>## Sample Code\n\n```js\nlet switchOn = false; // Initial state of the switch\nlet switchAngle = 45; // Angle of the switch when off\n\nfunction setup() {\n  createCanvas(300, 200);\n  textSize(16);\n}\n\nfunction draw() {\n  background(220);\n\n  // Draw title\n  fill(0);\n  strokeWeight(0);\n  text(\"Click Anywhere to Toggle The Switch\", 10, 20);\n\n  // Draw the battery\n  drawBattery();\n\n  // Draw the switch\n  drawSwitch();\n\n  // Draw the light bulb\n  drawLightBulb();\n\n  // Draw wires\n  drawWires();\n}\n\nfunction drawBattery() {\n  fill('grey');\n  rect(20, 100, 20, 50); // battery body\n  rect(20, 95, 20, 5); // positive terminal\n  rect(20, 150, 20, 5); // negative terminal\n}\n\nfunction drawSwitch() {\n  push();\n    translate(80, 50); // Move origin to switch pivot\n    rotate(radians(switchOn ? 0 : switchAngle)); // Rotate when off\n    fill('black');\n    rect(0, 0, 50, 10); // switch\n  pop();\n}\n\nfunction drawLightBulb() {\n  if (switchOn) {\n    fill('yellow');\n  } else {\n    fill('white');\n  }\n  ellipse(250, 50, 30, 30); // light bulb\n}\n\nfunction drawWires() {\n  stroke(switchOn ? 'red' : 'black');\n  strokeWeight(3);\n\n  // Wire from battery top to switch\n  line(40, 100, 40, 50);\n  line(40, 50, 80, 50);\n\n  // Wire from switch to light bulb\n  line(130, 50, 250, 50);\n\n  // Wire from light bulb to battery bottom\n  line(250, 50, 250, 150);\n  line(250, 150, 40, 150);\n}\n\nfunction mousePressed() {\n  switchOn = !switchOn; // Toggle the switch\n  switchAngle = switchOn ? 0 : 45; // Adjust switch angle\n}\n</code></pre>"},{"location":"sims/collision-avoidance-robot/","title":"Collision Avoidance Robot","text":"Collision Avoidance Robot <p>Link to Collision Avoidance Demo</p>"},{"location":"sims/collision-avoidance-robot/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a p5.js simulation of a collision avoidance robot on a 400x400 canvas.\nThe robot moves in a circle of radius 200 which is centered in the canvas.\nThe robot is drawn as blue filled rectangle 40x40 with a 20 long red line pointing at the front.\nThe robot has four modes: stopped, forward, backing up a turning.\nThere are three buttons at the bottom of the drawing region: Start, Stop and Reset.\nThe initial state is stopped.  Place the robot in the center facing right.\nWhen the user presses Start the robot goes into forward mode.\nWhen the robot comes within 20 of the edge of the circle it will backup 20 and then turn.\nThe turn will be 120 degrees either right or left.\nAfter the robot turns it will then go forward.\nWhen the user presses Stop the mode will be stopped.\nWhen the user presses Reset the robot will be placed stopped at the center of the canvas.\n</code></pre>"},{"location":"sims/color-names/","title":"Color Names","text":"Figure caption. <p>Link to Color Names Demo Edit the Color Names MicroSim</p>"},{"location":"sims/color-names/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us the names of the colors and how to see their RGB values.</p>"},{"location":"sims/conway/","title":"Conway's Game of Life","text":"<p>Conway's Game of Life is a simple simulator of cells.  This is a class of simulation called Cellular Automata</p> <p>Demo of Conway's Game of Life</p>"},{"location":"sims/curve/","title":"Curve Control PointerEvent","text":"Curve Control Points <p>Run the Curve Control Point MicroSim Edit Curve Control Points MicroSim</p>"},{"location":"sims/curve/#curve-percent","title":"Curve Percent","text":"<p>Curve Percent Edit Curve Percent</p>"},{"location":"sims/curve/#custom-curve-with-percent-function","title":"Custom Curve with Percent Function","text":"<pre><code>// Draw a curve with only the percent drawin\nfunction customCurve(c1x, c1y, x1, y1, x2, y2, c2x, c2y, percent) {\n  beginShape();\n  for (let t = -0.01; t &lt;= percent + 0.01; t += 0.01) {\n    let v0 = createVector(c1x, c1y);\n    let v1 = createVector(x1, y1);\n    let v2 = createVector(x2, y2);\n    let v3 = createVector(c2x, c2y);\n    let x = curvePoint(v0.x, v1.x, v2.x, v3.x, t);\n    let y = curvePoint(v0.y, v1.y, v2.y, v3.y, t);\n    curveVertex(x, y);\n  }\n  endShape();\n}\n</code></pre>"},{"location":"sims/data-element-mapper/","title":"Data Element Mapper MicroSim","text":"Figure caption. <p>Link to Demo</p>"},{"location":"sims/data-element-mapper/#about-this-microsim","title":"About this MicroSim","text":""},{"location":"sims/fft-mic/","title":"Microphone Frequency Visualization with FFT","text":"<p>Run the Microphone Frequency Visualization with FFT MicroSim Fullscreen Edit Microphone Frequency Visualization with FFT MicroSim with the p5.js Editor</p>"},{"location":"sims/fft-mic/#sample-iframe","title":"Sample iframe","text":"<p>You can add this MicroSim to your course website by adding the following HTML element:</p> <pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/fft-mic/main.html\" height=\"450px\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre> <p>Here is a FFT Microphone Visualizer MicroSim that follows the standard responsive design template. Here are the key features:</p>"},{"location":"sims/fft-mic/#key-features","title":"Key Features","text":"<p>Audio Analysis: Uses p5.js AudioIn and FFT objects to capture and analyze microphone input in real-time, displaying frequency spectrum data as colorful bars.</p> <p>Start/Stop Control: </p> <ol> <li>A \"Start\" button in the control region that allows users to start/stop audio recording without clearing the display - when stopped, the last spectrum remains visible.</li> <li>Max Frequency Slider - allows you to set the highest frequency displayed</li> </ol> <p>Responsive Design: Follows the standard MicroSim layout with separate drawing and control regions that adapt to different screen sizes.</p> <p>Visual Feedback:</p> <ul> <li>Color-coded frequency bars (blue for low frequencies, red for high frequencies)</li> <li>Real-time frequency and amplitude scaling</li> <li>Peak frequency detection and display</li> <li>Status indicators showing recording state</li> </ul> <p>Educational Value: Students can observe how different sounds (voice, music, noise) create different frequency patterns, helping them understand concepts like:</p> <ul> <li>Frequency analysis and Fourier transforms</li> <li>Audio signal processing</li> <li>Harmonic content in different sounds</li> <li>Real-time data visualization</li> </ul>"},{"location":"sims/fft-mic/#usage-instructions","title":"Usage Instructions","text":"<ol> <li>Click \"Start\" to begin microphone input (browser will request permission)</li> <li>Make sounds near the microphone to see the frequency spectrum</li> <li>Click \"Stop\" to pause recording (spectrum remains visible)</li> <li>Click \"Start\" again to resume recording</li> </ol> <p>The visualization shows frequency on the x-axis (0 to ~22kHz) and amplitude on the y-axis, with the peak frequency displayed in the control area. This provides an excellent hands-on way to explore audio signal processing concepts.</p>"},{"location":"sims/fft-mic-v2/","title":"FFT Microphone V2","text":"<p>https://editor.p5js.org/dmccreary/sketches/89df6y1OK</p>"},{"location":"sims/fibonacci-clock/","title":"Fibonacci Clock","text":"<p>Run the Fibonacci ClockMicroSim Edit the Fibonacci Clock MicroSim</p>"},{"location":"sims/fibonacci-clock/#sample-iframe","title":"Sample iframe","text":"<p><pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/fibonacci-clock/main.html\" width=\"600px\" height=\"600\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre> Edit the Fibonacci Clock MicroSim</p>"},{"location":"sims/flashcards/","title":"Flashcards App","text":"<p>Run the flashcard application</p>"},{"location":"sims/flashcards/#sample-decomposition-prompt","title":"Sample Decomposition Prompt","text":"<pre><code>I want to create a web application that displays 300 flashcards to help me learn the meaning of the 300 most common words in Tagalog.  How can we decompose this into smaller functions?\n</code></pre>"},{"location":"sims/flashcards/#sample-decomposition-response","title":"Sample Decomposition Response","text":"<p>Creating a web application to display flashcards for learning the 300 most common words in Tagalog is a great idea. To make this project manageable and organized, we can decompose it into smaller functions and components. Here's a suggested breakdown:</p> <ol> <li> <p>Data Collection and Preparation</p> <ul> <li>Function to Fetch Word Data: Develop a function to gather the 300 most common Tagalog words. This might involve scraping a website or using an existing dataset.</li> <li>Data Structuring Function: Design a structure to hold word data, including the Tagalog word, its English translation, and any additional data like usage examples or pronunciation guides.</li> <li> <p>Flashcard Generation</p> </li> <li> <p>Flashcard Object Creation: Create a class or structure for a flashcard, encapsulating all necessary data (Tagalog word, English translation, examples, etc.).</p> </li> <li>Flashcard Display Logic: Develop a function to display a single flashcard with its content, including front (Tagalog word) and back (translation, examples).</li> <li> <p>User Interface (UI) Design</p> </li> <li> <p>Main Layout: Design the main layout of the web application, considering where the flashcards will be displayed, navigation buttons, and any other necessary interface elements.</p> </li> <li>Flashcard UI Component: Create a UI component for the flashcard that can flip or reveal additional information upon user interaction.</li> <li>Navigation Controls: Implement UI controls for moving between flashcards (next, previous, random).</li> <li> <p>Interactivity and User Progress Tracking</p> </li> <li> <p>Progress Tracking Function: Develop a system to track the user's progress, such as which flashcards have been seen and any scoring or mastery system you want to include.</p> </li> <li>Review and Testing Mechanisms: Optionally, add features for users to test themselves, like quizzes or a mode where they must recall the translation before seeing it.</li> <li> <p>Data Persistence</p> </li> <li> <p>Local Storage or Database Integration: Decide on and implement a method to store user progress, either locally in the browser or in a backend database.</p> </li> <li> <p>Backend Development (if needed)</p> </li> <li> <p>Server-side Functions: If your app requires a backend, develop the necessary APIs for fetching flashcard data, saving progress, and any other server-side logic.</p> </li> <li>Database Management: Set up a database to manage the flashcards data and user progress, if not stored locally.</li> <li> <p>Testing and Quality Assurance</p> </li> <li> <p>Unit Testing for Functions: Write tests for individual functions to ensure they work as expected.</p> </li> <li>Integration Testing: Test how different parts of your application work together.</li> <li>User Acceptance Testing: Get feedback from potential users to see if the app meets their needs and is user-friendly.</li> <li> <p>Deployment</p> </li> <li> <p>Deployment Setup: Prepare your application for deployment, which may include setting up a web server, domain, etc.</p> </li> <li>Launch: Deploy your application to a web server or hosting service.</li> <li> <p>Maintenance and Updates</p> </li> <li> <p>Regular Maintenance: Plan for regular checks and maintenance of your application.</p> </li> <li>Feature Updates: Consider potential future updates, like adding more words or functionalities based on user feedback.</li> </ul> </li> </ol> <p>By breaking down the project into these smaller components, you can manage the workload more effectively and ensure each part of your application is well-designed and functional.</p>"},{"location":"sims/flashcards/#sample-30-element-wordlist-prompt","title":"Sample 30-Element Wordlist Prompt","text":"<pre><code>Create a list of the 30 most common words\nin Tagalog that are used by visitors.\nPlace them in a JSON file with their English translations.\n</code></pre>"},{"location":"sims/flashcards/#sample-response","title":"Sample Response","text":"<pre><code>[\n    {\"Tagalog\": \"ang\", \"English\": \"the\"},\n    {\"Tagalog\": \"ako\", \"English\": \"I\"},\n    {\"Tagalog\": \"siya\", \"English\": \"he/she\"},\n    {\"Tagalog\": \"sa\", \"English\": \"in/on\"},\n    {\"Tagalog\": \"ng\", \"English\": \"of\"},\n    {\"Tagalog\": \"ay\", \"English\": \"is\"},\n    {\"Tagalog\": \"may\", \"English\": \"have\"},\n    {\"Tagalog\": \"at\", \"English\": \"and\"},\n    {\"Tagalog\": \"ito\", \"English\": \"this\"},\n    {\"Tagalog\": \"mo\", \"English\": \"your\"},\n    {\"Tagalog\": \"para\", \"English\": \"for\"},\n    {\"Tagalog\": \"hindi\", \"English\": \"not/no\"},\n    {\"Tagalog\": \"na\", \"English\": \"already\"},\n    {\"Tagalog\": \"mga\", \"English\": \"plural marker\"},\n    {\"Tagalog\": \"ko\", \"English\": \"my\"},\n    {\"Tagalog\": \"ka\", \"English\": \"you\"},\n    {\"Tagalog\": \"kami\", \"English\": \"we (exclusive)\"},\n    {\"Tagalog\": \"kayo\", \"English\": \"you (plural)\"},\n    {\"Tagalog\": \"sila\", \"English\": \"they\"},\n    {\"Tagalog\": \"tayo\", \"English\": \"we (inclusive)\"},\n    {\"Tagalog\": \"oo\", \"English\": \"yes\"},\n    {\"Tagalog\": \"hindi\", \"English\": \"no\"},\n    {\"Tagalog\": \"kung\", \"English\": \"if\"},\n    {\"Tagalog\": \"isa\", \"English\": \"one\"},\n    {\"Tagalog\": \"dalawa\", \"English\": \"two\"},\n    {\"Tagalog\": \"tatlo\", \"English\": \"three\"},\n    {\"Tagalog\": \"apat\", \"English\": \"four\"},\n    {\"Tagalog\": \"lima\", \"English\": \"five\"},\n    {\"Tagalog\": \"anim\", \"English\": \"six\"},\n    {\"Tagalog\": \"pito\", \"English\": \"seven\"}\n]\n</code></pre>"},{"location":"sims/flower-petal/","title":"Flower Petal Designer","text":"<p>Run the MicroSim Edit this MicroSim</p>"},{"location":"sims/flower-petal/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/flower-petal/main.html\" height=\"610px\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/flower-petal/#user-guide","title":"User Guide","text":""},{"location":"sims/flower-petal/#overview","title":"Overview","text":"<p>The Flower Petal Designer is an interactive MicroSim that allows you to create custom flower designs by adjusting geometric parameters and colors. This educational tool demonstrates the mathematical principles behind creating organic shapes using quadratic B\u00e9zier curves and helps students understand how simple geometric transformations can create complex, natural-looking patterns.</p>"},{"location":"sims/flower-petal/#controls","title":"Controls","text":"<p>The simulator provides six interactive sliders that control different aspects of your flower design:</p>"},{"location":"sims/flower-petal/#geometric-controls","title":"Geometric Controls","text":"<p>Number of Petals (3-20) - Controls how many petals are arranged radially around the flower's center - Default: 6 petals - Lower values create simpler flowers (like trilliums) - Higher values create more complex, daisy-like flowers - Each petal is rotated by 360\u00b0/n where n is the number of petals</p> <p>Petal Length (20-200) - Controls how far the tip of each petal extends from the center - Default: 130 pixels - Shorter lengths create compact, button-like flowers - Longer lengths create elongated, dramatic petals - Also affects the size of the center circle (40% of petal length)</p> <p>Control Point X (0-150) - Controls the horizontal curviness of the petal edges - Default: 40 - Value of 0 creates straight, triangular petals - Higher values create wider, more rounded petals - This is the x-coordinate of the quadratic B\u00e9zier curve control point</p> <p>Control Point Y (0-200) - Controls the vertical depth and shape of the petal curve - Default: 75 - Lower values create shallow curves near the base - Higher values create deeper curves extending toward the tip - This is the y-coordinate of the quadratic B\u00e9zier curve control point</p>"},{"location":"sims/flower-petal/#color-controls","title":"Color Controls","text":"<p>Petal Color (Hue: 0-360) - Controls the hue (color) of the flower petals - Default: 300\u00b0 (magenta/purple) - Uses HSB color model where 0\u00b0 = Red, 120\u00b0 = Green, 240\u00b0 = Blue - Popular flower colors:     - Red/Pink: 0-30\u00b0     - Orange: 30-60\u00b0     - Yellow: 60-90\u00b0     - Blue: 180-240\u00b0     - Purple: 270-330\u00b0 - Saturation: 75%, Brightness: 85% (fixed for vibrant petals)</p> <p>Center Color (Hue: 0-360) - Controls the hue of the flower's center circle - Default: 60\u00b0 (yellow) - Same hue range as petal color (0-360\u00b0) - Saturation: 60%, Brightness: 95% (fixed for lighter center) - Creates realistic contrast between petals and center</p>"},{"location":"sims/flower-petal/#visual-feedback","title":"Visual Feedback","text":"<p>The simulation displays several visual elements to help you understand the geometry:</p> <ul> <li>Control Points: Small black circles show the position of the B\u00e9zier curve control points</li> <li>Guide Lines: Thin black lines connect the center, control points, and petal tips</li> <li>Center Circle: A contrasting center circle that scales with petal length</li> <li>Code Display: At the bottom, see the function call that would generate your current flower design</li> </ul>"},{"location":"sims/flower-petal/#how-it-works","title":"How It Works","text":"<p>The Flower Petal Designer uses quadratic B\u00e9zier curves to create each petal:</p> <ol> <li>Each petal starts at the center (0, 0)</li> <li>The curve extends to the petal tip (0, petalLength)</li> <li>The control point (ctrlX, ctrlY) determines the curve's shape</li> <li>A second curve mirrors back to create a symmetrical petal</li> <li>The entire petal shape is rotated around the center for each petal count</li> </ol> <p>Mathematical Formula: For a flower with n petals, each petal is rotated by an angle of 360\u00b0/n degrees using p5.js's <code>rotate()</code> function in DEGREES mode.</p>"},{"location":"sims/flower-petal/#educational-applications","title":"Educational Applications","text":""},{"location":"sims/flower-petal/#mathematics-grades-6-12","title":"Mathematics (Grades 6-12)","text":"<ul> <li>Geometry: Understand rotation, symmetry, and radial patterns</li> <li>Trigonometry: See how angles divide a circle (360\u00b0/n)</li> <li>Algebra: Explore coordinate systems and B\u00e9zier curve equations</li> <li>Functions: Observe how parameter changes affect outputs</li> </ul>"},{"location":"sims/flower-petal/#art-design-grades-4-12","title":"Art &amp; Design (Grades 4-12)","text":"<ul> <li>Color Theory: Experiment with the HSB color model</li> <li>Pattern Design: Create repeating radial patterns</li> <li>Digital Art: Understand how computer graphics create organic shapes</li> <li>Botanical Drawing: Study the structure of actual flowers</li> </ul>"},{"location":"sims/flower-petal/#computer-science-grades-8-12","title":"Computer Science (Grades 8-12)","text":"<ul> <li>Parametric Design: See how parameters control complex shapes</li> <li>Graphics Programming: Understand coordinate transformations</li> <li>Functions: Observe how one function can be called with different parameters</li> <li>Iterative Processes: See how loops create repetition</li> </ul>"},{"location":"sims/flower-petal/#suggested-activities","title":"Suggested Activities","text":"<ol> <li>Flower Species Study: Try to recreate real flowers (roses, daisies, sunflowers) by adjusting parameters</li> <li>Color Harmony: Explore complementary colors (opposite on color wheel: 180\u00b0 apart)</li> <li>Pattern Analysis: Keep petal count constant and vary control points to see shape changes</li> <li>Code Challenge: Use the displayed code to recreate your flower in the p5.js editor</li> <li>Math Connection: Calculate the rotation angle for different petal counts (360\u00b0/n)</li> <li>Design Challenge: Create the most symmetrical, beautiful, or unusual flower you can</li> </ol>"},{"location":"sims/flower-petal/#tips-for-best-results","title":"Tips for Best Results","text":"<ul> <li>Realistic Flowers: Use 5-8 petals with moderate control points (30-60)</li> <li>Abstract Designs: Use high petal counts (15-20) with extreme control points</li> <li>Contrast: Choose colors that are at least 60\u00b0 apart on the color wheel</li> <li>Symmetry: The simulation automatically ensures perfect radial symmetry</li> <li>Experimentation: Try extreme values - you might discover unexpected beautiful patterns!</li> </ul>"},{"location":"sims/flower-petal/#technical-notes","title":"Technical Notes","text":"<ul> <li>The simulation uses p5.js's <code>quadraticVertex()</code> function to create smooth curves</li> <li>Colors are generated using HSB (Hue, Saturation, Brightness) color mode for intuitive color selection</li> <li>The canvas is fully responsive and will adapt to your screen width</li> <li>All geometric calculations are performed in real-time as you adjust sliders</li> </ul>"},{"location":"sims/flower-petal/#related-concepts","title":"Related Concepts","text":"<ul> <li>B\u00e9zier Curves: Mathematical curves used in computer graphics and vector art</li> <li>Radial Symmetry: A type of symmetry found in nature (flowers, starfish, snowflakes)</li> <li>HSB Color Model: An alternative to RGB that's more intuitive for color selection</li> <li>Parametric Design: Using parameters to control the generation of forms</li> <li>Rotational Transformations: Mathematical operations that rotate objects around a point</li> </ul>"},{"location":"sims/force-directed-graph/","title":"Force Directed Graph","text":"<p>Forced Directed Graph Demo</p>"},{"location":"sims/force-directed-graph/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a simulation of a force-directed graph placement algorithm.\nGenerate a single file p5.js sketch on a 500x400 canvas.\nSet global variables for the width and height of the canvas.\nThe algorithm will move the position of vertices of a connected\n   based on a force-directed graph placement mode.\nFor the initial state,  place 20 vertices on random locations on a 500x400 canvas. \nMake the vertices be rendered by a circle with a radius of 10.\nConnect each vertex to 3 other vertices using bidirectional links.\nAdd a controls to incrementally step through the algorithm.\nAdd buttons for a single Step, 10 Steps, 100 Steps and 1,000 Steps at the bottom of canvas.\nDisplay the number of steps, and the total movement of the verticies in\neach step.\n</code></pre>"},{"location":"sims/force-directed-graph/#sample-response","title":"Sample Response","text":"<p>Note that this response needed several passes.</p> <pre><code>// Global variables\nlet vertices = [];\nlet totalVertices = 20;\nlet totalSteps = 0;\nlet canvasWidth = 500;\nlet canvasHeight = 400;\nlet vertexRadius = 10;\nlet totalMovement = 0; // To track total net movement\nlet repulsiveForce = 500;\nlet springLength = 100;\nlet springStrength = 0.005;\n\nfunction setup() {\n  createCanvas(canvasWidth, canvasHeight);\n  textSize(16);\n  background(245);\n\n  // Initialize vertices\n  for (let i = 0; i &lt; totalVertices; i++) {\n    let v = {\n      x: random(vertexRadius, width - vertexRadius),\n      y: random(vertexRadius, height - vertexRadius),\n      edges: [],\n      prevX: 0,\n      prevY: 0\n    };\n    v.prevX = v.x; // Store initial position\n    v.prevY = v.y;\n    vertices.push(v);\n  }\n\n  // Create edges\n  for (let i = 0; i &lt; vertices.length; i++) {\n    while (vertices[i].edges.length &lt; 3) {\n      let neighbor = floor(random(totalVertices));\n      if (neighbor !== i &amp;&amp; !vertices[i].edges.includes(neighbor)) {\n        vertices[i].edges.push(neighbor);\n        vertices[neighbor].edges.push(i); // Bidirectional link\n      }\n    }\n  }\n\n  // Button for 'Next' step\n  let nextButton = createButton('Next');\n  nextButton.position(10, height + 10);\n  nextButton.mousePressed(() =&gt; performSteps(1));\n\n  // Button for '10 Steps'\n  let tenStepsButton = createButton('10 Steps');\n  tenStepsButton.position(60, height + 10);\n  tenStepsButton.mousePressed(() =&gt; performSteps(10));\n\n  // Button for '100 Steps'\n  let hundredStepsButton = createButton('100 Steps');\n  hundredStepsButton.position(140, height + 10);\n  hundredStepsButton.mousePressed(() =&gt; performSteps(100));\n\n  // Button for '1000 Steps'\n  let thousandStepsButton = createButton('1000 Steps');\n  thousandStepsButton.position(230, height + 10);\n  thousandStepsButton.mousePressed(() =&gt; performSteps(1000));\n}\n\nfunction draw() {\n  background(245);\n  drawVertices();\n  drawEdges();\n  displayTotalSteps();\n  displayTotalMovement();\n}\n\nfunction drawVertices() {\n  fill('blue');\n  for (let vertex of vertices) {\n    ellipse(vertex.x, vertex.y, vertexRadius * 2, vertexRadius * 2);\n  }\n}\n\nfunction drawEdges() {\n  stroke(0);\n  for (let i = 0; i &lt; vertices.length; i++) {\n    for (let edge of vertices[i].edges) {\n      line(vertices[i].x, vertices[i].y, vertices[edge].x, vertices[edge].y);\n    }\n  }\n}\n\nfunction performSteps(steps) {\n  for (let i = 0; i &lt; steps; i++) {\n    nextStep();\n  }\n}\n\nfunction nextStep() {\n  totalSteps = totalSteps + 1;\n\n  // Calculate repulsive forces\n  for (let i = 0; i &lt; vertices.length; i++) {\n    for (let j = i + 1; j &lt; vertices.length; j++) {\n      let dx = vertices[i].x - vertices[j].x;\n      let dy = vertices[i].y - vertices[j].y;\n      let distance = sqrt(dx * dx + dy * dy);\n      let force = repulsiveForce / (distance * distance);\n      let forceX = force * dx / distance;\n      let forceY = force * dy / distance;\n\n      vertices[i].x += forceX;\n      vertices[i].y += forceY;\n      vertices[j].x -= forceX;\n      vertices[j].y -= forceY;\n    }\n  }\n\n  // Calculate attractive forces along edges\n  for (let vertex of vertices) {\n    for (let edge of vertex.edges) {\n      let dx = vertex.x - vertices[edge].x;\n      let dy = vertex.y - vertices[edge].y;\n      let distance = sqrt(dx * dx + dy * dy);\n      let force = (distance - springLength) * springStrength;\n\n      let forceX = force * dx / distance;\n      let forceY = force * dy / distance;\n\n      vertex.x -= forceX;\n      vertex.y -= forceY;\n      vertices[edge].x += forceX;\n      vertices[edge].y += forceY;\n    }\n  }\n\n  // Update total net movement\n  totalMovement = 0;\n  for (let vertex of vertices) {\n    let dx = vertex.x - vertex.prevX;\n    let dy = vertex.y - vertex.prevY;\n    totalMovement += sqrt(dx * dx + dy * dy);\n    vertex.prevX = vertex.x;\n    vertex.prevY = vertex.y;\n  }\n}\n\nfunction displayTotalSteps() {\n  fill(0);\n  noStroke();\n  textAlign(LEFT, BOTTOM);\n  text(`Steps: ${totalSteps}`, 10, height - 10);\n}\n\nfunction displayTotalMovement() {\n  fill(0);\n  noStroke();\n  textAlign(RIGHT, BOTTOM);\n  text(`Total Step Movement: ${totalMovement.toFixed(2)}`, width - 10, height - 10);\n}\n</code></pre>"},{"location":"sims/fourier/","title":"Fourier","text":"<ul> <li>Paul Falsted's Javascript-based Fourier Tool</li> <li>List of waves</li> <li>GitHub Repo</li> <li>FFT</li> <li>Play Song</li> </ul>"},{"location":"sims/fractal-tree/","title":"Fractal Tree MicroSim","text":"<p>Run the Fractal Tree MicroSim Edit the Fractile Tree MicroSim</p>"},{"location":"sims/fractal-tree/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/name/main.html\" height=\"580\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/galton-board/","title":"Galton Board","text":"<p>Run the Galton Board MicroSim Edit the MicroSim</p>"},{"location":"sims/galton-board/#prompt","title":"Prompt","text":"<pre><code>Create a p5.js sketch that simulates a Galton Board.\nIt is also called a Plinko game.\nThe sketch has \"New Ball\" button that triggers a blue\ncircle with radius=5 falling from the top middle of the\ncanvas.  Below it is a set of pins in a triangular pattern.\nThe ball will bounce on the top pin.\nThere is a 50% chance the ball bounces left and 50% on the right.\nThere is a second row of two pins, each with the same odds.\nOn the third row, there are three pins.\nOn the fourth row there are four pins.\nContinue this pattern for 6 rows.\n</code></pre> <p>Simon Tiger's Galton Board</p> <p>Other sketches by Simon Tiger https://editor.p5js.org/simontiger/sketches</p> <p>Plinko by Coding Train</p>"},{"location":"sims/gold-star/","title":"Gold Star","text":"<p>Run the Gold Star MicroSim</p> <p>Prompt</p> <p>Draw a gold star width number points as a parameter.   Use the circle.js file as your template.</p> <p>Prompt</p> <p>Draw a gold star with number points as a parameter.   Use a slider so that the number of points range from 4 to 30.   Make the default number of points be 10.   Use the circle.js file as your template.</p>"},{"location":"sims/gold-star/#sample-code","title":"Sample Code","text":"<pre><code>// Draw a gold star width number points as a parameter\nlet pointsSlider;\nlet width = 400;\nlet height = 430;\nlet drawHeight = 400;\nlet cx = width / 2;\nlet cy = height / 2;\nlet sliderLeftMargin = 100;\n\nfunction setup() {\n  const canvas = createCanvas(width, height);\n  canvas.parent('canvas-container');\n  textSize(16);\n\n  pointsSlider = createSlider(4, 20, 10);\n  pointsSlider.position(90, height - 15);\n  pointsSlider.style('width', width - sliderLeftMargin +'px');\n}\n\nfunction draw() {\n  // fill the drawing area with a light gray background\n  fill(220);\n  rect(0,0,width,drawHeight);\n  fill(245);\n  rect(0,drawHeight,width,height);\n\n  // radius\n  const r = min(width, height) * 0.45;\n\n  // points\n  points = pointsSlider.value();\n\n  // tempory move of coordinate system to center\n  push();\n     translate(cx, cy);\n     star(0, 0, r * 0.6, r, points);\n  pop();\n\n  // draw the label and values in the control area\n  fill(0);\n  text(\"Points:\" + points, 10, height - 10);\n}\n\n// draw star at (x,y) with inner and outer radius and n points\nfunction star(x, y, radius1, radius2, npoints) {\n  let angle = TWO_PI / npoints;\n  let halfAngle = angle / 2.0;\n  fill('gold');\n  beginShape();\n  for (let a = 0; a &lt; TWO_PI; a += angle) {\n    let sx = x + cos(a) * radius2;\n    let sy = y + sin(a) * radius2;\n    vertex(sx, sy);\n    sx = x + cos(a + halfAngle) * radius1;\n    sy = y + sin(a + halfAngle) * radius1;\n    vertex(sx, sy);\n  }\n  endShape(CLOSE);\n}\n</code></pre>"},{"location":"sims/gold-star/#key-learnings","title":"Key Learnings","text":"<ol> <li>We create a new custom JavaScript function called <code>star()</code></li> <li>We add parameters for the inner radius, outer radius and number of points</li> <li>We use the <code>beginShape()</code> and <code>endShape()</code> to surround our points on the start</li> <li>We use <code>cos()</code> and <code>sin()</code> to calculate the proper x and y points as we go around the star</li> </ol>"},{"location":"sims/gold-star/#lesson-plan-drawing-stars-with-variable-points","title":"Lesson Plan: Drawing Stars with Variable Points","text":""},{"location":"sims/gold-star/#objective","title":"Objective","text":"<p>Students will understand the geometric concepts of radius, angles, and symmetry by drawing stars programmatically.</p>"},{"location":"sims/gold-star/#grade-level","title":"Grade Level","text":"<p>9th Grade</p>"},{"location":"sims/gold-star/#subject","title":"Subject","text":"<p>Geometry</p>"},{"location":"sims/gold-star/#materials-needed","title":"Materials Needed","text":"<ul> <li>Computers with Internet access</li> <li>Projector for demonstration</li> <li>Students will need access to a web browser and provide a link to the p5.js editor. They can use the copy icon in the upper right corner of the code example above.</li> </ul>"},{"location":"sims/gold-star/#duration","title":"Duration","text":"<p>1 hour</p>"},{"location":"sims/gold-star/#activities","title":"Activities","text":""},{"location":"sims/gold-star/#introduction-5-minutes","title":"Introduction (5 minutes)","text":"<ul> <li>Discussion: Briefly discuss what students know about stars and their shapes. Introduce the concept of radius, angles, and symmetry in geometry.</li> <li>Demonstration: Show the star drawing code and explain the setup, draw functions, and the star function.</li> </ul>"},{"location":"sims/gold-star/#activity-part-1-exploring-the-code-10-minutes","title":"Activity Part 1: Exploring the Code (10 minutes)","text":"<ul> <li>Hands-On: Students will run the code and play with the points slider to see how the number of points affects the star's shape.</li> <li>Questions for Discussion: </li> <li>How does changing the number of points alter the shape of the star?</li> <li>What happens when you use different numbers of points (odd vs. even)?</li> </ul>"},{"location":"sims/gold-star/#activity-part-2-calculating-angles-15-minutes","title":"Activity Part 2: Calculating Angles (15 minutes)","text":"<ul> <li>Explanation: Explain how the angles in the star are calculated (<code>angle = TWO_PI / npoints</code>).</li> <li>Activity: Have students calculate the angles for different numbers of points and predict the shapes before testing them on the computer.</li> </ul>"},{"location":"sims/gold-star/#activity-part-3-customize-the-lab-10-minutes","title":"Activity Part 3: Customize the Lab (10 minutes)","text":"<ul> <li>Creative Task: Challenge students to modify the code to create different variations of the lab</li> <li>Add Color Sliders: Add a slider to change the fill color of the star, the border color and the border width.  Students will need to adjust the position of the sliders, labels and values. You will need to learn to use the strokeWeight function.</li> <li>Add New Radius Sliders: Add sliders for controlling the length of the inner and outer radius of the star.</li> <li>Sharing: Allow a few students to share their creations and explain the geometric concepts used.</li> <li>Use ChatGPT: Use ChatGPT to add new code and test the new code.</li> </ul>"},{"location":"sims/gold-star/#conclusion-5-minutes","title":"Conclusion (5 minutes)","text":"<ul> <li>Summary: Recap the key geometric concepts learned through the activity.</li> <li>Homework Assignment: Students can write a short reflection on what they learned about geometry from this exercise or create a small project where they use the code to explore a geometric concept.</li> </ul>"},{"location":"sims/gold-star/#assessment","title":"Assessment","text":"<ul> <li>Participation in discussions and activities.  Do they share their knowledge and their bugs?</li> <li>The ability of students to add features.</li> <li>Creativity and understanding of the concepts.</li> </ul>"},{"location":"sims/h-bridge/","title":"H-Bridge Circuit","text":"<p>An H-bridge circuit is four switches around a motor in the shape of the letter \"H\". The motor is at the center of the letter \"H\". When the upper-left and lower-right switches are closed, the motor spins one direction. When the lower-left and upper-right switches are closed, the motor spins in the opposite direction.</p> <p></p> <p>H-Bridge Demo</p> <pre><code>Generate a single p5.js sketch file.\n\nDraw an H-bridge circuit for reversing the direction of a DC motor.\n\nHave three state buttons for \"Forward\", \"Stop\" and \"Reverse\".\nPlace the positive power rail at the top of the circuit.\nPlace the negative rail at the bottom of the circuit.\nPlace the motor in the center of the H-brige ciricut.\nAnimate the motor moving clockwise for the Forward state.\nAnimate the motor going counter-clockwise for the Reverse state.\nMake the motor stopped for the Stop state.\nHave the upper left and lower right wires animate current for the Forward state.\nHave the upper right and lower left wires animate current for the Reverse state.\nTurn off all wire animation for the Stop state.\n\nCreate four knife switches.\nHave the upper left and lower right be closed for Forward.\nHave the upper right and lower left be closed for Reverse.\nHave all the switches be open for Stop.\n\nUse the following function to draw current in a wire:\n\nfunction drawAnimatedWire(x1, y1, x2, y2, speed1, state) {\n    if (state) {\n        let distance = dist(x1, y1, x2, y2);\n        let circlePos = map((millis() * speed1) % distance, 0, distance, 0, 1);\n\n        // lerp generates the percent between two values\n        let x = lerp(x1, x2, circlePos);\n        let y = lerp(y1, y2, circlePos);\n\n        stroke(0);\n        strokeWeight(lineWidth)\n        line(x1, y1, x2, y2); // Draw the wire\n\n        fill(255, 0, 0);\n        noStroke();\n        circle(x, y, 10); // Draw the moving circle (electron)\n    } else {\n        stroke(0);\n        strokeWeight(lineWidth)\n        line(x1, y1, x2, y2); // Draw the wire\n    }\n}\n</code></pre>"},{"location":"sims/h-bridge/#response","title":"Response","text":"<p>Sure! Here's a p5.js sketch file that implements the H-bridge circuit with state buttons for \"Forward,\" \"Stop,\" and \"Reverse\":</p> <pre><code>let forwardButton;\nlet stopButton;\nlet reverseButton;\n\nconst lineWidth = 2;\n\nfunction setup() {\n  createCanvas(400, 400);\n\n  forwardButton = createButton('Forward');\n  forwardButton.position(10, 10);\n  forwardButton.mousePressed(forward);\n\n  stopButton = createButton('Stop');\n  stopButton.position(90, 10);\n  stopButton.mousePressed(stop);\n\n  reverseButton = createButton('Reverse');\n  reverseButton.position(150, 10);\n  reverseButton.mousePressed(reverse);\n}\n\nfunction forward() {\n  // Code to control the H-bridge for forward motion\n}\n\nfunction stop() {\n  // Code to stop the motor\n}\n\nfunction reverse() {\n  // Code to control the H-bridge for reverse motion\n}\n\nfunction draw() {\n  background(220);\n\n  // Draw positive power rail\n  stroke(0);\n  strokeWeight(lineWidth);\n  line(40, 60, width - 40, 60);\n\n  // Draw negative power rail\n  stroke(0);\n  strokeWeight(lineWidth);\n  line(40, height - 60, width - 40, height - 60);\n\n  // Draw H-bridge circuit\n  stroke(0);\n  strokeWeight(lineWidth);\n  line(width / 2 - 40, 60, width / 2 - 40, height - 60);\n  line(width / 2 + 40, 60, width / 2 + 40, height - 60);\n  line(width / 2 - 40, height / 2, width / 2 + 40, height / 2);\n\n  // Draw motor\n  noFill();\n  stroke(0);\n  strokeWeight(lineWidth);\n  rect(width / 2 - 20, height / 2 - 20, 40, 40);\n\n  // Draw wires with current\n  let speed1 = 0.01;\n  drawAnimatedWire(40, 60, width / 2 - 40, 60, speed1, forwardButton.elt.disabled);\n  drawAnimatedWire(width / 2 + 40, 60, width - 40, 60, speed1, reverseButton.elt.disabled);\n  drawAnimatedWire(40, height - 60, width / 2 - 40, height - 60, speed1, reverseButton.elt.disabled);\n  drawAnimatedWire(width / 2 + 40, height - 60, width - 40, height - 60, speed1, forwardButton.elt.disabled);\n}\n\nfunction drawAnimatedWire(x1, y1, x2, y2, speed1, state) {\n  if (state) {\n    let distance = dist(x1, y1, x2, y2);\n    let circlePos = map((millis() * speed1) % distance, 0, distance, 0, 1);\n\n    // lerp generates the percent between two values\n    let x = lerp(x1, x2, circlePos);\n    let y = lerp(y1, y2, circlePos);\n\n    stroke(0);\n    strokeWeight(lineWidth);\n    line(x1, y1, x2, y2); // Draw the wire\n\n    fill(255, 0, 0);\n    noStroke();\n    circle(x, y, 10); // Draw the moving circle (electron)\n  } else {\n    stroke(0);\n    strokeWeight(lineWidth);\n    line(x1, y1, x2, y2); // Draw the wire\n  }\n}\n</code></pre>"},{"location":"sims/lady-bug-walk/","title":"Lady Bug Walk","text":"<p>Run the Lady Bug Walk MicroSim Edit the Lady Bug Walk MicroSim</p>"},{"location":"sims/lady-bug-walk/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/name/main.html\" height=\"400\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/larson-scanner/","title":"Larson Scanner","text":"<p>Run the Larson Scanner MicroSim</p> <p>Edit this MicroSim</p>"},{"location":"sims/larson-scanner/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how the Larson Scanner animation works.</p>"},{"location":"sims/larson-scanner/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a p5.js sketch for a simulation of a Larson Scanner.\nThe project has a row of 12 red evenly spaced horizontal\ncircles at the top of the 600x300 canvas that fade in\nand out like a Cylon robot eyes. A slider below the\ndrawing area allows a user to control the speed of\nthe animation.\n</code></pre>"},{"location":"sims/larson-scanner/#chatgpt-o1-mini-sample-response","title":"ChatGPT o1-mini Sample Response","text":"<p>Sure! Below is a complete p5.js sketch that simulates a Larson Scanner with the specifications you provided. This sketch features 12 red circles that fade in and out sequentially, mimicking the iconic Cylon robot eyes. A slider is included below the canvas to allow users to control the speed of the animation.</p>"},{"location":"sims/larson-scanner/#how-it-works","title":"How It Works:","text":"<ol> <li> <p>Setup:</p> <ul> <li>A canvas of size 600x300 is created.</li> <li>12 circles are positioned evenly across the top of the canvas.</li> <li>A slider is added below the canvas to control the animation speed.</li> </ul> </li> <li> <p>Animation Logic:</p> <ul> <li>The animation moves a \"scanner\" across the circles from left to right and then back from right to left.</li> <li>The current active circle's brightness is controlled using alpha transparency to create a fading effect.</li> <li>The speed of the scanner is adjustable via the slider, affecting how quickly the scanner moves from one circle to the next.</li> </ul> </li> <li> <p>Interactivity:</p> <ul> <li>Users can adjust the slider to make the scanner move faster or slower.</li> </ul> </li> </ol>"},{"location":"sims/larson-scanner/#complete-p5js-sketch","title":"Complete p5.js Sketch:","text":"<pre><code>let numCircles = 12;        // Total number of circles\nlet circles = [];           // Array to hold circle positions\nlet current = 0;            // Current active circle index\nlet direction = 1;          // Direction of the scanner: 1 = forward, -1 = backward\nlet speedSlider;            // Slider to control speed\nlet speed;                  // Speed value from slider\nlet lastUpdate = 0;         // Time of the last update\nlet interval = 200;         // Interval between updates in milliseconds\n\nfunction setup() {\n  createCanvas(600, 300);\n  // Calculate spacing between circles\n  let spacing = width / (numCircles + 1);\n  for (let i = 0; i &lt; numCircles; i++) {\n    let x = spacing * (i + 1);\n    let y = 50; // Positioned near the top\n    circles.push(createVector(x, y));\n  }\n\n  // Create a slider for speed control\n  // Slider range: 50 ms (fast) to 1000 ms (slow)\n  speedSlider = createSlider(50, 1000, interval, 50);\n  speedSlider.position(150, height + 20);\n  speedSlider.style('width', '300px');\n\n  // Label for the slider\n  let label = createP('Adjust Speed');\n  label.position(150, height - 10);\n  label.style('font-family', 'Arial');\n  label.style('font-size', '16px');\n}\n\nfunction draw() {\n  background(0); // Black background\n\n  // Get current speed from slider\n  speed = speedSlider.value();\n\n  // Update interval based on speed\n  interval = speed;\n\n  // Update the current active circle based on the interval\n  if (millis() - lastUpdate &gt; interval) {\n    current += direction;\n\n    // Change direction if we reach the end or beginning\n    if (current &gt;= numCircles - 1) {\n      direction = -1;\n    } else if (current &lt;= 0) {\n      direction = 1;\n    }\n\n    lastUpdate = millis();\n  }\n\n  // Draw all circles\n  for (let i = 0; i &lt; numCircles; i++) {\n    if (i === current) {\n      // Active circle: bright red\n      fill(255, 0, 0, 255);\n      ellipse(circles[i].x, circles[i].y, 30, 30);\n    } else if (i === current - direction || i === current + direction) {\n      // Adjacent circles: semi-transparent red\n      fill(255, 0, 0, 100);\n      ellipse(circles[i].x, circles[i].y, 30, 30);\n    } else {\n      // Inactive circles: dim red\n      fill(255, 0, 0, 50);\n      ellipse(circles[i].x, circles[i].y, 30, 30);\n    }\n  }\n\n  // Optional: Display current speed\n  fill(255);\n  noStroke();\n  textSize(14);\n  textAlign(CENTER);\n  text(`Speed: ${speed} ms per step`, width / 2, height - 10);\n}\n</code></pre>"},{"location":"sims/larson-scanner/#how-to-run-the-sketch","title":"How to Run the Sketch:","text":"<ol> <li> <p>Using the p5.js Web Editor:</p> </li> <li> <p>Go to the p5.js Web Editor.</p> </li> <li>Create a new sketch.</li> <li>Replace the existing code with the code provided above.</li> <li>Click the \"Play\" button to run the sketch.</li> <li> <p>Locally on Your Computer:</p> </li> <li> <p>Ensure you have the p5.js library included in your project.</p> </li> <li>Save the above code in a file named <code>sketch.js</code>.</li> <li>Create an <code>index.html</code> file and include the p5.js library and your <code>sketch.js</code>.</li> <li>Open <code>index.html</code> in your web browser to see the simulation.</li> </ol>"},{"location":"sims/larson-scanner/#customization","title":"Customization:","text":"<ul> <li>Number of Circles: You can change the <code>numCircles</code> variable to increase or decrease the number of circles in the scanner.</li> <li>Circle Size: Adjust the diameter values in the <code>ellipse</code> function calls to make the circles larger or smaller.</li> <li>Colors: Modify the <code>fill</code> colors to change the appearance of the scanner.</li> <li>Initial Speed: Change the default value in the <code>createSlider</code> function to set a different initial speed.</li> </ul> <p>Feel free to experiment with the parameters to create a Larson Scanner that fits your preferences!</p>"},{"location":"sims/larson-scanner/#references","title":"References","text":"<p>Link to Full ChatGPT Transcript</p>"},{"location":"sims/learning-graph/","title":"Concept Graph Prompt","text":"<p>Run The Learning Graph MicroSim</p> <p>Fixed Positions</p> <p>A concept graph or learning graph is a directed graph that lists all of the concepts taught in a typical course or curriculum.</p>"},{"location":"sims/learning-graph/#sample-prompt","title":"Sample Prompt","text":"<p>Prompt</p> <p>I am teaching a course to high-school teachers on how to use generative AI to create small educational simulations for a specific course or group of students.  This course is called \"Teaching with GenAI and MicroSims\".</p> <p>Please create a numbered list of the top 150 Concepts we need to teach in this course.  Have one Concept Label per line and use a Concept Label that is short so it can be viewed in a graph network.  Feel free to use abbreviations within the Concept Label.</p> <p>This list should be sorted from Fundamental Concepts first to the most advanced Concept last.</p> <p>Make sure not to duplicate Concepts.</p> <p>The course learning objectives include:</p> <ol> <li>How to create detailed high-quality generative AI prompts.</li> <li>How to generate web-based simulations using JavaScript libraries such as ChatGPT or vis.js.</li> <li>How to get ChatGPT to use templates for high-quality and consistent user interfaces.</li> <li>How to save and test simulations using tools such as the p5.js editor</li> <li>How to deploy these simulations using standards such as markdown, mkdocs and GitHub pages.</li> <li>How to get feedback from students on how effective these simulations are in the classroom.</li> <li>How to use Google Analytics to see what MicroSims are being used and how often.</li> </ol> <p>```</p>"},{"location":"sims/learning-graph/#chatgpt-o1-preview-response","title":"ChatGPT o1-preview Response","text":"<ol> <li>GenAI Basics</li> <li>MicroSim Concepts</li> <li>MicroSim Benefits</li> <li>AI Prompting Intro</li> <li>Effective Prompts</li> <li>Prompt Engineering</li> <li>High-Quality Prompts</li> <li>Avoid Ambiguous Prompts</li> <li>AI Limitations</li> <li>JS Fundamentals</li> <li>JS Variables</li> <li>JS Operators</li> <li>JS Control Structures</li> <li>JS Functions</li> <li>JS Objects &amp; Arrays</li> <li>DOM Manipulation</li> <li>Event Listeners</li> <li>vis.js Intro</li> <li>Networks with vis.js</li> <li>vis.js Visuals</li> <li>Animation in vis.js</li> <li>p5.js Intro</li> <li>Drawing in p5.js</li> <li>p5.js Animation</li> <li>Interactivity p5.js</li> <li>p5.js Editor</li> <li>Save p5.js Projects</li> <li>Test Simulations</li> <li>Debugging Techniques</li> <li>ChatGPT for Code</li> <li>ChatGPT Code Gen</li> <li>Templates in ChatGPT</li> <li>Apply UI Templates</li> <li>Consistent UI</li> <li>Save AI Code</li> <li>Git Version Control</li> <li>Using GitHub</li> <li>GitHub Pages</li> <li>Deploy Simulations</li> <li>Markdown Intro</li> <li>Writing Markdown</li> <li>mkdocs Docs</li> <li>Setup mkdocs Site</li> <li>mkdocs on GitHub</li> <li>Collect Feedback</li> <li>Feedback Forms</li> <li>Analyze Feedback</li> <li>Improve Simulations</li> <li>Google Analytics</li> <li>Link Analytics</li> <li>Interpret Usage Data</li> <li>Engagement Metrics</li> <li>Data-Driven Decisions</li> <li>Privacy in Analytics</li> <li>Ethical Student Data</li> <li>Simulation Accessibility</li> <li>Inclusive Design</li> <li>Cross-Browser Tests</li> <li>Mobile Responsive</li> <li>Multi-Device Testing</li> <li>Performance Optimize</li> <li>Minimize Load Time</li> <li>Image Optimize</li> <li>Code Minify</li> <li>Graceful Errors</li> <li>Logging &amp; Monitoring</li> <li>Security Practices</li> <li>Avoid Vulnerabilities</li> <li>Open Source Licenses</li> <li>Legal Library Use</li> <li>Attribution &amp; Licensing</li> <li>Customize Open Source</li> <li>Advanced Prompts</li> <li>System Prompts</li> <li>AI Output Variability</li> <li>Rephrase Prompts</li> <li>Chain-of-Thought</li> <li>AI Debugging</li> <li>Fine-Tune Sims</li> <li>API Integration</li> <li>Fetch API Data</li> <li>JSON Handling</li> <li>Real-Time Data</li> <li>Advanced p5.js</li> <li>p5.js 3D Graphics</li> <li>Sound in p5.js</li> <li>Advanced vis.js</li> <li>vis.js Clustering</li> <li>vis.js Hierarchy</li> <li>D3.js Intro</li> <li>vis.js vs D3.js</li> <li>Library Selection</li> <li>JS Performance</li> <li>Memory Management</li> <li>JS Event Loop</li> <li>Async JS</li> <li>Promises &amp; Async/Await</li> <li>Async Error Handling</li> <li>Modular JS</li> <li>ES6 Modules</li> <li>Babel Transpile</li> <li>Webpack Setup</li> <li>Code Bundling</li> <li>Source Maps</li> <li>NPM Packages</li> <li>Publish NPM Package</li> <li>Reusable Components</li> <li>Component Libraries</li> <li>CSS Styling</li> <li>CSS Preprocessor</li> <li>Bootstrap CSS</li> <li>Responsive Design</li> <li>CSS Media Queries</li> <li>Flexbox</li> <li>CSS Grid</li> <li>HTML Accessibility</li> <li>ARIA Roles</li> <li>Screen Reader Tests</li> <li>Write Documentation</li> <li>README Best Practices</li> <li>Code Comments</li> <li>Repo Maintenance</li> <li>GitHub Collaboration</li> <li>Pull Requests</li> <li>Issue Tracking</li> <li>Continuous Integration</li> <li>GitHub Actions CI</li> <li>Automated Testing</li> <li>Jest Unit Tests</li> <li>Integration Tests</li> <li>Cypress E2E Tests</li> <li>Deploy to Netlify</li> <li>Deploy to Vercel</li> <li>Env Variables</li> <li>Secure API Keys</li> <li>OAuth API Access</li> <li>GDPR Compliance</li> <li>Data Protection</li> <li>AI Ethics Edu</li> <li>Avoid AI Bias</li> <li>Promote Fairness</li> <li>Handle Sensitive Topics</li> <li>AI Transparency</li> <li>Teach AI to Students</li> <li>Student Data Privacy</li> <li>FERPA Compliance</li> <li>Online Safety</li> <li>Digital Footprint</li> <li>Future GenAI Edu</li> <li>Lifelong EdTech Learning</li> </ol>"},{"location":"sims/learning-graph/#concept-dependency-prompt","title":"Concept Dependency Prompt","text":"<p>```linenums Our next step is to create a fully connected dependency graph. In this step, for each concept on this list, create a new list of other concepts on which it depends.  If a concept depends on a specific concept that is not listed, then we will need to add it as a new concept. This will help us determine the teaching order of the concepts.</p> <p>Return the new list as a CSV file using the following format. The first column is a numeric concept ID you assign,  the second column is the concept name, and the third column is a pipe-delimited list of the concept IDs that the concept depends upon.</p> <p>Check your results to make sure that all concepts are connected to at least one other concept.</p>"},{"location":"sims/learning-graph-v1/02-concept-enumeration/","title":"02 concept enumeration","text":"<pre><code>I would like you to create a list of all the key concept names in this course.\nPlease generate  a numbered list of the 150 most essential concepts\nin an 10-week course on the Creating and Customizing MicroSims course\nwe have described\nabove. For each concept, just return the concept name.\nUse acronyms and abbreviations when appropriate.  They will be used\nto label a network graph.\nMake sure that the concepts are distinct and are not duplicates.\n\nStart with the most basic foundational concepts that are prerequisites\nfor the course, and then proceed from the basic to the most complex\nconcepts. Return the numbered list just one concept per line.\nChatGPT\n</code></pre>"},{"location":"sims/learning-graph-v1/02-concept-enumeration/#response","title":"Response","text":"<ol> <li>Computer Literacy</li> <li>Keyboard Proficiency</li> <li>Command-Line Interface (CLI)</li> <li>Basic Programming Concepts</li> <li>Text Editors</li> <li>Web Browsers</li> <li>Introduction to Git</li> <li>GitHub Fundamentals</li> <li>Basic HTML</li> <li>Basic JavaScript</li> <li>Introduction to Generative AI</li> <li>AI in Education</li> <li>MicroSim Definition</li> <li>Role of MicroSims in Learning</li> <li>Examples of MicroSims</li> <li>Interactive Simulations</li> <li>Visualization Techniques</li> <li>User Interface (UI) Basics</li> <li>Processing Libraries Overview</li> <li>Introduction to p5.js</li> <li>Setting Up p5.js Environment</li> <li>p5.js Online Editor</li> <li>p5.js Syntax</li> <li>Variables in p5.js</li> <li>Functions in p5.js</li> <li>Drawing Shapes in p5.js</li> <li>Coordinate System in p5.js</li> <li>Colors in p5.js</li> <li>Lines and Curves</li> <li>Text Rendering in p5.js</li> <li>Images in p5.js</li> <li>Animation Basics</li> <li>Loops in p5.js</li> <li>Conditionals in p5.js</li> <li>Arrays in p5.js</li> <li>Objects in p5.js</li> <li>Events in p5.js</li> <li>Mouse Interaction</li> <li>Keyboard Interaction</li> <li>Setup Function</li> <li>Draw Function</li> <li>Frame Rate Control</li> <li>Canvas Size Configuration</li> <li>Crafting AI Prompts</li> <li>Prompt Engineering</li> <li>Effective Communication with AI</li> <li>Templates for MicroSims</li> <li>AI-Generated Code</li> <li>Code Quality Assurance</li> <li>Debugging Techniques</li> <li>Error Handling</li> <li>Testing MicroSims</li> <li>Refining MicroSims</li> <li>User Experience (UX) Design</li> <li>Consistent UI Design</li> <li>Feedback Loops with AI</li> <li>Correcting AI Errors</li> <li>Improving AI Output</li> <li>p5.js Libraries</li> <li>External Libraries Integration</li> <li>Modular Code Development</li> <li>Code Reusability</li> <li>Version Control with Git</li> <li>Branching Strategies in Git</li> <li>Merging Conflicts Resolution</li> <li>Collaborating on GitHub</li> <li>Publishing to GitHub Pages</li> <li>Hosting MicroSims Online</li> <li>Custom Domains with GitHub Pages</li> <li>HTML Integration with p5.js</li> <li>CSS Basics</li> <li>Styling MicroSims</li> <li>Responsive Design Principles</li> <li>Mobile Compatibility</li> <li>Accessibility in Design</li> <li>Advanced p5.js Features</li> <li>Sound Integration</li> <li>Audio Playback in p5.js</li> <li>Video Embedding in p5.js</li> <li>Data Visualization Techniques</li> <li>Loading Data Files</li> <li>JSON Handling in p5.js</li> <li>APIs Integration</li> <li>Real-Time Data Processing</li> <li>Complex Animations</li> <li>Physics Simulations</li> <li>Particle Systems</li> <li>3D Graphics in p5.js</li> <li>WebGL Usage in p5.js</li> <li>Shader Programming Basics</li> <li>DOM Manipulation with p5.js</li> <li>Touch Event Handling</li> <li>Multi-Touch Support</li> <li>Function Libraries Creation</li> <li>Code Optimization Strategies</li> <li>Performance Tuning</li> <li>Memory Management</li> <li>Debugging Tools</li> <li>Console Logging Techniques</li> <li>Interpreting Error Messages</li> <li>Breakpoints Usage</li> <li>Code Profiling</li> <li>Code Refactoring</li> <li>Coding Best Practices</li> <li>Code Documentation</li> <li>Commenting Standards</li> <li>Code Readability</li> <li>Style Guidelines</li> <li>Naming Conventions</li> <li>Object-Oriented Programming (OOP)</li> <li>Classes in p5.js</li> <li>Inheritance Concepts</li> <li>Polymorphism Principles</li> <li>Encapsulation Techniques</li> <li>Modular Design Patterns</li> <li>Design Patterns Overview</li> <li>MVC Architecture</li> <li>Software Development Life Cycle (SDLC)</li> <li>Agile Methodology</li> <li>Project Management Tools</li> <li>Time Management Skills</li> <li>Group Collaboration Techniques</li> <li>Peer Review Processes</li> <li>Version Control Workflows</li> <li>Pull Requests in GitHub</li> <li>Code Reviews Best Practices</li> <li>Issue Tracking Systems</li> <li>Milestones in GitHub</li> <li>GitHub Actions</li> <li>Continuous Integration (CI)</li> <li>Continuous Deployment (CD)</li> <li>Web Hosting Concepts</li> <li>DNS Basics</li> <li>SSL Certificates</li> <li>HTTPS Protocol</li> <li>Web Application Security</li> <li>Cross-Site Scripting (XSS) Prevention</li> <li>Input Validation Techniques</li> <li>Authentication Methods</li> <li>Authorization Concepts</li> <li>Data Privacy Laws</li> <li>User Data Handling</li> <li>Ethical Considerations in AI</li> <li>AI Bias Awareness</li> <li>Responsible AI Use</li> <li>Future Trends in AI</li> <li>Emerging Technologies in Education</li> <li>Lifelong Learning Strategies</li> <li>Career Opportunities in AI</li> <li>The Future of MicroSims</li> </ol> <p>o1</p>"},{"location":"sims/learning-graph-v1/03-concept-dependency/","title":"Concept Dependency","text":""},{"location":"sims/learning-graph-v1/03-concept-dependency/#prompt","title":"Prompt","text":"<pre><code>Our next step is to create a fully connected\ndependency graph for learning these Concepts.\nIn this step, for each Concept on this list, create a new\nlist of other concepts within this list on which it depends.\n\nIf a concept depends on a specific concept that is not listed,\nthen we will need to add it as a new concept.\nThis will help us determine the teaching order of the Concepts.\n\nReturn the new list as a CSV file using the following format:\n\nThe first column in the CSV file is a numeric concept ID\nyou assigned in the list above.  The second column is\nthe concept name.\nThe third column is a pipe-delimited list of the Concept\nIDs that the concept depends upon.\n\nCheck your results to make sure that all concepts\nare connected to at least one other concept.\n\nIf a concept is a Foundational concept,\nthen there are no dependency concepts.\n</code></pre>"},{"location":"sims/learning-graph-v1/03-concept-dependency/#chatgpt-o1-preview-response","title":"ChatGPT o1-preview Response","text":"<pre><code>1,Computer Literacy,\n2,Keyboard Proficiency,1\n3,Command-Line Interface (CLI),1|2\n4,Basic Programming Concepts,1|2\n5,Text Editors,1|2\n6,Web Browsers,1|2\n7,Introduction to Git,3|4|5\n8,GitHub Fundamentals,7\n9,Basic HTML,1|2|6\n10,Basic JavaScript,4|9\n11,Introduction to Generative AI,1|2\n12,AI in Education,11\n13,MicroSim Definition,11|12\n14,Role of MicroSims in Learning,13\n15,Examples of MicroSims,13\n16,Interactive Simulations,4|13\n17,Visualization Techniques,16\n18,User Interface (UI) Basics,1|2\n19,Processing Libraries Overview,10|16\n20,Introduction to p5.js,19\n21,Setting Up p5.js Environment,20\n22,p5.js Online Editor,21\n23,p5.js Syntax,20\n24,Variables in p5.js,23\n25,Functions in p5.js,23\n26,Drawing Shapes in p5.js,23\n27,Coordinate System in p5.js,26\n28,Colors in p5.js,26\n29,Lines and Curves,26\n30,Text Rendering in p5.js,23\n31,Images in p5.js,23\n32,Animation Basics,26\n33,Loops in p5.js,24|25\n34,Conditionals in p5.js,24|25\n35,Arrays in p5.js,24\n36,Objects in p5.js,24|25\n37,Events in p5.js,25\n38,Mouse Interaction,37\n39,Keyboard Interaction,37\n40,Setup Function,23\n41,Draw Function,23\n42,Frame Rate Control,32|41\n43,Canvas Size Configuration,40\n44,Crafting AI Prompts,11\n45,Prompt Engineering,44\n46,Effective Communication with AI,44\n47,Templates for MicroSims,23|45\n48,AI-Generated Code,45\n49,Code Quality Assurance,48\n50,Debugging Techniques,48|49\n51,Error Handling,50\n52,Testing MicroSims,50|51\n53,Refining MicroSims,52\n54,User Experience (UX) Design,18|17\n55,Consistent UI Design,54\n56,Feedback Loops with AI,46\n57,Correcting AI Errors,50|56\n58,Improving AI Output,57\n59,p5.js Libraries,19|20\n60,External Libraries Integration,59\n61,Modular Code Development,35|36\n62,Code Reusability,61\n63,Version Control with Git,7\n64,Branching Strategies in Git,63\n65,Merging Conflicts Resolution,64\n66,Collaborating on GitHub,8|65\n67,Publishing to GitHub Pages,66\n68,Hosting MicroSims Online,67\n69,Custom Domains with GitHub Pages,68\n70,HTML Integration with p5.js,9|23\n71,CSS Basics,9\n72,Styling MicroSims,70|71\n73,Responsive Design Principles,72\n74,Mobile Compatibility,73\n75,Accessibility in Design,73\n76,Advanced p5.js Features,59\n77,Sound Integration,76\n78,Audio Playback in p5.js,77\n79,Video Embedding in p5.js,76\n80,Data Visualization Techniques,17|76\n81,Loading Data Files,80\n82,JSON Handling in p5.js,81\n83,APIs Integration,82\n84,Real-Time Data Processing,83\n85,Complex Animations,32|76\n86,Physics Simulations,85\n87,Particle Systems,85\n88,3D Graphics in p5.js,76\n89,WebGL Usage in p5.js,88\n90,Shader Programming Basics,89\n91,DOM Manipulation with p5.js,70\n92,Touch Event Handling,37\n93,Multi-Touch Support,92\n94,Function Libraries Creation,36|61\n95,Code Optimization Strategies,62|61\n96,Performance Tuning,95\n97,Memory Management,96\n98,Debugging Tools,50\n99,Console Logging Techniques,50\n100,Interpreting Error Messages,50|51\n101,Breakpoints Usage,98\n102,Code Profiling,96\n103,Code Refactoring,62\n104,Coding Best Practices,103\n105,Code Documentation,104\n106,Commenting Standards,104\n107,Code Readability,104\n108,Style Guidelines,104\n109,Naming Conventions,104\n110,Object-Oriented Programming (OOP),36\n111,Classes in p5.js,110\n112,Inheritance Concepts,110\n113,Polymorphism Principles,110\n114,Encapsulation Techniques,110\n115,Modular Design Patterns,61|110\n116,Design Patterns Overview,115\n117,MVC Architecture,116\n118,Software Development Life Cycle (SDLC),104\n119,Agile Methodology,118\n120,Project Management Tools,119\n121,Time Management Skills,119\n122,Group Collaboration Techniques,120\n123,Peer Review Processes,122\n124,Version Control Workflows,63\n125,Pull Requests in GitHub,66\n126,Code Reviews Best Practices,123|125\n127,Issue Tracking Systems,120\n128,Milestones in GitHub,66\n129,GitHub Actions,66\n130,Continuous Integration (CI),129\n131,Continuous Deployment (CD),130\n132,Web Hosting Concepts,67\n133,DNS Basics,132\n134,SSL Certificates,132\n135,HTTPS Protocol,134\n136,Web Application Security,135\n137,Cross-Site Scripting (XSS) Prevention,136\n138,Input Validation Techniques,136\n139,Authentication Methods,136\n140,Authorization Concepts,136\n141,Data Privacy Laws,136\n142,User Data Handling,141\n143,Ethical Considerations in AI,11\n144,AI Bias Awareness,143\n145,Responsible AI Use,144\n146,Future Trends in AI,145\n147,Emerging Technologies in Education,146\n148,Lifelong Learning Strategies,147\n149,Career Opportunities in AI,148\n150,The Future of MicroSims,13|146\n</code></pre>"},{"location":"sims/learning-graph-v1/04-taxonomy/","title":"Concept Taxonomy","text":"<pre><code>Next, let's Create a taxonomy to classify these concepts.\nFor the list of concepts, please suggest a taxonomy\nof up to ten categories on how to classify each concept.\n\nFor example:\n\n1. Foundational Concepts\n2. Why MicroSims\n3. HTML,CSS and JavaScript\n4. Prompt Design\n5. P5.js Basics\n\netc.\n\nNote tha the number in this list will be called a CategoryID\n\nFirst, Create the list of categories.\n\nThen return a new version of the CSV file with one new column.  This column contains the CategoryID for each concept.\n</code></pre>"},{"location":"sims/learning-graph-v1/04-taxonomy/#chatgpt-response","title":"ChatGPT Response","text":"<ol> <li>Foundational Concepts**</li> <li>Introduction to MicroSims and AI in Education**</li> <li>p5.js Basics</li> <li>Advanced p5.js Features</li> <li>AI Prompt Engineering and Interaction</li> <li>Version Control and GitHub</li> <li>Web Development (HTML, CSS, JavaScript)</li> <li>Software Development Practices</li> <li>Future Trends and Ethical Considerations</li> <li>Deployment and Hosting</li> </ol>"},{"location":"sims/least-squares/","title":"Least Squares","text":"<p>Run the Least Squares MicroSim Edit the Least Squares MicroSim</p>"},{"location":"sims/least-squares/#lesson-plan-for-high-school-algebra","title":"Lesson Plan for High School Algebra","text":"<p>Linear Functions: Understanding Slope and Intercept</p> <p>Duration: 50 minutes</p> <p>Grade Level: 9-10</p> <p>Subject: Algebra 1</p>"},{"location":"sims/least-squares/#learning-objectives","title":"Learning Objectives","text":"<p>By the end of this lesson, students will be able to:</p> <ul> <li>Define slope as a rate of change</li> <li>Explain the meaning of y-intercept in a linear function</li> <li>Identify how changes in slope and intercept affect the graph of a line</li> <li>Use an interactive visualization to explore linear functions</li> <li>Solve real-world problems involving slope and intercept</li> </ul>"},{"location":"sims/least-squares/#materials-needed","title":"Materials Needed","text":"<ul> <li>Interactive Slope-Intercept Visualization (p5.js application)</li> <li>Student devices (computers, tablets, or smartphones)</li> <li>Guided worksheet (printed or digital)</li> <li>Whiteboard/projector</li> </ul>"},{"location":"sims/least-squares/#prerequisite-knowledge","title":"Prerequisite Knowledge","text":"<ul> <li>Basic understanding of coordinate plane</li> <li>Ability to plot points on a graph</li> <li>Familiarity with the equation y = mx + b</li> </ul>"},{"location":"sims/least-squares/#lesson-outline","title":"Lesson Outline","text":""},{"location":"sims/least-squares/#1-introduction-5-minutes","title":"1. Introduction (5 minutes)","text":"<ul> <li>Begin with a real-world scenario: \"If you earn $15 per hour at your job, how would you calculate your total earnings?\"</li> <li>Discuss how the relationship between hours worked and money earned forms a linear relationship</li> <li>Introduce the lesson focus: understanding how slope and intercept affect linear functions</li> </ul>"},{"location":"sims/least-squares/#2-review-of-key-concepts-10-minutes","title":"2. Review of Key Concepts (10 minutes)","text":"<ul> <li>Review the slope-intercept form of a line: y = mx + b</li> <li>Define slope (m) as the rate of change (rise/run)</li> <li>Define y-intercept (b) as the point where the line crosses the y-axis (0,b)</li> <li>Demonstrate examples on the board with different values for m and b</li> </ul>"},{"location":"sims/least-squares/#3-interactive-exploration-15-minutes","title":"3. Interactive Exploration (15 minutes)","text":"<ul> <li>Introduce the Slope-Intercept Visualization tool</li> <li>Demonstrate how to use the sliders to change slope and intercept values</li> <li>Explain the visual elements:<ul> <li>Green points represent actual data points</li> <li>Purple points show where the line would predict those values</li> <li>Colored squares show the \"error\" or difference between actual and predicted points</li> </ul> </li> <li>Guided exploration:<ol> <li>What happens when the slope increases? Decreases? Becomes negative?</li> <li>What happens when the y-intercept changes?</li> <li>Can you find values that minimize the differences between actual and predicted points?</li> </ol> </li> </ul>"},{"location":"sims/least-squares/#4-pair-work-10-minutes","title":"4. Pair Work (10 minutes)","text":"<ul> <li>Students work in pairs using the visualization tool</li> <li>Challenge: Find the linear function that best fits the green data points</li> <li>Each pair should record their \"best fit\" values for slope and intercept</li> <li>Discuss strategy: How can you tell when you've found a good fit?</li> </ul>"},{"location":"sims/least-squares/#5-connection-to-real-world-applications-5-minutes","title":"5. Connection to Real-World Applications (5 minutes)","text":"<p>Discuss how the slope-intercept model applies to:</p> <ul> <li>Economics: price vs. quantity relationships</li> <li>Physics: distance vs. time in constant velocity</li> <li>Business: fixed costs (y-intercept) and variable costs (slope)</li> </ul> <p>Show how the colored squares relate to \"error\" in predictions</p>"},{"location":"sims/least-squares/#6-closure-and-assessment-5-minutes","title":"6. Closure and Assessment (5 minutes)","text":"<ul> <li>Quick check for understanding:<ul> <li>\"If a line has a slope of 2 and a y-intercept of -3, what is its equation?\"</li> <li>\"If a line has a negative slope, what does that tell us about the relationship?\"</li> </ul> </li> <li>Exit ticket: Students write one insight they gained from using the visualization</li> </ul>"},{"location":"sims/least-squares/#extension-activities","title":"Extension Activities","text":"<ul> <li>Challenge students to create their own set of points and find the best-fitting line</li> <li>Introduce the concept of \"least squares regression\" as a mathematical way to find the best fit</li> <li>Connect to data science concepts: predictions, error measurements, and model accuracy</li> </ul>"},{"location":"sims/least-squares/#differentiation","title":"Differentiation","text":"<ul> <li>Support: Provide a step-by-step guide for using the visualization tool</li> <li>Extension: Ask advanced students to modify the code to add new features or data points</li> </ul>"},{"location":"sims/least-squares/#assessment","title":"Assessment","text":"<ul> <li>Formative: Observation during interactive exploration and pair work</li> <li>Summative: Exit ticket responses and follow-up homework assignment</li> </ul>"},{"location":"sims/least-squares/#homework","title":"Homework","text":"<ul> <li>Complete practice problems involving writing equations in slope-intercept form</li> <li>Find a real-world example where a linear relationship exists and identify what the slope and intercept represent in that context</li> </ul>"},{"location":"sims/least-squares/#follow-up-lesson-ideas","title":"Follow-Up Lesson Ideas","text":"<ul> <li>Comparing linear vs. non-linear relationships</li> <li>Introduction to systems of linear equations</li> <li>Linear regression with larger datasets</li> </ul>"},{"location":"sims/least-squares/#lesson-plan-focusing-on-prediction-of-future-events","title":"Lesson Plan focusing on Prediction of Future Events","text":""},{"location":"sims/least-squares/#learning-objectives_1","title":"Learning Objectives","text":"<p>By the end of this lesson, students will be able to: - Define slope as a rate of change - Explain the meaning of y-intercept in a linear function - Identify how changes in slope and intercept affect the graph of a line - Use an interactive visualization to explore linear functions - Use a linear model to make predictions for new x-values - Evaluate the reliability of predictions using a linear model - Solve real-world problems involving slope and intercept</p>"},{"location":"sims/least-squares/#materials-needed_1","title":"Materials Needed","text":"<ul> <li>Interactive Slope-Intercept Visualization (p5.js application)</li> <li>Student devices (computers, tablets, or smartphones)</li> <li>Guided worksheet (printed or digital)</li> <li>Whiteboard/projector</li> </ul>"},{"location":"sims/least-squares/#prerequisite-knowledge_1","title":"Prerequisite Knowledge","text":"<ul> <li>Basic understanding of coordinate plane</li> <li>Ability to plot points on a graph</li> <li>Familiarity with the equation y = mx + b</li> </ul>"},{"location":"sims/least-squares/#lesson-outline_1","title":"Lesson Outline","text":""},{"location":"sims/least-squares/#1-introduction-5-minutes_1","title":"1. Introduction (5 minutes)","text":"<ul> <li>Begin with a real-world scenario: \"If you earn $15 per hour at your job, how would you calculate your total earnings?\"</li> <li>Discuss how the relationship between hours worked and money earned forms a linear relationship</li> <li>Introduce the lesson focus: understanding how slope and intercept affect linear functions</li> </ul>"},{"location":"sims/least-squares/#2-review-of-key-concepts-10-minutes_1","title":"2. Review of Key Concepts (10 minutes)","text":"<ul> <li>Review the slope-intercept form of a line: y = mx + b</li> <li>Define slope (m) as the rate of change (rise/run)</li> <li>Define y-intercept (b) as the point where the line crosses the y-axis (0,b)</li> <li>Demonstrate examples on the board with different values for m and b</li> </ul>"},{"location":"sims/least-squares/#3-interactive-exploration-15-minutes_1","title":"3. Interactive Exploration (15 minutes)","text":"<ul> <li>Introduce the Slope-Intercept Visualization tool</li> <li>Demonstrate how to use the sliders to change slope and intercept values</li> <li>Explain the visual elements:</li> <li>Green points represent actual data points</li> <li>Purple points show where the line would predict those values</li> <li>Colored squares show the \"error\" or difference between actual and predicted points</li> <li>Guided exploration:</li> <li>What happens when the slope increases? Decreases? Becomes negative?</li> <li>What happens when the y-intercept changes?</li> <li>Can you find values that minimize the differences between actual and predicted points?</li> </ul>"},{"location":"sims/least-squares/#4-pair-work-10-minutes_1","title":"4. Pair Work (10 minutes)","text":"<ul> <li>Students work in pairs using the visualization tool</li> <li>Challenge: Find the linear function that best fits the green data points</li> <li>Each pair should record their \"best fit\" values for slope and intercept</li> <li>Discuss strategy: How can you tell when you've found a good fit?</li> </ul>"},{"location":"sims/least-squares/#5-prediction-and-real-world-applications-10-minutes","title":"5. Prediction and Real-World Applications (10 minutes)","text":"<ul> <li>Discuss how the slope-intercept model applies to:</li> <li>Economics: price vs. quantity relationships</li> <li>Physics: distance vs. time in constant velocity</li> <li>Business: fixed costs (y-intercept) and variable costs (slope)</li> <li>Show how the colored squares relate to \"error\" in predictions</li> <li>Prediction activity:</li> <li>Given our current \"best fit\" line with slope m and intercept b, what would be the predicted y-value for:<ol> <li>x = 250 (a value within our current data range)</li> <li>x = 600 (a value outside our current data range)</li> </ol> </li> <li>Discuss the concept of interpolation vs. extrapolation</li> <li>Question: \"How confident are we in these predictions and why?\"</li> <li>Question: \"What factors might affect the accuracy of our predictions?\"</li> </ul>"},{"location":"sims/least-squares/#6-closure-and-assessment-5-minutes_1","title":"6. Closure and Assessment (5 minutes)","text":"<ul> <li>Quick check for understanding: </li> <li>\"If a line has a slope of 2 and a y-intercept of -3, what is its equation?\"</li> <li>\"If a line has a negative slope, what does that tell us about the relationship?\"</li> <li>\"Using the equation y = 0.5x + 25, predict the y-value when x = 120\"</li> <li>\"How would you use our linear model to predict a new value not shown on the graph?\"</li> <li>Exit ticket: Students write one insight they gained about using linear models for prediction</li> </ul>"},{"location":"sims/least-squares/#extension-activities_1","title":"Extension Activities","text":"<ul> <li>Challenge students to create their own set of points and find the best-fitting line</li> <li>Introduce the concept of \"least squares regression\" as a mathematical way to find the best fit</li> <li>Connect to data science concepts: predictions, error measurements, and model accuracy</li> </ul>"},{"location":"sims/least-squares/#differentiation_1","title":"Differentiation","text":"<ul> <li>Support: Provide a step-by-step guide for using the visualization tool</li> <li>Extension: Ask advanced students to modify the code to add new features or data points</li> </ul>"},{"location":"sims/least-squares/#assessment_1","title":"Assessment","text":"<ul> <li>Formative: Observation during interactive exploration and pair work</li> <li>Summative: Exit ticket responses and follow-up homework assignment</li> </ul>"},{"location":"sims/least-squares/#homework_1","title":"Homework","text":"<ul> <li>Complete practice problems involving writing equations in slope-intercept form</li> <li>Find a real-world example where a linear relationship exists and identify what the slope and intercept represent in that context</li> <li>Prediction challenge: Given the linear model y = 1.5x + 10:</li> <li>Predict values for x = 50, x = 100, and x = 150</li> <li>If you measured y = 85, what would be the corresponding x value?</li> <li>Create a real-world scenario where this model might be useful, and explain what the slope and intercept represent</li> <li>Explain a situation where this model might break down or become unreliable for predictions</li> </ul>"},{"location":"sims/least-squares/#follow-up-lesson-ideas_1","title":"Follow-Up Lesson Ideas","text":"<ul> <li>Comparing linear vs. non-linear relationships</li> <li>Introduction to systems of linear equations</li> <li>Linear regression with larger datasets</li> </ul>"},{"location":"sims/lissajous-figures/","title":"Lissajous Figures","text":"<p>Run the Lissajous MicroSim</p> <p>Edit the MicroSim with the p5.js Editor</p>"},{"location":"sims/lissajous-figures/#prompt","title":"Prompt","text":"<pre><code>Create a p5.js animation of Lissajous figures.\nMake one slider control the x-axis and one\nslider control the y-axis.\nDraw the figure on an aliceblue background.\n</code></pre>"},{"location":"sims/lissajous-figures/#chatgpt-o1-mini-response","title":"ChatGPT o1-mini Response","text":"<p>Sure! Below is a p5.js sketch that animates Lissajous figures with two sliders controlling the frequencies of the x-axis and y-axis respectively.</p>"},{"location":"sims/lissajous-figures/#lissajous-figures-overview","title":"Lissajous Figures Overview","text":"<p>Lissajous figures are complex harmonic motion patterns formed by combining two perpendicular oscillations. They are defined by the parametric equations:</p> \\[ \\begin{cases}    x(t) = A \\sin(a t + \\delta) \\\\\\\\    y(t) = B \\sin(b t) \\end{cases} \\] <p>where:</p> <ul> <li>A, B: Amplitudes in the x and y directions.</li> <li>a, b: Frequencies in the x and y directions.</li> <li>\u03b4: Phase shift between the two oscillations.</li> </ul> <p>In this sketch:</p> <ul> <li>Slider 1 controls the frequency <code>a</code> of the x-axis.</li> <li>Slider 2 controls the frequency <code>b</code> of the y-axis.</li> </ul>"},{"location":"sims/lissajous-figures/#setting-up-the-environment","title":"Setting Up the Environment","text":"<p>To run this sketch:</p> <ol> <li>Visit the p5.js online editor.</li> <li>Create a new sketch.</li> <li>Replace the existing code with the code provided below.</li> <li>Click the play button to see the animation.</li> </ol>"},{"location":"sims/lissajous-figures/#p5js-code","title":"p5.js Code","text":"<pre><code>let sliderXFreq, sliderYFreq;\nlet xFreq = 3;\nlet yFreq = 2;\nlet phase = 0;\nlet phaseSpeed = 0.02;\n\nfunction setup() {\n  createCanvas(600, 600);\n  background('aliceblue');\n\n  // Create sliders\n  createP('X-axis Frequency (a):');\n  sliderXFreq = createSlider(1, 10, xFreq, 1);\n  sliderXFreq.style('width', '580px');\n\n  createP('Y-axis Frequency (b):');\n  sliderYFreq = createSlider(1, 10, yFreq, 1);\n  sliderYFreq.style('width', '580px');\n\n  // Set drawing parameters\n  strokeWeight(2);\n  noFill();\n}\n\nfunction draw() {\n  background(255);\n\n  // Update frequencies from sliders\n  xFreq = sliderXFreq.value();\n  yFreq = sliderYFreq.value();\n\n  // Parameters for Lissajous\n  let A = width / 3;\n  let B = height / 3;\n  let delta = phase;\n\n  translate(width / 2, height / 2);\n\n  stroke(0, 100, 200);\n\n  beginShape();\n  for (let t = 0; t &lt; TWO_PI * 2; t += 0.01) {\n    let x = A * sin(xFreq * t + delta);\n    let y = B * sin(yFreq * t);\n    vertex(x, y);\n  }\n  endShape();\n\n  // Increment phase for animation\n  phase += phaseSpeed;\n}\n</code></pre>"},{"location":"sims/lissajous-figures/#explanation-of-the-code","title":"Explanation of the Code","text":"<ol> <li> <p>Variables Declaration:</p> </li> <li> <p><code>sliderXFreq</code> and <code>sliderYFreq</code>: Slider elements controlling the frequencies.</p> </li> <li><code>xFreq</code> and <code>yFreq</code>: Current frequencies for x and y axes.</li> <li><code>phase</code>: Phase shift to animate the figure.</li> <li> <p><code>phaseSpeed</code>: Speed at which the phase shifts over time.</p> </li> <li> <p><code>setup()</code> Function:</p> </li> <li> <p>Initializes the canvas.</p> </li> <li>Creates two sliders for controlling the x and y frequencies, each ranging from 1 to 10 with an initial value.</li> <li> <p>Sets the stroke weight and disables fill for drawing the Lissajous figure.</p> </li> <li> <p><code>draw()</code> Function:</p> </li> <li> <p>Clears the background each frame to redraw the figure.</p> </li> <li>Retrieves the current values from the sliders to update <code>xFreq</code> and <code>yFreq</code>.</li> <li>Defines amplitudes <code>A</code> and <code>B</code> based on canvas size.</li> <li>Translates the origin to the center of the canvas.</li> <li>Begins a new shape and iterates through values of <code>t</code> to plot the Lissajous figure using the parametric equations.</li> <li>Increments the <code>phase</code> to animate the figure over time.</li> </ol>"},{"location":"sims/lissajous-figures/#customization","title":"Customization","text":"<ul> <li>Amplitude Adjustment: You can add sliders to control the amplitudes <code>A</code> and <code>B</code> if desired.</li> <li>Phase Control: Introduce another slider to adjust the phase shift <code>delta</code> manually.</li> <li>Colors and Styles: Modify <code>stroke()</code> and <code>strokeWeight()</code> to change the appearance of the figure.</li> <li>Resolution: Adjust the increment in the <code>for</code> loop (<code>t += 0.01</code>) for smoother or faster rendering.</li> </ul>"},{"location":"sims/lissajous-figures/#live-demo","title":"Live Demo","text":"<p>For a live demo, you can copy the above code into the p5.js online editor and see the animation in action. Adjust the sliders to explore different Lissajous patterns!</p>"},{"location":"sims/logic-gates/","title":"Logic Gates","text":"<p>In this example, we will generate a graphical simulation of Boolean logic gates. This example shows how both \"AND\" and \"OR\" gates work.  You can easily change the prompt to perform other operations such as \"NOT\", \"NAND\" and \"NOR\".</p> <p>You will note that we are explicit on the horizontal line placement location.  Generative AI is not good at doing precise layout.</p> <p>Prompt:</p> <pre><code>Create a single p5.js sketch using a 400x400 canvas.  \nThe sketch is a simulation of two simple logic gates, one \"AND\" and one \"OR\".\nThere are two input wires on the left.  \nLabel the inputs \"A\" and \"B\" using size 16 black text.\nDraw input A as a horizontal line at y=50.\nDraw input B as a horizontal line at y=150.\nHave both input wires connect to both the \"AND\" and \"OR\" logic gates.  \nThe top gate is a Boolean \"AND\" operation.  \nThe bottom gate is a Boolean an \"OR\" operation.\nAdd two input toggle buttons on the left side to control the state of the inputs.\nInitialize the initial states of the inputs to be off. \nWhen a wire is high, draw it in red.  \nWhen a wire is at ground, draw it in black.\nPlace a label \"AND\" in size 16 point test on the \"AND\" gate.\nPlace a label \"OR\" in size 16 point text over the \"AND\" gate.\n</code></pre> <p>Link to Simulation Demo</p>"},{"location":"sims/logic-gates/#sample-code","title":"Sample Code","text":"<pre><code>let inputA = false;\nlet inputB = false;\nlet buttonA, buttonB;\n\nfunction setup() {\n  createCanvas(400, 400);\n\n  // Create input buttons for A and B\n  buttonA = createButton('Toggle A');\n  buttonA.position(10, 50);\n  buttonA.mousePressed(toggleA);\n\n  buttonB = createButton('Toggle B');\n  buttonB.position(10, 150);\n  buttonB.mousePressed(toggleB);\n}\n\nfunction draw() {\n  background(220);\n  textSize(24)\n\n  // Draw the labels\n  strokeWeight(0);\n  fill('black');\n  text('A', 30, 50);\n  text('B', 30, 150);\n\n\n  // Draw input wires\n  strokeWeight(5)\n  stroke(inputA ? 'red' : 'black');\n  line(75, 50, 150, 50);\n  line(75, 50, 150, 150);\n  stroke(inputB ? 'red' : 'black');\n  line(75, 150, 150, 150);\n  line(75, 150, 150, 50);\n\n  // Draw AND gate\n  fill(255);\n  stroke('black')\n  beginShape();\n  vertex(150, 20);\n  vertex(200, 20);\n  vertex(220, 50);\n  vertex(200, 80);\n  vertex(150, 80);\n  endShape(CLOSE);\n\n  strokeWeight(0);\n  fill('black');\n  textSize(24)\n  text('AND', 155, 60);\n\n  // Draw OR gate\n  fill(255);\n  strokeWeight(5);\n  stroke('black')\n  beginShape();\n  vertex(150, 120);\n  vertex(200, 120);\n  vertex(220, 150);\n  vertex(200, 180);\n  vertex(150, 180);\n  endShape(CLOSE);\n\n  strokeWeight(0);\n  fill('black');\n  text('OR', 155, 160);\n</code></pre>"},{"location":"sims/maze-gen/","title":"Maze Generator","text":"<p>Maze Generator Demo</p>"},{"location":"sims/maze-solver/","title":"Maze Solver","text":"<p>Run the Maze Solver MicroSim Edit this MicroSim</p>"},{"location":"sims/maze-solver/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/maze-solver/main.html\" \n   width=\"400px\" height=\"470\" scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/maze-solver/#lesson-plan-prompt-for-a-high-school-classroom","title":"Lesson Plan Prompt for a High-School Classroom","text":"<p>Prompt</p> <p>Based on the maze-solver-sketch.js file in this project, please generate a lesson plan for a high school student.  Describe how the maze is generated and solved using a depth-first-search algorithm.  Give pointers at using the MicroSim including how to move the speed to 0 to stop the solving process.</p>"},{"location":"sims/maze-solver/#lesson-plan","title":"Lesson Plan","text":"<p>Title: Maze Solver MicroSim: DFS Maze Generation and BFS Solving</p>"},{"location":"sims/maze-solver/#introduction","title":"Introduction","text":"<p>The Maze Solver MicroSim is an interactive tool to help you visualize both maze generation and maze solving algorithms. This simulation creates mazes using Depth-First Search (DFS) and solves them using Breadth-First Search (BFS). By interacting with the simulation, you'll gain a better understanding of these fundamental computer science algorithms.</p>"},{"location":"sims/maze-solver/#how-the-maze-is-generated-depth-first-search-dfs","title":"How the Maze is Generated: Depth-First Search (DFS)","text":"<p>The maze is created using a technique called \"Depth-First Search with backtracking\" which works like this:</p> <ol> <li>Start at the top-left cell and mark it as visited</li> <li>The algorithm then:<ul> <li>Looks for unvisited neighboring cells</li> <li>Randomly chooses one of these neighbors</li> <li>Removes the wall between the current cell and the chosen neighbor</li> <li>Moves to that neighbor and marks it as visited</li> <li>Adds the previous cell to a \"stack\" (like a trail of breadcrumbs)</li> </ul> </li> <li>If there are no unvisited neighbors:<ul> <li>The algorithm \"backtracks\" by popping a cell from the stack</li> <li>Continues the process from this new position</li> </ul> </li> <li>The algorithm completes when every cell has been visited</li> </ol> <p>This creates a \"perfect maze\" - one with no loops and exactly one path between any two points.</p>"},{"location":"sims/maze-solver/#how-the-maze-is-solved-breadth-first-search-bfs","title":"How the Maze is Solved: Breadth-First Search (BFS)","text":"<p>Once you press the \"Solve\" button, the simulation uses Breadth-First Search to find the shortest path from start to end:</p> <ol> <li>The solver starts at the top-left cell (green)</li> <li>It explores all possible neighboring cells by:<ul> <li>Checking all four directions (up, right, down, left)</li> <li>Only moving through paths without walls</li> <li>Marking visited cells in pink</li> </ul> </li> <li>BFS explores cells in \"waves\" moving outward from the start</li> <li>When the algorithm reaches the end cell (red), it traces back the path</li> <li>The final solution path is highlighted in yellow</li> </ol> <p>BFS guarantees finding the shortest possible path through the maze.</p>"},{"location":"sims/maze-solver/#using-the-microsim","title":"Using the MicroSim","text":""},{"location":"sims/maze-solver/#controls","title":"Controls","text":"<ul> <li>Solve Speed Slider: Controls how quickly the solving animation runs<ul> <li>Move it to the right for faster solving</li> <li>Move it all the way to the left (0) to pause the solving process</li> <li>Move it right again to continue from where you paused</li> </ul> </li> <li>Solve Button (Green): Begins the solving process<ul> <li>Changes to a \"Reset\" button (Red) while solving or after solution is found</li> </ul> </li> <li>New Maze Button (Blue): Generates a completely new random maze</li> </ul>"},{"location":"sims/maze-solver/#experiment-ideas","title":"Experiment Ideas","text":"<ol> <li>Generate several different mazes and observe the patterns</li> <li>Pause the solving process (speed = 0) midway to analyze the BFS search pattern</li> <li>Compare how quickly different mazes can be solved</li> <li>Look for the areas that the algorithm explores but that don't become part of the final path</li> </ol>"},{"location":"sims/maze-solver/#key-computer-science-concepts","title":"Key Computer Science Concepts","text":"<ol> <li>Graph Traversal: Both DFS and BFS are fundamental ways to explore connected structures (graphs)</li> <li>Randomized Algorithms: The maze generator uses randomness to create unique mazes each time</li> <li>Backtracking: The DFS algorithm uses backtracking to explore all possible paths</li> <li>Queue vs. Stack: The maze generator uses a stack (Last-In-First-Out) while the solver uses a queue (First-In-First-Out)</li> <li>Path Finding: BFS is optimal for finding the shortest path in an unweighted graph</li> </ol> <p>Challenge</p> <ol> <li>Why does BFS guarantee the shortest path while DFS doesn't?</li> <li>What changes would you make to use DFS instead of BFS for solving?</li> <li>How might you modify the code to create mazes with multiple possible solutions?</li> <li>Can you think of real-world applications that use these same algorithms?</li> </ol> <p>Understanding these maze algorithms provides excellent preparation for studying more advanced topics in computer science, including artificial intelligence, network routing, and game development.</p>"},{"location":"sims/microsim-uniqueness/","title":"MicroSim Uniqueness Interactive Venn Diagram","text":"<p>Run the MicroSim Uniqueness Interactive Venn Diagram Fullscreen Edit the MicroSim Uniqueness Interactive Venn Diagram MicroSim in the p5.js editor</p>"},{"location":"sims/microsim-uniqueness/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/microsim-uniqueness/main.html\" height=\"480\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/microsim-uniqueness/#about-this-microsim","title":"About this MicroSim","text":"<p>This interactive MicroSim visualizes the unique position of MicroSims in educational technology through a three-circle Venn diagram. The three circles represent:</p> <ul> <li>Simplicity: Focused simulations with clear parameters, transparent code, and constrained scope</li> <li>Accessibility: Universal embedding via iframes, works on any device, platform-independent</li> <li>AI Generation: Created in seconds by language models through standardized patterns</li> </ul> <p>At the center, where all three circles overlap, sits \"MicroSims\" - representing how these three characteristics uniquely converge to create a new paradigm in educational content.</p>"},{"location":"sims/microsim-uniqueness/#how-to-use","title":"How to Use","text":"<p>Hover your mouse over different regions of the Venn diagram to learn about:</p> <ul> <li>Individual characteristics (single circles)</li> <li>Pairwise combinations (two-circle overlaps)</li> <li>The unique convergence (center where all three meet)</li> </ul> <p>Each region displays a tooltip explaining its significance based on the What Makes MicroSims Unique article.</p>"},{"location":"sims/microsim-uniqueness/#educational-value","title":"Educational Value","text":"<p>This MicroSim demonstrates:</p> <ol> <li>Visual representation of concepts: Complex relationships shown through overlapping circles</li> <li>Interactive learning: Hover interactions reveal detailed information</li> <li>Set theory: Visual representation of intersections and unions</li> <li>Educational technology taxonomy: Understanding how different characteristics combine</li> </ol>"},{"location":"sims/microsim-uniqueness/#technical-implementation","title":"Technical Implementation","text":"<p>The MicroSim follows the standard width-responsive design pattern:</p> <ul> <li>Canvas dimensions: 400px initial width (responsive), 480px total height (400px drawing + 80px controls)</li> <li>Responsive design: Adapts to container width using <code>windowResized()</code> and <code>updateCanvasSize()</code></li> <li>Interactive regions: Mouse hover detection calculates distances to determine which region is active</li> <li>Blend mode: Uses p5.js <code>MULTIPLY</code> blend mode for authentic Venn diagram appearance</li> <li>Dynamic tooltips: Context-sensitive text wrapping in the control area</li> </ul>"},{"location":"sims/microsim-uniqueness/#sample-prompt","title":"Sample Prompt","text":"<p>Prompt</p> <p>Create a p5.js MicroSim that displays an interactive three-circle Venn diagram. The three circles should be labeled \"Simplicity\", \"Accessibility\", and \"AI Generation\" and arranged in an equilateral triangle pattern. Place \"MicroSims\" at the center where all three circles overlap. When users hover over any region (single circles, two-circle overlaps, or the center), display a tooltip explaining that region's significance. Use semi-transparent colors with blend mode for proper Venn diagram visualization. Make it width-responsive following the standard MicroSim patterns.</p>"},{"location":"sims/microsim-uniqueness/#learning-objectives","title":"Learning Objectives","text":"<p>Students and educators will:</p> <ul> <li>Understand the three key characteristics that make MicroSims unique</li> <li>Visualize how combining multiple attributes creates something new</li> <li>Explore set theory through interactive visualization</li> <li>Learn about the educational technology landscape</li> </ul>"},{"location":"sims/microsim-uniqueness/#lesson-activities","title":"Lesson Activities","text":""},{"location":"sims/microsim-uniqueness/#activity-1-identify-the-regions","title":"Activity 1: Identify the Regions","text":"<p>Have students hover over each region and identify: - How many characteristics are present - What makes each combination significant - Why the center represents something unique</p>"},{"location":"sims/microsim-uniqueness/#activity-2-create-your-own-venn-diagram","title":"Activity 2: Create Your Own Venn Diagram","text":"<p>Ask students to: - Identify three characteristics of another concept (e.g., their school, a sport, a book) - Sketch a three-circle Venn diagram - Label what exists at each intersection - Discuss what makes the center unique</p>"},{"location":"sims/microsim-uniqueness/#activity-3-extend-the-concept","title":"Activity 3: Extend the Concept","text":"<p>Challenge students to: - Add a fourth circle to represent another dimension - Modify the tooltip text to add their own insights - Change the colors to improve visual clarity - Add click interactions that link to more information</p>"},{"location":"sims/microsim-uniqueness/#extensions","title":"Extensions","text":"<p>Possible enhancements:</p> <ol> <li>Click interactions: Click regions to navigate to detailed documentation</li> <li>Animation: Animate circles growing from center on load</li> <li>Statistics: Show percentage breakdown of each characteristic</li> <li>Comparison mode: Toggle to show different educational technology paradigms</li> <li>Export feature: Save the diagram as an image</li> </ol>"},{"location":"sims/microsim-uniqueness/#references","title":"References","text":"<ul> <li>What Makes MicroSims Unique - The comprehensive article this visualization is based on</li> <li>Venn Diagram on Wikipedia</li> <li>Set Theory Basics</li> <li>p5.js Blend Mode Reference</li> </ul>"},{"location":"sims/mobile-buttons/","title":"Mobile Compatible Buttons","text":""},{"location":"sims/mobile-buttons/#native-p5js-buttons","title":"Native p5.js Buttons","text":"<p>Using the native p5.js createButton() function is indeed an excellent alternative that would solve your iPhone compatibility issues. This approach has several advantages:</p> <p>Using p5.js's built-in createButton() function offers several advantages over canvas-drawn buttons:</p> <ol> <li> <p>Native touch support: The buttons are actual HTML elements that work correctly on all devices including iPhones, with no special handling needed for touch events.</p> </li> <li> <p>Accessibility: HTML buttons are keyboard-accessible and work with screen readers, making your application more accessible.</p> </li> <li> <p>Styling flexibility: You can easily style the buttons using CSS properties like in the example code.</p> </li> <li> <p>Cleaner interaction code: You don't need to track mouse/touch positions and check bounds - just use the mousePressed() callback function.</p> </li> <li> <p>State management: You can easily show/hide buttons based on the application state using the show() and hide() methods.</p> </li> </ol> <p>The key changes in this implementation:</p> <ul> <li>Created HTML buttons with createButton() instead of drawing them on the canvas</li> <li>Added button event handlers (startSolving, resetMaze, createNewMaze)</li> <li>Implemented show/hide logic for the buttons based on the application state</li> <li>Added CSS styling to make the buttons visually appealing</li> </ul> <p>This approach should work perfectly on iPhones and all other devices without requiring any special handling for touch events.</p>"},{"location":"sims/mobile-buttons/#creating-rect-buttons","title":"Creating Rect Buttons","text":"<p>There common issue with canvas-based interactions on mobile devices like iPhones running the Apple Safari Browser. The problem stems from how touch events differ from mouse events. Here are the key issues and solutions:</p> <ol> <li>Mobile Safari on iPhone processes touch events differently than mousePressed() events</li> <li>The coordinates might be off due to different handling of touch positions</li> <li>Canvas scaling can affect the touch coordinate mapping</li> </ol> <p>To fix this, you should implement touch event handling alongside mouse events. Here's how to modify the maze solver code to work on iPhones:</p> <p>The key changes I've made to make the buttons work on iPhone:</p> <ol> <li>Created a shared <code>handleInteraction()</code> function that works with both mouse and touch coordinates</li> <li>Added proper touch event handlers: <code>touchStarted()</code>, <code>touchMoved()</code>, and <code>touchEnded()</code></li> <li>Prevented default touch behaviors that can interfere with canvas interactions</li> <li>Made the buttons slightly larger and more touch-friendly</li> <li>Added <code>pixelDensity(1)</code> to handle high-DPI displays properly</li> <li>Made the slider more touch-friendly with increased height</li> </ol> <p>These changes should make the maze solver work correctly on iPhones while maintaining compatibility with desktop browsers. The most important part is handling both mouse and touch events through a unified interaction handler.</p> <pre><code>// Function to handle both mouse and touch interactions\nfunction handleInteraction(px, py) {\n    // Check if clicked/touched on Solve button\n    if (px &gt; canvasWidth - 100 &amp;&amp; px &lt; canvasWidth - 20 &amp;&amp;\n        py &gt; drawHeight + 10 &amp;&amp; py &lt; drawHeight + 40) {\n\n        if (!solving &amp;&amp; solutionPath.length === 0) {\n            // Start solving\n            resetSolving();\n            solving = true;\n        } else {\n            // Reset if already solving or solved\n            resetSolving();\n        }\n        return;\n    }\n\n    // Check if clicked/touched on New Maze button\n    if (px &gt; canvasWidth - 190 &amp;&amp; px &lt; canvasWidth - 110 &amp;&amp;\n        py &gt; drawHeight + 10 &amp;&amp; py &lt; drawHeight + 40) {\n\n        createMaze();\n        generateMaze();\n        resetSolving();\n    }\n}\n\n// Original mouse event handler\nfunction mousePressed() {\n    handleInteraction(mouseX, mouseY);\n}\n\n// Add touch event handlers\nfunction touchStarted() {\n    // Get the touch coordinates relative to the canvas\n    if (touches.length &gt; 0) {\n        handleInteraction(touches[0].x, touches[0].y);\n    }\n    // Prevent default touch behavior to avoid scrolling\n    return false;\n}\n\n// Optional: Add additional touch support for mobile\nfunction touchMoved() {\n    // Prevent default to disable page scrolling when touching canvas\n    return false;\n}\n\n// Fix for slider interaction on mobile\nfunction touchEnded() {\n    // Allow default behavior for sliders\n    if (mouseX &gt; margin &amp;&amp; mouseX &lt; canvasWidth - margin &amp;&amp;\n        mouseY &gt; drawHeight + 30 &amp;&amp; mouseY &lt; drawHeight + 50) {\n        return true;\n    }\n    return false;\n}\n\n// In setup, add this code to properly position canvas on mobile\nfunction setup() {\n    const canvas = createCanvas(canvasWidth, canvasHeight);\n    var mainElement = document.querySelector('main');\n    canvas.parent(mainElement);\n    textSize(defaultTextSize);\n\n    // Handle high-DPI displays for better text rendering\n    pixelDensity(1);\n\n    // Create solver speed slider with touch-friendly size\n    solveSpeedSlider = createSlider(0, 60, 8, 1);\n    solveSpeedSlider.position(margin, drawHeight + 40);\n    solveSpeedSlider.size(canvasWidth - 2*margin);\n    // Make the slider touch-friendly\n    solveSpeedSlider.style('height', '20px');\n\n    // Initialize maze\n    cols = floor((canvasWidth - 2*margin) / cellSize);\n    rows = floor((drawHeight - 2*margin) / cellSize);\n\n    createMaze();\n    generateMaze();\n\n    start = grid[0][0];\n    end = grid[cols-1][rows-1];\n\n    resetSolving();\n}\n\n// In drawUI, make buttons larger and more touch-friendly\nfunction drawUI() {\n    // Draw controls and labels\n    fill(0);\n    text(\"Solve Speed: \" + solveSpeed, margin, drawHeight + 25);\n\n    // Green \"Solve\" button with larger touch area\n    if (!solving &amp;&amp; solutionPath.length === 0) {\n        fill(0, 150, 0);\n        rect(canvasWidth - 100, drawHeight + 10, 80, 35);\n        fill(255);\n        textAlign(CENTER, CENTER);\n        text(\"Solve\", canvasWidth - 60, drawHeight + 27);\n        textAlign(LEFT, BASELINE);\n    }\n\n    // Maroon Reset button when running\n    if (solving || solutionPath.length &gt; 0) {\n        fill(150, 0, 0);\n        rect(canvasWidth - 100, drawHeight + 10, 80, 35);\n        fill(255);\n        textAlign(CENTER, CENTER);\n        text(\"Reset\", canvasWidth - 60, drawHeight + 27);\n        textAlign(LEFT, BASELINE);\n    }\n\n    // New Maze button\n    fill(0, 0, 150);\n    rect(canvasWidth - 200, drawHeight + 10, 90, 35);\n    fill(255);\n    textAlign(CENTER, CENTER);\n    text(\"New Maze\", canvasWidth - 155, drawHeight + 27);\n    textAlign(LEFT, BASELINE);\n}\n</code></pre>"},{"location":"sims/motor/","title":"Rotating Motor","text":"<p> Rotating Motor</p> <p>Rotating Motor Demo</p> <p>We want to animate a rotating motor as a circle.  The motor must have circular arrows on it that show the direction of the rotation of the motor.  The arrows must point clockwise when we are going forward and counter-clockwise when we are going in reverse.  Drawing arrows with a triangle at the end is easy.  But circular arrows that scale well up or down is a lot more challenging.</p> <p>In this lesson we will use \"decomposition\" to break this task down into steps:</p> <ol> <li>Draw the outline of a circle</li> <li>Draw arcs within the circle using the arc() function</li> <li>Draw arrows at the tips of the arcs</li> </ol> <p>We will use the translate(), scale(), and rotate() functions to perform this animation.</p>"},{"location":"sims/motor/#draw-rotating-motor","title":"Draw Rotating Motor","text":""},{"location":"sims/motor/#draw-motor","title":"Draw Motor","text":"<p>The key here is to be able to make the motor scale to any size.  We do this by doing the following three functions:</p> <ol> <li>translate() to the center of the motor</li> <li>scale the motor to the correct size</li> <li>rotate the motor so it appears to spin in the right direction</li> </ol> <pre><code>function drawMotor(x, y, scaleVal, angle, direction) {\n  angleMode(DEGREES);  // Change the mode to \n\n  // get ready to jump into a new reference frame\n  push();\n\n      // order is key\n      translate(x, y);\n      scale(scaleVal);\n      rotate(angle);\n\n      // gray\n      fill(180);\n      strokeWeight(2);\n      circle(0,0, 220)\n      strokeWeight(10);\n      stroke('black')\n      noFill();\n      // top circle x,y  w,h  start-ang, end-angle\n      arc(0, 0, 180, 180, 180, 310, OPEN);\n      // bottom circle\n      arc(0, 0, 180, 180,   0, 130, OPEN);\n\n      // forward\n      if (direction == 1) {\n        // up right\n        drawArrowTip(50,-75, 140)\n        // lower left\n        drawArrowTip(-60, 70, -30)\n      }\n      // reverse\n      if (direction == -1) {\n        // up right x,y, ang\n        drawArrowTip(90, 0, -20)\n        // lower left\n        drawArrowTip(-90, 0, 164)\n      }\n  pop();\n}\n</code></pre>"},{"location":"sims/motor/#draw-arrow-tip","title":"Draw Arrow Tip","text":"<p>We use the <code>translate()</code> and <code>rotate()</code> functions to first get into position.  Then we use the <code>triangle()</code> function to draw the triangle at the front of the arch.</p> <pre><code>function drawArrowTip(x, y, rotationAngle) {\n  push();  // Save the current drawing style and transformations\n     translate(x, y);  // Move the origin to the given location\n     rotate(rotationAngle);  // Rotate by the given angle\n     fill(0);  // Set the fill color to black\n     noStroke();  // Disable drawing an outline\n     // set the size\n     let sz = 20;\n     // lower right, top, lower left\n     triangle(sz, 0,  0,-3*sz,   -sz,0);  // Draw the arrow tip\n  pop();  // Restore the previous drawing style and transformations\n}\n</code></pre> <pre><code>// scale motor test\n// Goal: add a size to the motor drawing to not require only a fixed size hard coded in the draw.\n\nlet direction = 1;\nlet radiusSlider;\nlet angle = 0;\nlet circleRadius = 100; // default value\nlet myFrameRate = 24;\n\nfunction setup() {\n    const canvas = createCanvas(400, 400);\n    canvas.parent('canvas-container');\n    // this changes the entire layout\n\n\n    let forwardButton = createButton('Fwd');\n    forwardButton.position(10, height-20);\n    forwardButton.mousePressed(forward);\n\n    let stopButton = createButton('Stop');\n    stopButton.position(55, height-20);\n    stopButton.mousePressed(stop);\n\n    let reverseButton = createButton('Rev');\n    reverseButton.position(105, height-20);\n    reverseButton.mousePressed(turnReverse);\n\n    // radiusSlider = createSlider(0, 200, circleRadius);\n    scaleSlider = createSlider(.1, 2, 1, .1);\n    scaleSlider.position(215, height - 35);\n    scaleSlider.style('width', '180px');\n\n        // radiusSlider = createSlider(0, 200, circleRadius);\n    speedSlider = createSlider(0, 20, 5, .1);\n    speedSlider.position(215, height - 16);\n    speedSlider.style('width', '180px');\n    frameRate(myFrameRate);\n}\n\nfunction stop() {\n    direction = 0;\n  }\n\n  function forward() {\n    direction = 1;\n  }\n\n  function turnReverse() {\n    direction = -1;\n  }\n\nfunction draw() {\n     background(240);\n     // center axis\n     stroke(0);\n     line(0, height / 2, width, height / 2)\n     line(width / 2, 0, width/2, height)\n\n    // Update the circle radius based on slider value\n    scaleVal = scaleSlider.value();\n    motorSpeed = speedSlider.value();\n\n    // Center the motor on the canvas\n    angle += direction * motorSpeed;\n    // x,y, scale,  angle, dir, speed\n    drawMotor(width / 2, height / 2, scaleVal, angle, direction)\n\n    // Draw the label and the current radius value\n    stroke(0);\n    strokeWeight(0);\n    fill(0); // black color for the text\n    text(\"Scale: \" + scaleVal, 140, height - 30);\n    text(\"Speed: \" + motorSpeed, 140, height - 10);\n}\n\nfunction drawMotor(x, y, scaleVal, angle, direction) {\n  angleMode(DEGREES);  // Change the mode to \n  push();\n\n      // order is key\n      translate(x, y);\n      scale(scaleVal);\n      rotate(angle);\n\n      // gray\n      fill(180);\n      strokeWeight(2);\n      circle(0,0, 220)\n      strokeWeight(10);\n      stroke('black')\n      noFill();\n      // top circle x,y  w,h  start-ang, end-angle\n      arc(0, 0, 180, 180, 180, 310, OPEN);\n      // bottom circle\n      arc(0, 0, 180, 180,   0, 130, OPEN);\n\n      // forward\n      if (direction == 1) {\n        // up right\n        drawArrowTip(50,-75, 140)\n        // lower left\n        drawArrowTip(-60, 70, -30)\n      }\n      // reverse\n      if (direction == -1) {\n        // up right x,y, ang\n        drawArrowTip(90, 0, -20)\n        // lower left\n        drawArrowTip(-90, 0, 164)\n      }\n  pop();\n}\n\n// draw a triangle with a base at (x,y) in the direction of rotationAngle\nfunction drawArrowTip(x, y, rotationAngle) {\n  push();  // Save the current drawing style and transformations\n    translate(x, y);  // Move the origin to the given location\n    rotate(rotationAngle);  // Rotate by the given angle\n    fill(0);  // Set the fill color to black\n    noStroke();  // Disable drawing an outline\n    // set the size of the triangle\n    let sz = 10;\n    // lower right, top, lower left\n    triangle(sz, 0,  0,-3*sz,   -sz,0);  // Draw the arrow tip\n  pop();  // Restore the previous drawing style and transformations\n}\n</code></pre>"},{"location":"sims/named-colors/","title":"Named Colors","text":"Named colors. <p>Link to Demo</p>"},{"location":"sims/named-colors/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to use a list of 140 named colors to change the fill color of a rectangle.</p>"},{"location":"sims/named-colors/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/neopixel/","title":"NeoPixel Simulation","text":"Figure caption. <p>Link to NeoPixel Demo</p>"},{"location":"sims/neopixel/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how the NeoPixel works to convert a stream of rgb values into color setting for each pixel.</p> <pre><code>Please create a single file p5.js sketch for downloading. \nUse a canvas variables of canvasWidth=600 and canvasHeight=200 as global variables.\nThe sketch is a simulation of how a NeoPixel works moving red, green and blue values through a data signal.\nThe sketch has a set of four rectangles moving from left to right.\nThe rectangles are 60 pixels wide and 20 pixels high.\nEach rectangle has three circles within it.  One is red, one is blue and one is green. The circles have a radius of 10.\nThe values of the red, green and blue colors are randomly created from a range of 0 to 255.\nAs the rectangles reach a neopixel the first rectangle is pulled off and the rest continue on the data line.\nA circle of radius 50 is used to represent the NeoPixel being shown in the center.  It will get the values of each rectangle as they pass above it.\nAdd buttons at the bottom of the canvas for start, step and stop and reset the simulation.\n</code></pre>"},{"location":"sims/neural-network/","title":"Neural Network","text":"<p>Generate a p5.js file that draws a three layer neural network.  The input is on the left.  The output is on the right. The layer on the left should be labeled \"Input\". add slider controls that change the number of layers and the number of neurons in a layer</p> <p>Link to Chat Transcript</p> <p>Link to Demo</p> <pre><code>// Demo of parameters in neural networks\nlet width = 800;\nlet height = 400;\nlet numLayersSlider;\nlet numNeuronsSlider;\nlet parameterCount = 0;\nlet labelValueWidth = 240;\n\nlet numLayers = 3;  // Default number of layers (including Input and Output)\nlet numNeurons = 4; // Default number of neurons in each layer\n\nfunction setup() {\n  const canvas = createCanvas(width, height);\n  canvas.parent('canvas-container');\n\n  numLayersSlider = createSlider(2, 7, 3);\n  numLayersSlider.position(labelValueWidth, height - 50);\n  numLayersSlider.style('width', width - labelValueWidth - 20 + 'px')\n  numLayersSlider.input(updateNetwork);\n\n\n  numNeuronsSlider = createSlider(2, 10, 4);\n  numNeuronsSlider.position(labelValueWidth, height - 25);\n  numNeuronsSlider.input(updateNetwork);\n\n  updateNetwork();\n}\n\nfunction updateNetwork() {\n  background(240);\n\n  numLayers = numLayersSlider.value();\n  numNeurons = numNeuronsSlider.value();\n\n  let layerPositions = Array.from({length: numLayers}, (_, i) =&gt; map(i, 0, numLayers - 1, 0.2, 0.8) * width);\n\n  parameterCount = 0;\n\n  for (let i = 0; i &lt; layerPositions.length; i++) {\n    let label = \"Hidden\";\n    if (i === 0) label = \"Input\";\n    else if (i === layerPositions.length - 1) label = \"Output\";\n\n    drawNodes(layerPositions[i], height / 2, numNeurons, label);\n  }\n\n  for (let i = 0; i &lt; layerPositions.length - 1; i++) {\n    connectLayers(layerPositions[i], height / 2, numNeurons, layerPositions[i + 1], height / 2, numNeurons);\n    parameterCount += numNeurons * numNeurons; // Adding weights\n  }\n\n  parameterCount += (numLayers - 1) * numNeurons; // Adding biases\n\n  // Show labels and parameter count\n  textSize(16);\n  // textAlign(LEFT, CENTER);\n  text('Number of Layers: ' + numLayers, 70, numLayersSlider.y);\n  text('Number of Neurons/Layer: ' + numNeurons, 70 * 1.5, numNeuronsSlider.y);\n\n  textAlign(CENTER, CENTER);\n  text('Total Parameter Count: ' + parameterCount, width / 2, height - 20);\n}\n\nfunction drawNodes(x, y, numNodes, label) {\n  let gap = 40;\n  let startY = y - ((numNodes - 1) * gap) / 2;\n  for (let i = 0; i &lt; numNodes; i++) {\n    ellipse(x, startY + i * gap, 20, 20);\n  }\n  textSize(16);\n  textAlign(CENTER, CENTER);\n  text(label, x, y + ((numNodes + 1) * gap) / 2);\n}\n\nfunction connectLayers(x1, y1, numNodes1, x2, y2, numNodes2) {\n  let gap1 = 40;\n  let gap2 = 40;\n  let startY1 = y1 - ((numNodes1 - 1) * gap1) / 2;\n  let startY2 = y2 - ((numNodes2 - 1) * gap2) / 2;\n  for (let i = 0; i &lt; numNodes1; i++) {\n    for (let j = 0; j &lt; numNodes2; j++) {\n      line(x1, startY1 + i * gap1, x2, startY2 + j * gap2);\n    }\n  }\n}\n</code></pre>"},{"location":"sims/particle-fields/","title":"Particle Fields","text":"Figure caption. <p>Link to Demo</p>"},{"location":"sims/particle-fields/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to display particles and their interactions.</p>"},{"location":"sims/particle-fields/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/particle-fields/#sample-response","title":"Sample Response","text":"<pre><code>let canvasHeight = 400;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\nfunction setup() {\nconst canvas = createCanvas(canvasWidth, canvasHeight);\n  canvas.parent('canvas-container');\n  fill(245);\n  rect(0,0, canvasWidth, canvasHeight);\n  fill('green');\n  circle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/particle-fields/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/particle-fields/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/particle-fields/#activities","title":"Activities","text":""},{"location":"sims/particle-fields/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/particle-fields/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/particle-fields/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/particle-fields/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/particle-fields/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"},{"location":"sims/pendulum/","title":"Pendulum","text":"<p>Edit</p> <p>ToDo: Plot the period of the swing</p>"},{"location":"sims/polygon/","title":"Regular Polygons","text":"<p>Run Polygon MicroSim</p> <p>In this example, we will use a more detailed prompt to control the placement of the sliders and their values.</p> <pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/polygon/main.html\" height=\"400\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre> <p>Prompt</p> <p>Generate a p5.js sketch file that draws regular polygons on a 400 pixel high canvas.</p> <p>Create one range control slider that allows the number of points on the polygon to vary from 3 to 40 in steps of 1.  Make the default be 10.</p> <p>Create a second range control slider that allows the color inside the polygon to be changed to any color.  Make the default value be blue (170).</p> <p>Make the sliders be the width of the canvas less the width of the labels and values.  Place the sliders at the bottom of the canvas  100 points in from the left.</p> <p>Use the text() function at the end of the draw() function to display the label and current values of the sliders in the bottom left of the screen.</p> <p>Use the responsive-template.js as a starting point.</p>"},{"location":"sims/polygon/#sample-response","title":"Sample Response","text":"<p>This sample code has been manually edited to improve the placement and formatting of the controls.</p> <pre><code>// A MicroSim of drawing a polygon.  Sliders controls the number of edges and the color.\nlet canvasSize = 400;\nlet polygonRadius = 150\nlet colorSlider;\nlet pointSlider;\nlet drawHeight = 350;\nlet sliderLeftMargin = 140;\n\nfunction setup() { \n    const canvas = createCanvas(canvasSize, canvasSize);\n    canvas.parent('canvas-container');\n    textSize(16);\n    noStroke();\n    strokeWeight(0);\n    // Change the default color scheme from RGB to Hue, Saturation and Brightness\n    colorMode(HSB, 255);\n\n    // number of points (or edges) in polygon\n    pointSlider = createSlider(3, 20, 10);\n    pointSlider.position(sliderLeftMargin, canvasSize - 35);\n    pointSlider.style('width', width - sliderLeftMargin + 'px')\n\n    colorSlider = createSlider(0, 255, 170);\n    colorSlider.position(sliderLeftMargin, canvasSize - 15);\n    colorSlider.style('width', width - sliderLeftMargin + 'px')\n}\n\nfunction draw() {\n    fill(230);\n    rect(0, 0, width, drawHeight);\n    fill(245);\n    rect(0, drawHeight, width, canvasSize-drawHeight);\n    let colorValue = colorSlider.value();\n    let pointValue = pointSlider.value();\n\n    // Draw the polygon, HSB\n    fill(colorValue, 255, 255);\n    beginShape();\n    for (let i = 0; i &lt; pointValue; i++) {\n        // walk around the 360 angles\n        let angle = map(i, 0, pointValue, 0, TWO_PI);\n        let x = canvasSize/2 + polygonRadius * cos(angle);\n        let y = drawHeight/2 + polygonRadius * sin(angle);\n        vertex(x, y);\n    }\n    endShape(CLOSE);\n\n    // Draw the slider values\n    fill('black');\n    noStroke(); \n    strokeWeight(0);\n    text(\"Point Value: \" + pointValue, 5, canvasSize - 25);\n    text(\"Color Value: \" + colorValue, 5, canvasSize - 5);  \n}\n</code></pre>"},{"location":"sims/polygon/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/polygon/#activities","title":"Activities","text":""},{"location":"sims/polygon/#add-slider","title":"Add Slider","text":"<p>Add a new slider to control the radius of the polygon.</p>"},{"location":"sims/prisoners-dilemma/","title":"Prisoners Dilemma","text":""},{"location":"sims/prisoners-dilemma/#microsim-template","title":"MicroSim Template","text":"Figure caption. <p>Link to MicroSim</p>"},{"location":"sims/prisoners-dilemma/#about-this-microsim","title":"About this MicroSim","text":""},{"location":"sims/prisoners-dilemma/#sample-prompt","title":"Sample Prompt","text":"<p><pre><code>Create a p5.js sketch that illustrates \"The Prisoners Dilemma\" in game theory.  \n\nAdd two rectangles at height 50 labeled \"Prisoner A\" and \"Prisoner B\".\nCenter 24 point text in each rectangle.\nPlace two buttons under each prisoner.\nLabel one button \"Remain Silent\" and one \"Confess\".\nShow the outcome of each button press below in a 2x2 grid.\nUpdates to the last choices made by the prisoners when buttons are pressed.\nOutcome logic updates based on the combination of choices.\nVisual feedback with a red box highlighting the current outcome based on the last choices made.\nOrganized layout that clearly shows the prisoners' choices and the corresponding outcomes.\n</code></pre> GPT Dialog</p> <p>Wikipedia</p>"},{"location":"sims/pwm/","title":"Pulse-Width Modulation","text":"<p>Run the Pulse-Width Modulation Demo</p> <p>Pulse-width modulation is the way for microcontrollers to send a precise signal to a  device such as a motor controller to control motor speed.  PWM signals can also be used to change the brightness of an LED. This simulation has a slider that allows the user to change the \"duty cycle\" of a waveform.  The simulation is a bright green line on a black background, just like the old CRT oscilloscope displays.</p>"},{"location":"sims/pwm/#sample-chatgpt-prompt","title":"Sample ChatGPT Prompt","text":"<pre><code>Generate a p5.js sketch file of a simulation of a static pulse width\n   modulation (PWM) waveform on a 600x300 canvas.\nAdd a range control slider to adjust the Duty Cycle of the waveform.\nMake the default Duty Cycle be 50%.\nThe min should be 0% and the max should be 100%.\nPlace the range control slider at the bottom of the canvas.\nMake the leftSliderMargin be 155.\nMake sure the range control slider has a width of canvasWidth-leftSliderMargin-20 using the \n   style attribute.\nAt the end of the draw() function add a text() function that displays\n   the label and value of the duty cycle.\n</code></pre> <p>I have tested this prompt several times using GPT-4 and it seems to work very well except for the precise layout of the duty cycle label, value and slider positioning. I had to tweak these by hand.</p> <p>Edit This MicroSim Using the P5.js Editor</p>"},{"location":"sims/pwm/#sample-response","title":"Sample Response","text":"<pre><code>/// Pulse Wave Modulation (PWM) simulation\n// Made to render like an old oscilloscope - lime green on black\n// Most of this sim was generated by GPT-4 with some cleanup on placement of the slider\nlet canvasWidth = 600;\nlet canvasHeight = 200;\nlet dutyCycleSlider;\nlet dutyCycle = 0.5; // Initialize to 50%\nlet cycles = 6;\nlet waveHeight = canvasHeight/3;\nlet leftSliderMargin = 155; // at 16 point font\n\nfunction setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  // uncomment if you are placing in an HTML page\n  // canvas.parent('canvas-container');\n  textSize(16);\n\n  dutyCycleSlider = createSlider(0, 1, 0.5, 0.01); // Range from 0 to 1, default value 0.5, step size 0.01\n  dutyCycleSlider.position(leftSliderMargin, canvasHeight - 35); // Position slider\n  dutyCycleSlider.style('width', canvasWidth - leftSliderMargin - 20 + 'px'); // Set width of slider\n}\n\nfunction draw() {\n  background('black');\n\n  // Update duty cycle\n  dutyCycle = dutyCycleSlider.value();\n\n  // Set stroke for waveform\n  stroke('limegreen');\n  // disable the fill in the waveform\n  noFill();\n  // make the line be double wide\n  strokeWeight(2);\n\n  // Generate PWM waveform\n  beginShape();\n  for (let x = 0; x &lt; width; x++) {\n    // Map x to time period of waveform\n    let t = map(x, 0, width, 0, TWO_PI * cycles);\n\n    // Calculate value of waveform at this point in time\n    // Draw high if in duty cycle, low otherwise\n    let y = (sin(t) &gt; 2 * dutyCycle - 1) ? \n        2*height/3 : height/3; \n\n    // Add vertex to waveform\n    vertex(x, y);\n  }\n  endShape();\n\n  // Display duty cycle\n  fill('white');\n  noStroke();\n  // Display duty cycle as percentage\n  text(\"Duty Cycle: \" + nf(dutyCycle*100, 0, 0) + \"%\", 20, height - 20); \n}\n</code></pre>"},{"location":"sims/pwm/#key-learnings-from-the-simulation","title":"Key Learnings from the Simulation","text":"<ol> <li>We can use the <code>map()</code> function to transform the x coordinate into the time period of a waverform (t.)</li> <li>We can draw a square wave using a <code>sin()</code> function with a threshold test.</li> <li>We can use the <code>beginShape()</code> and <code>endShape()</code> around as set of <code>vertex()</code> point placements to generate waveforms.</li> <li>We can use the \"number format\" function <code>nf()</code>  to display the percentage without a decimal point.</li> </ol>"},{"location":"sims/pwm/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/pwm/#lesson-plan-prompt","title":"Lesson Plan Prompt","text":"<pre><code>I have a webpage that simulates a pulse-width-modulation waveform. \nThe page has a slider that allows students to change the duty cycle from 0% to 100%.\nWhen the students change the slider, the waveform is updated with the duty cycle.\nGenerate a lesson plan for a 9th-grade robotics class that uses this simulation.\nFor follow up activities, we have Raspberry Pi Picos that we program with MicroPython.\nReturn the response in a single raw markdown file.\n</code></pre>"},{"location":"sims/pwm/#lesson-plan-understanding-pulse-width-modulation-in-robotics","title":"Lesson Plan: Understanding Pulse-Width Modulation in Robotics","text":""},{"location":"sims/pwm/#objective","title":"Objective:","text":"<p>Students will understand the concept of PWM and its application in controlling robotic components like motors and LEDs.</p>"},{"location":"sims/pwm/#materials-needed","title":"Materials Needed:","text":"<ul> <li>Computers with internet access for the PWM simulation webpage.</li> <li>Projector for demonstrations.</li> <li>Optional: Physical components such as a small motor, LED, and Arduino for real-world demonstration.</li> </ul>"},{"location":"sims/pwm/#duration","title":"Duration:","text":"<p>1 hour</p>"},{"location":"sims/pwm/#lesson-outline","title":"Lesson Outline:","text":""},{"location":"sims/pwm/#1-introduction-to-pwm-15-minutes","title":"1. Introduction to PWM (15 minutes)","text":"<ul> <li>Begin with a brief overview of PWM and its significance in robotics.</li> <li>Explain key terms: duty cycle, frequency, analog vs. digital signals.</li> </ul>"},{"location":"sims/pwm/#2-demonstration-of-pwm-simulation-10-minutes","title":"2. Demonstration of PWM Simulation (10 minutes)","text":"<ul> <li>Project the PWM simulation on the screen.</li> <li>Show how changing the duty cycle affects the waveform.</li> <li>Relate this to how it would affect a motor's speed or an LED's brightness.</li> </ul>"},{"location":"sims/pwm/#3-hands-on-activity-with-the-simulation-20-minutes","title":"3. Hands-On Activity with the Simulation (20 minutes)","text":"<ul> <li>Students will use the simulation on their computers.</li> <li>Tasks:</li> <li>Set the duty cycle to various levels (0%, 25%, 50%, 75%, 100%) and observe changes.</li> <li>Students note their observations regarding the waveform changes.</li> </ul>"},{"location":"sims/pwm/#4-real-world-application-discussion-10-minutes","title":"4. Real-World Application Discussion (10 minutes)","text":"<ul> <li>Discuss how PWM is used in real-world robotics.</li> <li>If available, demonstrate using a motor or LED with an Arduino.</li> <li>Encourage students to think of examples where PWM might be used in everyday technology.</li> </ul>"},{"location":"sims/pwm/#5-reflection-and-qa-5-minutes","title":"5. Reflection and Q&amp;A (5 minutes)","text":"<ul> <li>Encourage students to ask questions.</li> <li>Discuss the importance of PWM in precise control in robotics.</li> </ul>"},{"location":"sims/pwm/#assessment","title":"Assessment:","text":"<ul> <li>Students will submit a brief report on their findings from the simulation.</li> <li>Include a few quiz questions at the end of the session to gauge understanding.</li> </ul>"},{"location":"sims/pwm/#extension-activity","title":"Extension Activity:","text":"<ul> <li>For advanced students or as a follow-up lesson, introduce a Python program that uses PWM to control a motor speed using a motor driver chip such as an L293D or control an LED brightness.</li> </ul>"},{"location":"sims/pwm/#notes","title":"Notes:","text":"<ul> <li>Ensure that all students understand the basic concepts before moving to the hands-on activity.</li> <li>Assist students who might have difficulty with the simulation or concepts.</li> <li>Encourage group discussions and peer learning.</li> </ul>"},{"location":"sims/pythagorean-theorem/","title":"Pythagorean Theorem MicroSim","text":"<p>Run the Pythagorean Theorem Fullscreen Edit this Pythagorean Theorem Using the p5.js Editor</p> <p>Add the following to your website to include this MicroSim in your course:</p> <pre><code>&lt;iframe src=\"http://dmccreary.github.io/microsims/sims/pythagorean-theorem/main.html\" height=\"470px\" scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre> <p>This MicroSim demonstrates the Pythagorean Theorem, one of the most famous theorems in geometry.  Note that when you adjust the sliders you change the lengths of two shorter sides of the right triangle.  Note that the sum of the squares of sides <code>a</code> and <code>b</code> will always equal the square of side <code>c</code>.</p>"},{"location":"sims/pythagorean-theorem/#description-of-the-pythagorean-theorem-microsim","title":"Description of the Pythagorean Theorem MicroSim","text":"<ul> <li>Side Length Sliders<ul> <li>Adjust Length of Side <code>a</code> (base): Slider</li> <li>Adjust Length of Side <code>b</code> (height): Slider</li> </ul> </li> <li>Show Squares Button<ul> <li>Toggle display of squares on each side: Button</li> </ul> </li> <li>Calculate Hypotenuse Button<ul> <li>Computes and displays the length of the hypotenuse <code>c</code>: Button</li> </ul> </li> <li>Reset Button<ul> <li>Resets side lengths to default values: Button</li> </ul> </li> </ul>"},{"location":"sims/pythagorean-theorem/#sample-prompt","title":"Sample Prompt","text":"<p>Prompt</p> <p>Create a p5.js sketch of showing a visualization of the Pythagorean theorem.  Follow the rules for a width-responsive MicroSim.</p> <ol> <li>Draw a right triangle in the center of the sketch canvas.</li> <li>Create two sliders that adjust the length of side a (base) and height (b)</li> <li>Create a toggle button that shows squares made of up sides a, b and c</li> <li>Show the length of a, b and the length of the hypotenuse C</li> <li>Add a reset button that resets the lengths to the default button.</li> <li>Place the equation c\u00b2 = a\u00b2 + b\u00b2 as a title in the upper right</li> <li>Display the lengths of a, b and c and their squares in the upper left</li> </ol>"},{"location":"sims/rabbits-and-foxes/","title":"Rabbits and Foxes","text":"<p>Note</p> <p>This is a work in progress.  Both these MicroSims have bugs</p> <p>Rabbits and Foxes Random Motion</p> <p>Rabbits and Foxes Streight Line Motion Version 2</p>"},{"location":"sims/recursion-tree/","title":"Recursion Tree","text":"<p>Recursion trees are ideal ways to demonstrate recursive programming. In a recursive program, a function calls itself repeatedly. The result is often a beautiful complex image generated from a very small program.</p> <p>Run Recursion Tree MicroSim Edit the MicroSim</p>"},{"location":"sims/recursion-tree/#prompt","title":"Prompt","text":"<p>Prompt</p> <p>Generate a single file p5.js sketch on a 400x400 canvas.   Generate a drawing of a tree that uses recursion.   Add a slider that changes the angle between the branches of the tree.</p>"},{"location":"sims/recursion-tree/#response","title":"Response","text":"<p>Creating a p5.js sketch that draws a recursive tree with a slider to adjust the angle between branches involves a few key steps. Here's a basic outline of the code:</p> <ol> <li>Setup the Canvas: Initialize a 400x400 canvas using createCanvas(400, 400) in the setup() function.</li> <li>Create a Slider: Create a slider for the branch angle using createSlider() and position it on the canvas.</li> <li>Draw the Tree: Use a recursive function to draw the tree in the draw() function. The angle between branches will be controlled by the slider's value.</li> <li>Recursive Function: The recursive function will draw a line for the branch and then call itself twice to draw the two smaller branches at the specified angle.</li> </ol> <pre><code>let angleSlider;\n\nfunction setup() {\n  const canvas = createCanvas(400, 400);\n  canvas.parent('canvas-container');\n  angleSlider = createSlider(0, TWO_PI, PI / 4, 0.01);\n  angleSlider.position(10, height + 10);\n}\n\nfunction draw() {\n  background('aliceblue');\n  stroke(0);\n  translate(width / 2, height);\n  drawBranch(100);\n}\n\nfunction drawBranch(len) {\n  // draw branch from center up to len\n  line(0, 0, 0, -len);\n  // move up to end\n  translate(0, -len);\n\n  // if we have a long len\n  if (len &gt; 4) {\n    push();\n      // rotate coordinate system clockwise\n      rotate(angleSlider.value());\n      drawBranch(len * 0.67);\n    pop();\n\n    push();\n      // rotate coordinate system counter clockwise\n      rotate(-angleSlider.value());\n      drawBranch(len * 0.67);\n    pop();\n  }\n}\n</code></pre> <p>In this code:</p> <p>angleSlider is a global variable to hold the slider. In setup(), the canvas is created, and the slider is initialized. draw() continuously updates the canvas, translating the origin to the bottom center and then drawing the tree. drawBranch(len) is the recursive function. It draws a line, then moves to the end of that line. If the branch is long enough, it draws two smaller branches at angles determined by the slider. This code provides a basic recursive tree. You can enhance it with more features like changing the color, stroke weight, or the number of branches.</p>"},{"location":"sims/recursion-tree/#references","title":"References","text":"<ul> <li>Google Gemini Demo</li> <li>p5.js Examples</li> </ul>"},{"location":"sims/resize-in-iframe/","title":"Resize in iframe","text":"<p>Run Resize Width MicroSim</p> <p>Run Resize in iFrame MicroSim Edit in p5.js</p>"},{"location":"sims/resize-in-iframe/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"/microsims/sims/resize-in-iframe/resize-width.html\" height=\"400px\" scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre> <p>Note that this disables scrolling within the iframe.</p>"},{"location":"sims/resize-in-iframe/#prompt","title":"Prompt","text":"<pre><code>I would like to create a p5.js program that is aware of the width of \nthe HTML container element that it is executing within.  I want \nto do this because my users want to use my p5.js application within \nan HTML iframe that is placed in a central content region.\nOur user will run in many different sizes of windows.  \nBasically we want a responsive design for the width.\n\nPlease generate a p5.js program that displays the width and\nheight of the region that contains it\nin a 36 size.  Make the canvas background be aliceblue.\n\nAlso give guidance on how we should change the site CSS to style\nthe iframe that contains the p5.js program so it always expands\nto the width of the container it is running in and disables\nscrolling inside the iframe.\n\nAssume the standard p5.js HTML template that puts the container\nin a &lt;main&gt; element.\nAssume that the p5.js will fix the canvasHeight to be 400.\n</code></pre>"},{"location":"sims/resize-in-iframe/#response","title":"Response","text":"<pre><code>// Responsive width - resize to the width of the container\n\n// global variables\nlet container;\nlet canvasHeight = 400; // Maintain the fixed height\n\nfunction setup() {\n  // Select the container dynamically\n  container = document.querySelector('main');\n\n  // Create a canvas with the same width as the container and a fixed height\n  const canvasWidth = container.offsetWidth;\n  let canvas = createCanvas(canvasWidth, canvasHeight);\n\n  // Attach the canvas to the container\n  canvas.parent(container);\n\n  // Set text properties\n  textSize(36);\n  textAlign(CENTER, CENTER);\n  noLoop();\n}\n\nfunction draw() {\n  background('aliceblue');\n\n  // Display the canvas width and height as text in center of canvas\n  const canvasWidth = container.offsetWidth;\n  text(`Width: ${canvasWidth}px\\nHeight: ${height}px`, canvasWidth / 2, canvasHeight / 2);\n}\n\nfunction windowResized() {\n  // Update the canvas width when the window is resized\n  const canvasWidth = container.offsetWidth;\n  resizeCanvas(canvasWidth, canvasHeight);\n}\n</code></pre>"},{"location":"sims/resize-in-iframe/#explanation-of-the-code","title":"Explanation of the Code","text":"<p>This code is a p5.js sketch that creates a canvas sized to the width of a parent HTML container element but uses a fixed height. It also updates and redraws the canvas whenever the browser window is resized. Here's a line-by-line explanation of what's happening:</p>"},{"location":"sims/resize-in-iframe/#global-variables","title":"Global Variables","text":"<pre><code>let canvasWidth; // Will store the width of the container\nlet canvasHeight = 400; // A fixed height for the canvas\n</code></pre> <ul> <li>canvasWidth: This variable will be updated dynamically based on the <code>#p5-container</code> element's width.</li> <li>canvasHeight: This is fixed at 200 pixels. Unlike width, it won't change when the window is resized.</li> </ul>"},{"location":"sims/resize-in-iframe/#setup-function","title":"setup() Function","text":"<pre><code>function setup() {\n    // Create a canvas to match the parent container's size\n    updateCanvasSize();\n    const canvas = createCanvas(canvasWidth, canvasHeight);\n    canvas.parent('p5-container');\n    noLoop(); // Stop the draw loop since we'll redraw only on resize\n}\n</code></pre> <ul> <li>updateCanvasSize(): This function call updates <code>canvasWidth</code> by measuring the HTML element with the ID <code>p5-canvas</code>.</li> <li>createCanvas(canvasWidth, canvasHeight): Creates a p5.js canvas. The width is taken from the canvas's width; the height is the fixed 200 pixels.</li> <li>canvas.parent('p5-canvas'): Inserts the created canvas element inside the HTML element with the ID <code>p5-canvas</code>. This ensures the canvas is placed in the correct part of the page.</li> <li>noLoop(): Tells p5.js not to continuously call <code>draw()</code> every frame. Instead, it will only call <code>draw()</code> when explicitly instructed to. This helps prevent unnecessary re-rendering.</li> </ul>"},{"location":"sims/resize-in-iframe/#draw-function","title":"draw() Function","text":"<pre><code>function draw() {\n  background('aliceblue');\n  fill('black');\n  textSize(36);\n  textAlign(CENTER, CENTER);\n\n  // Display canvas dimensions\n  text(`Width: ${canvasWidth}px\\nHeight: ${canvasHeight}px`, width / 2, height / 2);\n}\n</code></pre> <ul> <li>background('aliceblue'): Sets a light blue background color for the canvas.</li> <li>fill('black'): Sets the text drawing color to black.</li> <li>textSize(36): Sets the size of the text to be displayed on the canvas.</li> <li>textAlign(CENTER, CENTER): Centers text both horizontally and vertically.</li> <li>text(<code>Width: ${canvasWidth}px\\nHeight: ${canvasHeight}px</code>, width / 2, height / 2): Draws a message in the center of the canvas displaying the current width and height values. The <code>\\n</code> creates a new line so both values appear one above the other.</li> </ul>"},{"location":"sims/resize-in-iframe/#windowresized-function","title":"windowResized() Function","text":"<pre><code>function windowResized() {\n  // Update canvas size when the container resizes\n  updateCanvasSize();\n  resizeCanvas(canvasWidth, canvasHeight);\n  redraw();\n}\n</code></pre> <ul> <li>windowResized(): A p5.js event function that is automatically called whenever the browser window changes size.</li> <li>updateCanvasSize(): Updates <code>canvasWidth</code> based on the canvas's current dimensions.</li> <li>resizeCanvas(canvasWidth, canvasHeight): Adjusts the existing canvas to the new width and height. Because the height is fixed, only the width may really change.</li> <li>redraw(): Manually triggers <code>draw()</code> again, ensuring the text reflects the new dimensions.</li> </ul>"},{"location":"sims/resize-in-iframe/#updatecanvassize-function","title":"updateCanvasSize() Function","text":"<pre><code>function updateCanvasSize() {\n    // Get the exact dimensions of the container\n    const container = document.getElementById('p5-container').getBoundingClientRect();\n    containerWidth = Math.floor(container.width);  // Avoid fractional pixels\n}\n</code></pre> <ul> <li>document.getElementById('p5-container').getBoundingClientRect(): Returns an object containing the size and position of the element relative to the viewport.</li> <li>canvasWidth = Math.floor(canvas.width): Assigns the canvas's width (rounded down to the nearest whole number) to the <code>canvasWidth</code> variable, ensuring no fractional pixel values that might cause layout jitter.</li> </ul> <p>Why This Matters:</p> <ul> <li>By separating the container width calculation from the canvas height (which is fixed), you ensure a stable vertical dimension.</li> <li>Calling <code>updateCanvasSize()</code> before creating or resizing the canvas ensures the canvas matches the container's dimensions at all times.</li> <li>Using <code>noLoop()</code> and <code>redraw()</code> allows the canvas to only update when necessary (on initial load and window resize), making the sketch more efficient.</li> </ul>"},{"location":"sims/resize-in-iframe/#references","title":"References","text":"<ul> <li>Processing Wiki on Positioning Your Canvas)</li> </ul>"},{"location":"sims/resize-test/","title":"Resize Demo","text":"Figure caption. <p>Link to Resize Demo</p>"},{"location":"sims/resize-test/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us go into full-screen and back.</p> <pre><code>// resize test\nrsz = 20; // resize button size\n\nfunction setup() {\n    // initial 600 wide and 400 high\n    const canvas = createCanvas(600, 400);\n    var mainElement = document.querySelector('main');\n    canvas.parent(mainElement);\n    textSize(16);\n}\n\n// draw the \"toggle full screen\" icon in the lower right corner\nfunction drawResize() {\n  wR = width-rsz; // with less resize button width\n  hR = height-rsz; // height less resize button width\n  fill('white');\n  rect(wR,hR,rsz,rsz);\n  stroke('black')\n\n  line(wR+4, hR+4, wR+4, hR+8); // ul v\n  line(wR+4, hR+4, wR+8, hR+4); // ul h\n\n  line(width-4, hR+4, width-8, hR+4); // ur v\n  line(width-4, hR+4, width-4, hR+8); // ur h\n\n  line(wR+4, height-4, wR+4, height-8); // ll v\n  line(wR+4, height-4, wR+8, height-4); // ll h\n\n  line(width-4, height-4, width-4, height-8); // lr v\n  line(width-4, height-4, width-8, height-4); // lr h\n}\n\nfunction draw() {\n  background('lightgray');\n  drawResize(); // draw the full screen toggle\n  fill('black')\n  noStroke();\n  text(\"Window Width: \" + str(windowWidth), 10, 20)\n  text(\"Window Height: \" + str(windowHeight), 10, 50)\n}\n\n// If the mouse is pressed in the resize box, toggle full-screen mode.\nfunction mousePressed() {\n  if (mouseX &gt; width-rsz &amp;&amp; mouseX &lt; width &amp;&amp; mouseY &gt; height-rsz &amp;&amp; mouseY &lt; height) {\n    // get the current value (0,1)\n    let fs = fullscreen();\n    // toggle the value\n    fullscreen(!fs);\n  }\n}\n\n// this works down to w=500 and h=254\nfunction windowResized() {\n  // console.log('windowResized', windowWidth, windowWidth);\n  resizeCanvas(windowWidth-20, windowHeight-35);\n}\n</code></pre>"},{"location":"sims/resize-test/#references","title":"References","text":"<p>Processing Wiki on Positioning Your Canvas</p>"},{"location":"sims/responsive-design/","title":"Responsive Design","text":"<p>A responsive design is one that adapts to changing screen sizes.  This example resizes the drawing region, the control region as well as the slider controls every time the screen is resized.</p> <p>Run the Responsive Design MicroSim Edit this MicroSim</p>"},{"location":"sims/responsive-design/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/responsive-design/main.html\" height=\"200\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/robots/","title":"Collision Avoidance Robot","text":""},{"location":"sims/robots/#supporting-simulations","title":"Supporting Simulations","text":"<ol> <li>Battery Circuits</li> <li>Battery Drain</li> <li>Motor</li> <li>H-Bridge Circuit</li> <li>Pulse-Width Modulation</li> <li>Collision Avoidance Robot</li> </ol>"},{"location":"sims/rotating-gears/","title":"Rotating Gears","text":"<p>Run the Rotating Gears MicroSim Edit the MicroSim</p>"},{"location":"sims/rotating-gears/#prompt","title":"Prompt","text":"<pre><code>Create a p5.js sketch of two rotating gears that are\nmeshed.  Make one smaller have half the number of\nteeth that the larger gear has.\nAdd a Start/Stop button and a slider to control the speed.\n</code></pre>"},{"location":"sims/rotating-gears/#chatgpt-o1-mini-response","title":"ChatGPT o1-mini Response","text":"<p>Certainly! Below is a comprehensive p5.js sketch that simulates two meshed rotating gears. One gear is smaller with half the number of teeth as the larger gear. Additionally, the sketch includes a Start/Stop button to control the animation and a slider to adjust the rotation speed.</p>"},{"location":"sims/rotating-gears/#meshed-rotating-gears-animation","title":"Meshed Rotating Gears Animation","text":"<p>This sketch visualizes two meshed gears rotating in opposite directions. The key features include:</p> <ul> <li>Two Gears:<ul> <li>Large Gear: Has twice the number of teeth compared to the smaller gear.</li> <li>Small Gear: Has half the number of teeth of the large gear.</li> </ul> </li> <li>Controls:<ul> <li>Start/Stop Button: Toggles the rotation of the gears.</li> <li>Speed Slider: Adjusts the rotation speed of the gears.</li> </ul> </li> </ul>"},{"location":"sims/rotating-gears/#understanding-gear-mechanics","title":"Understanding Gear Mechanics","text":"<p>When two gears mesh:</p> <ul> <li> <p>Opposite Rotation: Gears rotate in opposite directions.</p> </li> <li> <p>Speed Ratio: The rotation speed of each gear is inversely proportional to its number of teeth.</p> </li> </ul> \\[ \\frac{\\omega_1}{\\omega_2} = -\\frac{N_2}{N_1} \\] <p>where:</p> <ul> <li>\\(\\omega_1\\) \u200b: Angular speed of Gear 1</li> <li>\\(\\omega_2\\) \u200b: Angular speed of Gear 2</li> <li>\\(N_1\\) \u200b: Number of teeth on Gear 1</li> <li>\\(N_2\\) \u200b: Number of teeth on Gear 2</li> <li>Negative Sign: Indicates opposite rotation directions</li> </ul> <p>In this sketch:</p> <ul> <li>Large Gear (Gear 1): \\(N_1\\) = 20 teeth</li> <li>Small Gear (Gear 2): \\(N_2\\) = 10 teeth</li> </ul> <p>Thus, the angular speed relationship becomes:</p> \\[ \\frac{\\omega_1}{\\omega_2} = -\\frac{10}{20} = -0.5  \\Rightarrow \\omega_2 = -2 \\omega_1\u200b \\] <p>This means the small gear rotates twice as fast as the large gear in the opposite direction.</p>"},{"location":"sims/rotating-gears/#setting-up-the-environment","title":"Setting Up the Environment","text":"<p>To run this sketch:</p> <ol> <li>Visit the p5.js online editor.</li> <li>Create a new sketch.</li> <li>Replace the existing code with the code provided below.</li> <li>Click the play button to see the animation in action.</li> </ol>"},{"location":"sims/rotating-gears/#p5js-code","title":"p5.js Code","text":"<p>Note this original code did not work.  I told it that the image was just circles and it got it right the second time.</p> <pre><code>// Gear Animation with Start/Stop Button and Speed Slider\n\nlet largeGear, smallGear;\nlet isRunning = true;\nlet speedSlider;\nlet startStopButton;\n\nfunction setup() {\n  createCanvas(800, 600);\n  angleMode(RADIANS);\n\n  // Initialize Gears\n  // Large Gear: 20 teeth\n  largeGear = new Gear(width / 3, height / 2, 150, 20);\n\n  // Small Gear: 10 teeth\n  smallGear = new Gear((2 * width) / 3, height / 2, 75, 10);\n\n  // Create Speed Slider\n  createP('Rotation Speed:');\n  speedSlider = createSlider(0, 5, 2, 0.1); // Base speed from 0 to 5\n\n  // Create Start/Stop Button\n  startStopButton = createButton('Stop');\n  startStopButton.mousePressed(toggleAnimation);\n\n  // Set text alignment for controls\n  textAlign(CENTER, CENTER);\n}\n\nfunction draw() {\n  background(240);\n\n  // Update rotation if running\n  if (isRunning) {\n    let baseSpeed = speedSlider.value();\n    largeGear.update(baseSpeed);\n    smallGear.update(-2 * baseSpeed); // Small gear rotates twice as fast in opposite direction\n  }\n\n  // Display Gears\n  largeGear.display();\n  smallGear.display();\n}\n\n// Function to toggle animation\nfunction toggleAnimation() {\n  isRunning = !isRunning;\n  if (isRunning) {\n    startStopButton.html('Stop');\n  } else {\n    startStopButton.html('Start');\n  }\n}\n\n// Gear Class Definition\nclass Gear {\n  constructor(x, y, radius, numTeeth) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.numTeeth = numTeeth;\n    this.angle = 0;\n  }\n\n  update(speed) {\n    this.angle += speed * (TWO_PI / 60); // Convert speed to radians per frame\n  }\n\n  display() {\n    push();\n    translate(this.x, this.y);\n    rotate(this.angle);\n\n    // Draw Gear Body\n    stroke(0);\n    strokeWeight(2);\n    fill(200);\n    ellipse(0, 0, this.radius * 2, this.radius * 2);\n\n    // Draw Teeth\n    let toothWidth = (TWO_PI) / this.numTeeth / 2;\n    let toothHeight = this.radius * 0.2;\n\n    for (let i = 0; i &lt; this.numTeeth; i++) {\n      let theta = i * TWO_PI / this.numTeeth;\n      push();\n      rotate(theta);\n      rectMode(CENTER);\n      fill(150);\n      noStroke();\n      rect(this.radius, 0, toothHeight, toothWidth);\n      pop();\n    }\n\n    pop();\n  }\n}\n</code></pre>"},{"location":"sims/rotating-gears/#explanation-of-the-code","title":"Explanation of the Code","text":"<ol> <li> <p>Global Variables:</p> </li> <li> <p>Gears:</p> <ul> <li><code>largeGear</code>: Represents the larger gear with more teeth.</li> <li><code>smallGear</code>: Represents the smaller gear with fewer teeth.</li> </ul> </li> <li>Controls:<ul> <li><code>isRunning</code>: Boolean flag to control animation state.</li> <li><code>speedSlider</code>: Slider to adjust rotation speed.</li> <li><code>startStopButton</code>: Button to start or stop the animation.</li> </ul> </li> <li> <p><code>setup()</code> Function:</p> </li> <li> <p>Canvas: Creates an 800x600 pixel canvas.</p> </li> <li>Angle Mode: Sets angle measurements to radians for smoother calculations.</li> <li>Gear Initialization:<ul> <li>Large Gear: Positioned at one-third of the canvas width, with a radius of 150 pixels and 20 teeth.</li> <li>Small Gear: Positioned at two-thirds of the canvas width, with a radius of 75 pixels and 10 teeth.</li> </ul> </li> <li>Controls Creation:<ul> <li>Speed Slider: Ranges from 0 to 5 with a default value of 2 and increments of 0.1.</li> <li>Start/Stop Button: Initializes with the label \"Stop\" and is linked to the <code>toggleAnimation</code> function.</li> </ul> </li> <li>Text Alignment: Centers the text for the controls.</li> <li><code>draw()</code> Function:</li> <li>Background: Sets a light gray background each frame.</li> <li>Rotation Update:<ul> <li>If <code>isRunning</code> is <code>true</code>, the gears' angles are updated based on the slider value.</li> <li>Large Gear: Rotates at a speed proportional to the slider value.</li> <li>Small Gear: Rotates at twice the speed of the large gear in the opposite direction.</li> </ul> </li> <li>Displaying Gears: Calls the <code>display()</code> method for both gears to render them on the canvas.</li> <li> <p><code>toggleAnimation()</code> Function:</p> </li> <li> <p>Toggles the <code>isRunning</code> flag.</p> </li> <li>Updates the button label to \"Start\" or \"Stop\" based on the current state.</li> <li> <p><code>Gear</code> Class:</p> </li> <li> <p>Constructor Parameters:</p> </li> <li><code>x, y</code>: Position of the gear's center.</li> <li><code>radius</code>: Radius of the gear.</li> <li><code>numTeeth</code>: Number of teeth on the gear.</li> <li>Properties:</li> <li><code>angle</code>: Current rotation angle of the gear.</li> <li>Methods:</li> <li><code>update(speed)</code>: Increments the gear's angle based on the provided speed.</li> <li><code>display()</code>: Renders the gear on the canvas, including its body and teeth.<ul> <li>Gear Body: Drawn as a filled ellipse.</li> <li>Teeth: Represented as rectangles protruding from the gear's circumference. The size and placement are calculated based on the number of teeth.</li> </ul> </li> </ol>"},{"location":"sims/rotating-gears/#customization","title":"Customization","text":"<p>Feel free to modify the sketch to explore different gear configurations or enhance the visualization:</p> <ul> <li>Number of Teeth:<ul> <li>Change the <code>numTeeth</code> parameter when initializing <code>Gear</code> objects to see how it affects meshing.</li> </ul> </li> <li>Gear Sizes:<ul> <li>Adjust the <code>radius</code> parameter to change the size of the gears.</li> </ul> </li> <li>Tooth Design:<ul> <li>Modify the <code>toothWidth</code> and <code>toothHeight</code> in the <code>display()</code> method for different tooth appearances.</li> </ul> </li> <li>Colors and Styles:<ul> <li>Change <code>fill()</code> and <code>stroke()</code> values to customize gear colors and outlines.</li> </ul> </li> <li>Additional Controls:<ul> <li>Add sliders to control the number of teeth dynamically.</li> <li>Introduce a phase shift to synchronize gear rotations differently.</li> </ul> </li> </ul>"},{"location":"sims/rotating-gears/#live-demo","title":"Live Demo","text":"<p>For a live demonstration, copy the above code into the p5.js online editor and run the sketch. Use the Start/Stop button to control the animation and adjust the Rotation Speed slider to change how fast the gears rotate.</p> <p>Feel free to reach out if you have any questions or need further assistance with the sketch. Happy coding and gear modeling!</p>"},{"location":"sims/rotating-gears/#references","title":"References","text":"<p>Full ChatGPT Transcript</p>"},{"location":"sims/seven-segment-display/","title":"7-Segment Display","text":"<p>Demo</p>"},{"location":"sims/sierpinski/","title":"Sierpinski","text":"Sierpinski Triangle"},{"location":"sims/sierpinski/#demo-1","title":"Demo 1","text":"<p>This demo draws colored triangles within triangles up to a depth of 7. The users have three range contols for depth, color and color step size.</p> <ul> <li> <p>Run the Colored Sierpinski Demo</p> </li> <li> <p>Run the Random Sierpinski Demo</p> </li> </ul>"},{"location":"sims/simple-tree/","title":"Simple Tree","text":"<p>Run the Simple Tree MicroSim Edit this MicroSim</p>"},{"location":"sims/simple-tree/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/name/main.html\" height=\"400\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/simple-tree/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to use recursion to draw a tree. We draw a branch, and at the end of each branch, we draw two more branches that are at different angles and are a bit shorter and narrower.</p> <p>Prompt</p> <p>For the program simple-tree.js in this project, please write a lesson plan for high-school students.  Focus on teaching the concept of recursion using metaphors of trees and nature.  Discussion the structure of recursive algorithms and how the algorithms call themselves but must know when to stop.  The lesson should last about 50 minutes.</p>"},{"location":"sims/simple-tree/#response","title":"Response","text":""},{"location":"sims/simple-tree/#recursion-through-nature-a-lesson-plan-for-high-school-students","title":"Recursion through Nature: A Lesson Plan for High School Students","text":""},{"location":"sims/simple-tree/#lesson-overview","title":"Lesson Overview","text":"<p>Title: Understanding Recursion through Tree Growth Grade Level: High School (Grades 9-12) Duration: 50-minute lesson Materials: Computers with p5.js environment and simple-tree.js file loaded</p>"},{"location":"sims/simple-tree/#learning-objectives","title":"Learning Objectives","text":"<p>By the end of this lesson, students will be able to: 1. Explain the concept of recursion using tree growth as a metaphor 2. Identify the base case and recursive case in a recursive algorithm 3. Trace through the execution of a simple recursive function 4. Modify parameters in the simple-tree.js program to create different tree structures</p>"},{"location":"sims/simple-tree/#introduction","title":"Introduction","text":"<p>5 minutes</p> <p>Begin by showing students a variety of tree images and the simple-tree.js simulation. Ask:</p> <ul> <li>What patterns do you notice in how trees branch out?</li> <li>How might we describe the structure of a tree mathematically?</li> </ul> <p>Introduce the concept: \"Today we'll explore recursion - a powerful programming concept where a function calls itself. In nature, trees are perfect examples of recursive structures.\"</p>"},{"location":"sims/simple-tree/#key-concepts","title":"Key Concepts","text":"<p>10 minutes</p>"},{"location":"sims/simple-tree/#recursion-explained","title":"Recursion Explained","text":"<ul> <li>Definition: A process where a function calls itself to solve smaller instances of the same problem</li> <li>Real-world examples: Trees, nested dolls, mirrors facing each other, fractal patterns in nature</li> </ul>"},{"location":"sims/simple-tree/#two-essential-components","title":"Two Essential Components","text":"<ol> <li>Base Case: The condition that stops the recursion (when to stop)</li> <li>Recursive Case: The function calling itself with modified parameters (how to continue)</li> </ol>"},{"location":"sims/simple-tree/#tree-metaphor","title":"Tree Metaphor","text":"<p>Connect the abstract concept to the concrete visual:</p> <ul> <li>Each branch of a tree can be seen as a smaller tree</li> <li>The trunk divides into branches, which divide into smaller branches, and so on</li> <li>The recursive pattern ends at the tips with leaves (base case).  In our example we draw a leaf at the tip of each branch.</li> </ul>"},{"location":"sims/simple-tree/#code-exploration","title":"Code Exploration","text":"<p>15 minutes</p> <p>Examine the <code>branch(len, depth)</code> function of the simple-tree.js code:</p> <pre><code>function branch(len, depth) {\n  if (depth == 0) {\n    // Draw a leaf at the tip\n    fill(34, 139, 34);\n    noStroke();\n    ellipse(0, 0, 10, 15);\n    return;\n  }\n\n  // make the branches get thinner as we get deeper\n  strokeWeight(map(depth, 0, 10, 1, 20));\n  stroke(139, 69, 19); // Brown color for branches\n\n  // the branch\n  line(0, 0, 0, -len);\n  // move to the end of the branch\n  translate(0, -len);\n\n  push();\n    // rotate clockwise\n    rotate(PI / 6);\n    branch(len * branchShrink, depth - 1);\n  pop();\n\n  push();\n    // rotate counter clockwise\n    rotate(-PI / 6);\n    branch(len * branchShrink, depth - 1);\n  pop();\n}\n</code></pre> <p>Notice the following:</p> <ul> <li>Base case: <code>if (depth == 0)</code> - when we've reached the maximum depth, draw a leaf and stop.  Note that we start with depth high and count down in this version.</li> <li>Recursive cases: Two calls to <code>branch()</code> that draw branching limbs with reduced size</li> <li>Shrink Branch Length: - we calling the next branch with the current branch length multiplied by <code>branchShrink</code> which is <code>0.7</code>.  This means that each branch is only 70% as long as the previous branch.</li> <li>Branch Context: Notice the <code>push()</code> and <code>pop()</code> function that keep the drawing context isolated in each branch.</li> <li>Branch Rotation: Notice that we are rotating by <code>PI / 6</code>.  There are 180 degrees in PI so that is 180/6 or 30 degrees.</li> <li>Control Parameters: <code>depth</code> determines how many times to branch, while <code>len</code> and <code>branchShrink</code> control size of the next branch.</li> </ul>"},{"location":"sims/simple-tree/#interactive-exploration","title":"Interactive Exploration","text":"<p>10 minutes</p> <ol> <li>Adjust the depth slider in the simulation to see how it affects the tree</li> <li>Predict what would happen without a base case (infinite recursion)</li> <li>Consider what would happen with different branch angles or shrink rates</li> </ol>"},{"location":"sims/simple-tree/#conclusion-and-connection","title":"Conclusion and Connection","text":"<ul> <li>Summarize: Recursion is a powerful pattern that breaks complex problems into simpler versions of the same problem</li> <li>Connect to other concepts: Fractals, divide-and-conquer algorithms, nested data structures</li> <li>Natural wisdom: Trees evolved this recursive structure because it's efficient for gathering sunlight and withstanding environmental forces</li> </ul>"},{"location":"sims/simple-tree/#extension-activity","title":"Extension Activity","text":"<p>Modify the code to create your own creative recursive patterns by:</p> <ul> <li>Changing the branching angle</li> <li>Modifying the base case to draw different leaf shapes or colors</li> <li>Adding randomness to create more natural-looking trees</li> <li>Creating seasonal variations (autumn colors, snow-covered branches)</li> </ul>"},{"location":"sims/simple-tree/#assessment","title":"Assessment","text":"<p>Ask students to:</p> <ol> <li>Trace the execution of the <code>branch()</code> function with a depth of 2</li> <li>Identify another natural structure that exhibits recursive patterns</li> <li>Explain what would happen if we removed the base case from the algorithm</li> </ol> <p>This lesson leverages visual learning and natural metaphors to make the abstract concept of recursion concrete and engaging for high school students.</p>"},{"location":"sims/sine-and-cosine/","title":"Sine and Cosine","text":"Figure caption. <p>Run the MicroSim Demo</p>"},{"location":"sims/sine-and-cosine/#about-this-microsim","title":"About this MicroSim","text":""},{"location":"sims/sine-wave/","title":"Sine Wave","text":"<p>Run the Sine Wave Demo</p> <p>In this demo, we use three range control sliders to change  the ways a sine wave is drawn on a canvas. The three parameters are:</p> <ol> <li>amplitude</li> <li>period</li> <li>and phase</li> </ol>"},{"location":"sims/sine-wave/#prompt","title":"Prompt","text":"<pre><code>Generate a static sine wave on a grid of cartesian coordinates. \nMake (0,0) be at the center of an 600x400 canvas and larger y at the top.  \nAdd sliders for period, amplitude and phase.\nProvide the label and values to the left of the sliders.\nMake the sliders span the width less the leftSliderMargin of 100.\nDraw and label the X and Y Axis.\n</code></pre> <p>Edit This MicroSim with the P5.js Editor</p>"},{"location":"sims/sine-wave/#result","title":"Result","text":"<pre><code>// sine wave with 3 sliders\nlet width = 600;\nlet height = 400;\nlet halfWidth = width / 2\nlet halfHeight = height / 2\nlet amplitude = 100;\nlet phase = 0;\n\nlet amplitudeSlider, periodSlider, phaseSlider;\nlet labelValueMargin = 120;\n\nfunction setup() {\n  createCanvas(width, height);\n  textSize(16)\n\n  // Create sliders\n  amplitudeSlider = createSlider(0, 200, 100);\n  amplitudeSlider.position(labelValueMargin, height - 20);\n  amplitudeSlider.style('width', width - labelValueMargin + 'px')\n\n  periodSlider = createSlider(1, 100, 50);\n  periodSlider.position(labelValueMargin, height - 40);\n  periodSlider.style('width', width - labelValueMargin + 'px')\n\n  phaseSlider = createSlider(-PI*100, PI*100, 0, 0.01);\n  phaseSlider.position(labelValueMargin, height - 60);\n  phaseSlider.style('width', width - labelValueMargin + 'px')\n}\n\nfunction draw() {\n  background(240);\n\n  amplitude = amplitudeSlider.value();\n  period = periodSlider.value();\n  phase = phaseSlider.value();\n\n  // draw on the standard axis to keep text upright\n  drawAxis();\n  translate(width / 2, height / 2); // Shift origin to center\n  scale(1, -1); // Flip y-axis to make positive y up\n\n  drawSineWave(amplitude, 1/period, phase);\n}\n\nfunction setLineDash(list) {\n  drawingContext.setLineDash(list);\n}\n\nfunction drawAxis() {\n  fill('black')\n  strokeWeight(0)\n  text('y', halfWidth-20, 15)\n  text('x', width-20, halfHeight + 20)\n  stroke('gray')\n  strokeWeight(1)\n  setLineDash([5, 5])\n\n  // horizontal line\n  line(0, halfHeight, width, halfHeight)\n  // vertical line\n  line(halfWidth, 0, halfWidth, height)\n\n  stroke(0)\n  strokeWeight(0);\n  fill('black'); // Text color\n  text('Amplitude: ' + amplitude/100,    10, height - 5);\n  text('Period: '    + period,           10, height - 25);\n  text('Phase: '     + phase.toFixed(2), 10, height - 45);\n}\n\nfunction drawSineWave(amplitude, frequency, phase) {\n  stroke('blue');\n  strokeWeight(3)\n  noFill();\n  // turn off dash line\n  setLineDash([1, 0])\n  beginShape();\n    for (let x = -width / 2; x &lt; width / 2; x++) {\n      let y = amplitude * sin(frequency * (x - phase));\n      vertex(x, y);\n    }\n  endShape();\n}\n</code></pre> <p>Challenge</p> <p>Create your own trigonometry demos by drawing the cosine and tangent functions.</p>"},{"location":"sims/sine-wave/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/sine-wave/#prompt_1","title":"Prompt","text":"<pre><code>Generate a lesson plan for a 9th grade geometry class \nthat accompanies the following p5.js demonstration:\n\nThe users see a sine wave on the screen.\nThere are three range control sliders under the sine wave.\nOne slider changes the amplitude of the sine wave.\nOne slider changes the period of the sine wave.\nOne slider changes the phase of the sine wave.\n</code></pre>"},{"location":"sims/sine-wave/#grade-level","title":"Grade Level","text":"<p>9th Grade  </p>"},{"location":"sims/sine-wave/#subject","title":"Subject","text":"<p>Geometry  </p>"},{"location":"sims/sine-wave/#duration","title":"Duration","text":"<p>1-2 class periods (40-80 minutes)  </p>"},{"location":"sims/sine-wave/#tools-needed","title":"Tools Needed","text":"<p>Computers with internet access, p5.js web editor, projector for demonstrations.</p>"},{"location":"sims/sine-wave/#objectives","title":"Objectives","text":"<ol> <li>Understand the basic properties of sine waves (amplitude, period, phase).</li> <li>Learn how to manipulate these properties using p5.js.</li> <li>Visualize the effects of changing each property on the shape of the sine wave.</li> </ol>"},{"location":"sims/sine-wave/#introduction-10-minutes","title":"Introduction (10 minutes)","text":"<ul> <li>Begin with a brief overview of sine waves and their significance in mathematics and the real world (e.g., sound waves, light waves).</li> <li>Introduce the p5.js tool and its purpose in visualizing mathematical concepts.</li> </ul>"},{"location":"sims/sine-wave/#demonstration-15-minutes","title":"Demonstration (15 minutes)","text":"<ul> <li>Project the p5.js sine wave demonstration on the screen.</li> <li>Explain each control slider and its corresponding property:</li> <li>Amplitude: Height of the wave peaks.</li> <li>Period: Distance between successive wave peaks.</li> <li>Phase: Horizontal shift of the entire wave.</li> </ul>"},{"location":"sims/sine-wave/#interactive-activity-30-minutes","title":"Interactive Activity (30 minutes)","text":"<ul> <li>Students will use the p5.js web editor to experiment with the sine wave.</li> <li>Tasks for students:</li> <li>Adjust the amplitude and observe changes.</li> <li>Modify the period and note the effects.</li> <li>Change the phase and discuss how the wave shifts.</li> <li>Encourage students to note their observations and any patterns they discover.</li> </ul>"},{"location":"sims/sine-wave/#group-discussion-10-minutes","title":"Group Discussion (10 minutes)","text":"<ul> <li>Regroup and discuss the findings.</li> <li>Ask students to explain how each parameter affects the wave.</li> <li>Discuss practical applications of sine waves.</li> </ul>"},{"location":"sims/sine-wave/#assessment-5-15-minutes","title":"Assessment (5-15 minutes)","text":"<ul> <li>Provide a short quiz or worksheet asking students to match wave diagrams with their corresponding amplitude, period, and phase settings.</li> </ul>"},{"location":"sims/sine-wave/#homework-optional","title":"Homework (optional)","text":"<ul> <li>Students create their own p5.js sketch that includes a sine wave with adjustable properties.</li> <li>They should write a brief report explaining how changing each property affects the wave and include screenshots of their sketch.</li> </ul>"},{"location":"sims/sine-wave/#extensions-optional","title":"Extensions (optional)","text":"<ul> <li>Introduce concepts of frequency and angular velocity related to sine waves.</li> <li>Explore other trigonometric functions like cosine and tangent using p5.js.</li> </ul>"},{"location":"sims/sine-wave/#resources","title":"Resources","text":"<ul> <li>Access to the p5.js web editor and basic tutorials.</li> <li>Diagrams and explanations of sine waves and their properties.</li> </ul>"},{"location":"sims/sine-wave/#references","title":"References","text":""},{"location":"sims/slope-and-intercept/","title":"Slope and Intercept","text":"<p>Run the Slope and Intercept MicroSim</p>"},{"location":"sims/slope-and-intercept/#prompt","title":"Prompt","text":"<p><pre><code>Generate a single file p5.js sketch on an 300x400 canvas.\nSet a variable \"width\" to be 300.\nSet a variable \"height\" to be 400.\nThe purpose of this sketch is to demonstrate the concepts of slope and intercept.\nDivide the canvas into two regions on top of each other.\nThe top region is called the \"drawing\" region. \nThe drawing region is 300x300 and has a light gray background of 240.\nThe bottom region the \"controls\" region.\nThe controls region holds the controls and is 300x100.\nThe background for the controls is white of 255.\nThe controls holds two sliders with labels and values on the left.\nThe width of the sliders are both 180px.\nThe slope slider ranges from -2 to 3 with the default of .5.\nThe intercept slider ranges from -100 to 100.\nDraw the slope and the intercept only in the top drawing region.\nThe top drawing region uses a cartesian coordinate system with the center at 150, 150.\nIn the drawing regsion positive Y is at tthe top.\nPlace this prompt at the top of the sketch a multi-line comment.\n</code></pre> Slope and Intercept Demo</p>"},{"location":"sims/slope-and-intercept/#response","title":"Response","text":"<pre><code>/*\nGenerate a single file p5.js sketch on a 300x400 canvas.\nSet a global variable \"width\" to be 300.\nSet a global variable \"height\" to be 400.\nSet a global variable \"drawingRegionHeight\" to be 400.\nThe purpose of this sketch is to demonstrate the concepts of slope and intercept.\nDivide the canvas into two regions on top of each other.\nThe top region is called the \"drawing\" region.\nThe drawing region is 300x300 and has a light gray background of 240.\nThe bottom region is the \"controls\" region.\nThe controls region holds the controls and is 300x100.\nThe background for the controls is white of 255.\nThe controls holds two sliders with labels and values on the left.\nThe width of the sliders are both 180px.\nThe slope slider ranges from -2 to 3 with the default of .5.\nThe intercept slider ranges from -100 to 100.\nDraw the slope and the intercept only in the top drawing region.\nThe top drawing region uses a cartesian coordinate system with the center at 150, 150.\nIn the drawing region, positive Y is at the top.\nAdd vertical and horizontal grid lines every 50 pixels.\n*/\n\nlet width = 500;\nlet height = 400;\nlet drawingRegionHeight = 350;\nlet labelValueWidth = 110;\nlet slopeSlider, interceptSlider;\n\nfunction setup() {\n  createCanvas(width, height);\n  textSize(16);\n\n  // Slope slider\n  text('Slope', 20, 320);\n  slopeSlider = createSlider(0, 5, 0.5, 0.1);\n  slopeSlider.position(labelValueWidth, height - 45);\n  slopeSlider.style('width', width -labelValueWidth - 20 + 'px');\n\n  // Intercept slider\n  text('Intercept', 20, 360);\n  interceptSlider = createSlider(0, 300, 50, 1);\n  interceptSlider.position(labelValueWidth, height - 25);\n  interceptSlider.style('width', width -labelValueWidth - 20 + 'px');\n}\n\nfunction draw() {\n  // Redraw drawing region\n  noStroke();\n\n  // Drawing region\n  fill(230);\n  rect(0, 0, width, drawingRegionHeight);\n\n  // Controls region\n  fill(245);\n  rect(0, drawingRegionHeight, width, 100);\n\n  let slope = slopeSlider.value();\n  let intercept = interceptSlider.value();\n  drawGridLines();\n  drawLine(slope, intercept);\n  drawLabelValues(slope, intercept);\n}\n\nfunction drawGridLines() {\n  stroke('silver');\n  strokeWeight(1);\n  // horizontal lines\n  for (let i=0; i&lt;9; i++) {\n    line(0, i*50, width, i*50);\n  }\n  // Vertical lines\n  for (let i=0; i&lt;10; i++) {\n    line(i*50, 0, i*50, drawingRegionHeight);\n  }\n}\n\nfunction drawLabelValues(slope, intercept) {\n  fill('black');\n  strokeWeight(0);\n  text('Slope: ' + slope, 10, drawingRegionHeight + 20);\n  text('Intercept: ' + intercept, 10, drawingRegionHeight + 40);\n}\n\nfunction drawLine() {\n  let slope = slopeSlider.value();\n  let intercept = interceptSlider.value();\n\n  // Draw line in the drawing region\n  stroke('red');\n  strokeWeight(2);\n  line(0, drawingRegionHeight - intercept, width, drawingRegionHeight - (drawingRegionHeight * slope + intercept));\n}\n</code></pre>"},{"location":"sims/snake/","title":"Snake MicroSim","text":"<p>Run the MicroSim Edit this MicroSim</p>"},{"location":"sims/solar-battery/","title":"Solar Battery","text":"<p>Edit Solar Cell MicroSim</p>"},{"location":"sims/solar-cell/","title":"Solar Cell Battery Charger MicroSim","text":"<p>Run the Solar Cell Battery Charger MicroSim By Claude Anthropic 3.7</p> <p></p> <p>Prompt</p> <p>Please generate a p5.js sketch file for simulation of a battery being charged by a solar cell during the day and discharged at night be a light. Add sliders at the bottom control region for:</p> <pre><code>1. the time-of-day\n2. the amount of sunshine - and make the sun brighter with fewer clouds as you get brighter\n3. the amount of power drain\n</code></pre> <p>Have the sun move in an arch across the sky with it near the horizon in the early morning and late at night.</p> <p>Use the responsive-design.js template.</p> <p>Use the drawAnimatedWire, drawBattery and  drawSolarCell functions below to draw simulation.</p> <p>// Function for drawing an animated wire with adjustable circle spacing function drawAnimatedWire(x1, y1, x2, y2, speed, spacing, color, state) {     let distance = dist(x1, y1, x2, y2);     let numCircles = Math.floor(distance / (spacing * 50));  // Spacing scale factor for better visual control</p> <pre><code>stroke(0);\nstrokeWeight(lineWidth);\nline(x1, y1, x2, y2); // Draw the wire\n\nif (state) {\n    for (let i = 0; i &lt;= numCircles; i++) {\n        // Calculate the position of each circle\n        let circlePos = (millis() * speed + i * spacing * 50) % distance; // Space circles along the wire\n\n        let x = lerp(x1, x2, circlePos / distance);\n        let y = lerp(y1, y2, circlePos / distance);\n\n        fill(255, 0, 0);\n        noStroke();\n        circle(x, y, 9); // Draw each circle (electron)\n    }\n}\n</code></pre> <p>}</p> <p>function drawBattery(x, y, width, height, orientation, level) {   push(); // Save current transformation</p> <p>if (orientation === \"horizontal\") {     // For horizontal orientation, we'll swap width and height and use rotation     translate(x + height, y);     rotate(PI/2);     x = 0;     y = 0;     // Swap width and height     let temp = width;     width = height;     height = temp;   } else {     translate(x, y);     x = 0;     y = 0;   }</p> <p>// Calculate battery proportions   let terminalHeight = height * 0.1; // Height of the positive terminal   let bodyHeight = height - terminalHeight;   let goldPercent = 0.4; // Proportion of the battery that is gold (positive)   let goldHeight = bodyHeight * goldPercent;   let blackHeight = bodyHeight * (1 - goldPercent);   let batteryBorder = width * 0.1;   let innerWidth = width - (batteryBorder * 2);</p> <p>// Draw battery outline   strokeWeight(2);   stroke(100);   fill(240);   rect(0, 0, width, height, 5, 5, 5, 5); // Rounded corners</p> <p>// Positive terminal (smaller rectangle at top)   fill(220);   noStroke();   rect(width * 0.3, -terminalHeight, width * 0.4, terminalHeight);</p> <p>// Positive electrode (gold)   fill('gold');   rect(batteryBorder, batteryBorder, innerWidth, goldHeight);</p> <p>// Negative electrode (black)   fill('black');   rect(batteryBorder, batteryBorder + goldHeight, innerWidth, blackHeight);</p> <p>// Calculate battery level height/width   let levelHeight = map(level, 0, 100, 0, bodyHeight - batteryBorder * 2);</p> <p>// Determine color based on battery level   let levelColor;   if (level &lt; 20) {     levelColor = color(255, 0, 0); // Red for low battery   } else if (level &lt; 50) {     levelColor = color(255, 165, 0); // Orange for medium battery   } else {     levelColor = color(0, 255, 0); // Green for high battery   }</p> <p>// Draw battery level (starting from bottom)   fill(levelColor);   rect(     batteryBorder * 1.5,      height - batteryBorder - levelHeight,      innerWidth - batteryBorder,      levelHeight   );</p> <p>// Draw battery terminals   strokeWeight(2);   stroke(50);</p> <p>// Positive terminal symbol (+)   let centerX = width / 2;   let plusY = batteryBorder + goldHeight / 2;   line(centerX - 10, plusY, centerX + 10, plusY);   line(centerX, plusY - 10, centerX, plusY + 10);</p> <p>// Negative terminal symbol (-)   let minusY = batteryBorder + goldHeight + blackHeight / 2;   stroke('gray');   line(centerX - 10, minusY1.2, centerX + 10, minusY1.2);</p> <p>pop(); // Restore original transformation }</p> <p>// draw a solar cell with a grid upper left at (x,y) of width and height a title on top like \"Solar Cell\" function drawSolarCell(x, y, width, height, title, textColor) {   push(); // Save current drawing state   fill(textColor);   textSize(16);   textAlign(CENTER);   text(title, x+width/2, y-10);   // Main panel background   fill(40, 70, 110); // Dark blue-gray color typical of solar panels   stroke(80);   strokeWeight(2);   rect(x, y, width, height);</p> <p>// Grid lines for solar cells   const cellsPerRow = 4;   const cellsPerCol = 4;   const cellWidth = width / cellsPerRow;   const cellHeight = height / cellsPerCol;</p> <p>// Draw vertical grid lines   strokeWeight(1);   stroke(60);   for (let i = 1; i &lt; cellsPerRow; i++) {     line(x + i * cellWidth, y, x + i * cellWidth, y + height);   }</p> <p>// Draw horizontal grid lines   for (let i = 1; i &lt; cellsPerCol; i++) {     line(x, y + i * cellHeight, x + width, y + i * cellHeight);   }</p> <p>// Add metallic connectors   stroke(200);   strokeWeight(1);   for (let i = 0; i &lt; cellsPerRow; i++) {     for (let j = 0; j &lt; cellsPerCol; j++) {       // Draw thin lines representing the metallic connections       const cellX = x + i * cellWidth;       const cellY = y + j * cellHeight;</p> <pre><code>  // Horizontal connector lines\n  line(cellX + 2, cellY + cellHeight/2, \n       cellX + cellWidth - 2, cellY + cellHeight/2);\n\n  // Vertical connector lines\n  line(cellX + cellWidth/2, cellY + 2, \n       cellX + cellWidth/2, cellY + cellHeight - 2);\n}\n</code></pre> <p>}</p>"},{"location":"sims/sphere/","title":"Bouncing 3D Sphere Demo","text":"<p>You can also use the 3D \"WebGL\" rendering system that is built into p5.js.  WebGL, short for Web Graphics Library is is a JavaScript API for rendering interactive 2D and 3D graphics within any compatible web browser. The p5.js has many high-level 3D shapes such as box, cone, cylinder, ellipsoid, plane, sphere, and torus  in the WEBGL Library.</p> <ul> <li>3D Sphere Demo</li> </ul>"},{"location":"sims/sphere/#sample-prompt","title":"Sample Prompt","text":"<pre><code>1. Generate a single file p5.js sketch using WEBGL for a 3D animation.\n2. Show a sphere of size 50 that is bouncing around the canvas.\n3. Use the ```WEBGL``` as the third parameter of the createCanvas.\n4. Cover the sphere with a texture that has grid of white and red squares.\n5. Use noStroke() in the texture to not draw the outlines of the grid.\n6. Add a drop shadow under the sphere\n\nfunction setup() {\n  createCanvas(600, 400, WEBGL);\n</code></pre>"},{"location":"sims/sphere/#sample-response","title":"Sample Response","text":"<pre><code>// A bouncing sphere with a red and white grid texture\nlet x, y, z;\nlet xspeed, yspeed, zspeed;\nlet diameter = 50;\nlet radius = diameter / 2;\nlet canvasWidth = 600;\nlet canvasHeight = 400;\n\nfunction setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight, WEBGL);\n  // comment this out if running in the example\n  canvas.parent('canvas-container');\n  x = 0;\n  y = 0;\n  z = 0;\n  xspeed = 2;\n  yspeed = 2.3;\n  zspeed = 1.7;\n}\n\nfunction draw() {\n  background(240);\n\n  // Update the position of the sphere\n  x += xspeed;\n  y += yspeed;\n  z += zspeed;\n\n  // Check for bouncing\n  if (x &gt; width/2 - radius || x &lt; -width/2 + radius) {\n    xspeed *= -1;\n  }\n  if (y &gt; height/2 - radius || y &lt; -height/2 + radius) {\n    yspeed *= -1;\n  }\n  if (z &gt; 200 - radius || z &lt; -200 + radius) {\n    zspeed *= -1;\n  }\n\n  // Draw the sphere with a texture\n  push();\n  translate(x, y, z);\n  texture(createGridTexture());\n  sphere(diameter);\n  pop();\n}\n\n// create texture pattern of a grid of white and red squares\nfunction createGridTexture() {\n  let texSize = 200;\n  let texture = createGraphics(texSize, texSize);\n  // I had to add this line by\n  noStroke();\n  for (let i = 0; i &lt; texSize; i += 20) {\n    for (let j = 0; j &lt; texSize; j += 20) {\n      texture.fill((i + j) % 40 === 0 ? 'white' : 'red');\n      texture.rect(i, j, 20, 20);\n    }\n  }\n  return texture;\n}\n</code></pre>"},{"location":"sims/sphere/#what-we-learned","title":"What We Learned","text":"<ul> <li>P5.js has a robust library of 3D animation tools</li> <li>We need to specify the WEBGL rendering library when we create the canvas</li> <li>Rendering is very fast and smooth if your computer supports the WebGL API standards</li> <li>P5.js has a library for generating 3D shapes such as cone, cube and sphere</li> <li>You can pass a function to the shape that indicates what pattern (texture) to use on the shape</li> <li>P5.js has a function that builds textures</li> <li>You just need to generate a 2D pattern to use that texture.</li> </ul>"},{"location":"sims/sphere/#extending-the-lesson","title":"Extending the Lesson","text":"<ul> <li>Add a drop shadow to the ball</li> <li>Place axis lines in the background</li> <li>Add a slider to control the speed and size of the sphere</li> </ul>"},{"location":"sims/sphere/#sample-lesson-plan","title":"Sample Lesson Plan","text":""},{"location":"sims/sphere/#objective","title":"Objective","text":"<ul> <li>Understand the basics of 3D rendering using p5.js.</li> <li>Learn how to manipulate 3D objects and apply textures.</li> <li>Develop skills in JavaScript and graphics programming.</li> </ul>"},{"location":"sims/sphere/#duration","title":"Duration","text":"<p>1 hour</p>"},{"location":"sims/sphere/#materials-needed","title":"Materials Needed","text":"<ul> <li>Computers with internet access.</li> <li>Code editor (like p5.js Web Editor).</li> <li>Projector for demonstrations.</li> </ul>"},{"location":"sims/sphere/#lesson-outline","title":"Lesson Outline","text":""},{"location":"sims/sphere/#1-introduction-to-p5js-and-3d-graphics-15-minutes","title":"1. Introduction to p5.js and 3D Graphics (15 minutes)","text":"<ul> <li>Brief overview of p5.js and its capabilities.</li> <li>Introduction to the concept of 3D graphics.</li> <li>Discuss the <code>WEBGL</code> renderer in p5.js.</li> </ul>"},{"location":"sims/sphere/#2-basic-3d-shapes-and-transformations-10-minutes","title":"2. Basic 3D Shapes and Transformations (10 minutes)","text":"<ul> <li>Demonstrate how to create basic 3D shapes (e.g., sphere).</li> <li>Explain translation and rotation in a 3D space.</li> </ul>"},{"location":"sims/sphere/#3-hands-on-coding-bouncing-sphere-15-minutes","title":"3. Hands-on Coding: Bouncing Sphere (15 minutes)","text":"<ul> <li>Students will follow along to create a basic 3D sketch with a bouncing sphere.</li> <li>Explain the concepts of <code>setup()</code> and <code>draw()</code> functions.</li> <li>Discuss coordinate systems and movement in 3D space.</li> </ul>"},{"location":"sims/sphere/#4-adding-texture-to-the-sphere-10-minutes","title":"4. Adding Texture to the Sphere (10 minutes)","text":"<ul> <li>Introduce the concept of textures in 3D.</li> <li>Guide students to modify their sketch to apply a grid texture to the sphere.</li> </ul>"},{"location":"sims/sphere/#5-customization-and-experimentation-5-minutes","title":"5. Customization and Experimentation (5 minutes)","text":"<ul> <li>Encourage students to modify the speed, size, and texture of the sphere.</li> <li>Discuss how these changes affect the animation.</li> </ul>"},{"location":"sims/sphere/#6-qa-and-discussion-5-minutes","title":"6. Q&amp;A and Discussion (5 minutes)","text":"<ul> <li>Open the floor for questions.</li> <li>Discuss potential applications of what they've learned.</li> </ul>"},{"location":"sims/sphere/#assessment","title":"Assessment","text":"<ul> <li>Observe student engagement and understanding during the hands-on coding session.</li> <li>Review the modifications students make to their sketches for creativity and understanding.</li> </ul>"},{"location":"sims/sphere/#follow-up-activities","title":"Follow-Up Activities","text":"<ul> <li>Assign a project where students create their own 3D animation using p5.js.</li> <li>Encourage students to explore more complex shapes and textures.</li> </ul>"},{"location":"sims/sphere/#draw-shadow","title":"Draw Shadow","text":"<pre><code>  // Draw shadow\n  drawShadow(ball.x+10, ball.y+30, ballSize);\n\n  function drawShadow(x, y, size) {\n  push();\n    noStroke();\n    fill(50, 50, 50, 100); // Semi-transparent shadow\n    ellipse(x, y + size / 4, size * 0.8, size / 8);\n  pop();\n}\n</code></pre>"},{"location":"sims/sphere/#references","title":"References","text":"<ul> <li>YouTube Video of the Amiga Boing Ball</li> <li>p5.js Reference</li> <li>p5.js Web Editor</li> </ul>"},{"location":"sims/star-rating/","title":"Star Rating MicroSim","text":"<p>Run the MicroSim Edit this MicroSim</p>"},{"location":"sims/star-rating/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim demonstrates an interactive star rating system with five stars and a slider control. It teaches concepts of: - Interactive UI controls - Responsive design - Visual feedback - User input handling</p>"},{"location":"sims/star-rating/#features","title":"Features","text":"<ul> <li>Five horizontal stars displayed using the \u2605 character</li> <li>Slider control to adjust the rating from 1 to 5 stars</li> <li>Default value of 3 stars</li> <li>Visual feedback showing the current rating</li> <li>Responsive design that adapts to container width</li> <li>Accessible interface with screen reader support</li> </ul>"},{"location":"sims/star-rating/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/star-rating/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>Middle school to high school, Computer Science/Programming, User Interface Design</p>"},{"location":"sims/star-rating/#activities","title":"Activities","text":""},{"location":"sims/star-rating/#star-rating-basics","title":"Star Rating Basics","text":"<ol> <li>Observe how the stars change color based on the slider position</li> <li>Notice the numerical rating display below the stars</li> <li>Experiment with different rating values</li> </ol>"},{"location":"sims/star-rating/#visual-design","title":"Visual Design","text":"<ol> <li>Discuss the use of colors (gold for active stars, gray for inactive)</li> <li>Examine the spacing and sizing of the stars</li> <li>Consider the placement of the slider and rating display</li> </ol>"},{"location":"sims/star-rating/#interactive-elements","title":"Interactive Elements","text":"<ol> <li>Explore how the slider affects the star display</li> <li>Notice the smooth transitions between states</li> <li>Test the responsive behavior by resizing the window</li> </ol>"},{"location":"sims/star-rating/#accessibility","title":"Accessibility","text":"<ol> <li>Use screen readers to understand how the interface is described</li> <li>Discuss the importance of clear visual feedback</li> <li>Consider alternative input methods for users with different needs</li> </ol>"},{"location":"sims/star-rating/#technical-details","title":"Technical Details","text":"<p>The MicroSim is built using: - p5.js for graphics and interaction - Responsive canvas sizing - Standardized layout structure - Accessible controls and descriptions</p>"},{"location":"sims/star-rating/#references","title":"References","text":"<ul> <li>p5.js Reference</li> <li>Web Accessibility Guidelines</li> <li>Color Contrast Guidelines </li> </ul>"},{"location":"sims/string-harmonics/","title":"String Harmonics","text":"<p>Contributed by Shawn McBurnie.</p> <p></p> <p>String Harmonics Demo No Sound</p> <p>String Harmonics Demo With Sound</p>"},{"location":"sims/string-harmonics/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch on a canvas of width=800 and height=200.\nGenerate a demonstration of string harmonics.\nAllow the string to vary from a frequency of 1 to 16 wave forms.\nAdd a slider that changes the frequency with a step of .1.\nAdd two small black circles at the endpoints of the wave.\nIndent the endpoints with a margin of 20 points from the edges.\nAdd a label and value to the left of the slider.\n</code></pre>"},{"location":"sims/string-harmonics/#lesson-plan-exploring-string-harmonics-with-interactive-simulation","title":"Lesson Plan: Exploring String Harmonics with Interactive Simulation","text":""},{"location":"sims/string-harmonics/#objective","title":"Objective","text":"<ul> <li>Understand the concept of string harmonics and how frequency affects sound pitch.</li> </ul>"},{"location":"sims/string-harmonics/#grade-level","title":"Grade Level","text":"<ul> <li>9th Grade</li> </ul>"},{"location":"sims/string-harmonics/#subject","title":"Subject","text":"<ul> <li>Physics (Sound and Waves)</li> </ul>"},{"location":"sims/string-harmonics/#materials-needed","title":"Materials Needed","text":"<ul> <li>Computers with internet access</li> <li>Access to the string harmonics simulation String Harmonics Simulation</li> <li>Notebooks and pens for taking notes</li> </ul>"},{"location":"sims/string-harmonics/#duration","title":"Duration","text":"<ul> <li>1 Class Period (45-60 minutes)</li> </ul>"},{"location":"sims/string-harmonics/#introduction-10-minutes","title":"Introduction (10 minutes)","text":"<ul> <li>Brief Lecture: Introduce the concept of harmonics in strings, explaining how vibrations at different frequencies produce different sounds.</li> <li>Demonstration: Show a real-world example, like a guitar string, and discuss how varying the tension changes the sound.</li> </ul>"},{"location":"sims/string-harmonics/#interactive-session-20-minutes","title":"Interactive Session (20 minutes)","text":"<ul> <li>Hands-On Activity: Students explore the string harmonics simulation. They are encouraged to adjust the frequency slider and observe changes in wave patterns and listen to the pitch changes.</li> <li>Guided Questions: As they explore, ask questions like, \"What happens to the wave as you increase the frequency?\" or \"How does the change in frequency affect the sound you hear?\"</li> </ul>"},{"location":"sims/string-harmonics/#group-discussion-10-minutes","title":"Group Discussion (10 minutes)","text":"<ul> <li>Sharing Observations: Students discuss their findings in small groups, focusing on the relationship between frequency, wave pattern, and pitch.</li> <li>Connecting Theory and Practice: Discuss how this simulation relates to real-life instruments and sound production.</li> </ul>"},{"location":"sims/string-harmonics/#application-activity-10-minutes","title":"Application Activity (10 minutes)","text":"<ul> <li>Creative Exploration: Ask students to imagine and sketch a new musical instrument that uses the principles of string harmonics.</li> <li>Discussion: Share ideas within the class, discussing the feasibility and creativity of the designs.</li> </ul>"},{"location":"sims/string-harmonics/#conclusion-5-minutes","title":"Conclusion (5 minutes)","text":"<ul> <li>Recap: Summarize key concepts learned about harmonics, frequency, and sound production.</li> <li>Homework Assignment: Students write a brief report on how understanding string harmonics is essential in designing musical instruments.</li> </ul>"},{"location":"sims/string-harmonics/#assessment","title":"Assessment","text":"<ul> <li>Participation in the interactive session and group discussion.</li> <li>Quality and creativity of the musical instrument design.</li> <li>Understanding demonstrated in the homework report.</li> </ul>"},{"location":"sims/string-harmonics/#a-story-about-this-microsim","title":"A Story about this MicroSim","text":"<p>I met Shawn at a ChatGPT meetup and I gave him a short demo of MicroSims.  The meetup was over lunch.  By supper time he had already finished his first MicroSim, despite never having used Processing before.  AND he figured out how to get sound working.  WOW!</p>"},{"location":"sims/supply-and-demand/","title":"Supply and Demand","text":"<p>Run the Supply and Demand Demo Edit the Supply and Demand MicroSim</p> <p>In this example, I uploaded an image of an old JavaScript SVG program I had written over 15 years ago.  I asked ChatGPT to replicate the program using p5.js</p> <p>Prompt</p> <p>Create a single file p5.js sketch that replicates the function of this image.</p> <p></p>"},{"location":"sims/supply-and-demand/#lesson-plan","title":"Lesson Plan","text":"<p>This is a lesson plan for 10th-grade students in a microeconomics class. The lesson plan will include objectives, materials, procedure, and assessment for a lab activity using the p5.js sketch.</p> <ul> <li>Course: Microeconomics</li> <li>Grade Level: 10th Grade</li> <li>Duration: 45 minutes</li> </ul>"},{"location":"sims/supply-and-demand/#objectives","title":"Objectives","text":"<ul> <li>Students will understand the concept of the demand curve.</li> <li>Students will learn how changes in price affect the quantity demanded.</li> <li>Students will interact with a p5.js sketch to observe these economic principles visually.</li> </ul>"},{"location":"sims/supply-and-demand/#materials","title":"Materials","text":"<ul> <li>Computers with internet access and a web browser.</li> <li>Projector to demonstrate the p5.js lab.</li> <li>Copies of the demand curve lab worksheet.</li> </ul>"},{"location":"sims/supply-and-demand/#introduction-5-minutes","title":"Introduction (5 minutes)","text":"<ul> <li>Begin the lesson with a brief review of supply and demand.</li> <li>Introduce the demand curve as a visual representation of the relationship between price and quantity demanded.</li> </ul>"},{"location":"sims/supply-and-demand/#instruction-10-minutes","title":"Instruction (10 minutes)","text":"<ul> <li>Explain how the demand curve is typically downward sloping.</li> <li>Describe how to read the demand curve.</li> <li>Demonstrate the interactive p5.js lab on the projector.</li> </ul>"},{"location":"sims/supply-and-demand/#activity-procedure-20-minutes","title":"Activity Procedure (20 minutes)","text":"<ul> <li>Students will access the p5.js sketch on their computers.</li> <li>They will manipulate the price slider and observe changes in quantity demanded.</li> <li>Students will complete the lab worksheet with questions related to their observations.</li> </ul>"},{"location":"sims/supply-and-demand/#discussion-5-minutes","title":"Discussion (5 minutes)","text":"<ul> <li>Regroup and discuss the findings as a class.</li> <li>Highlight the key economic principles demonstrated by the lab.</li> </ul>"},{"location":"sims/supply-and-demand/#assessment-5-minutes","title":"Assessment (5 minutes)","text":"<ul> <li>Review the lab worksheet answers as a class.</li> <li>Provide feedback on their understanding and clear up any misconceptions.</li> </ul>"},{"location":"sims/supply-and-demand/#extensions","title":"Extensions","text":"<ul> <li>Students can explore how factors other than price affect the demand curve.</li> <li>For homework, students could be asked to draw their own demand curves based on different scenarios.</li> </ul>"},{"location":"sims/supply-and-demand/#closure","title":"Closure","text":"<ul> <li>Summarize the day's lesson and discuss how the demand curve relates to real-world economics.</li> </ul>"},{"location":"sims/supply-and-demand/#sample-code","title":"Sample Code","text":"<p>The code has several parts:</p> <ol> <li>Global Variables - allocate memory and set default layout values</li> <li>setup() - runs only once</li> <li>draw() - continually runs as users change the slider</li> </ol> <pre><code>let width = 400;\nlet height = 400;\nlet margin = 50; // side around the plot\nlet priceSlider;\nlet demandCurve;\nlet maxPrice = 200;\nlet maxQuantity = 200;\nlet price = 100;\nlet quantity = 100;\nlet labelValueMargin = 140\n\nfunction setup() {\n  const canvas = createCanvas(width, height);\n  canvas.parent('canvas-container');\n  textSize(16);\n\n  // Create a slider element for price adjustment\n  priceSlider = createSlider(0, maxPrice, price);\n  priceSlider.position(labelValueMargin, height - 35);\n  priceSlider.style('width', width - labelValueMargin - 20 + 'px');\n\n  // Define the demand curve as a function\n  demandCurve = (p) =&gt; maxQuantity - p;\n}\n\nfunction draw() {\n  background(240);\n\n  // Update quantity based on the current value of the price slider\n  price = priceSlider.value();\n  quantity = demandCurve(price);\n\n  // Draw the axes\n  stroke(0);\n  strokeWeight(1);\n  line(margin, margin, margin, height - margin); // Vertical Y-axis\n  // Horizontal X axis\n  line(margin, height - margin, width - margin, height - margin);\n  strokeWeight(0);\n  text('Price', 30, 40); // Y-axis label\n  text('Quantity Sold', width - margin - 70, height - margin - 10); // X-axis label\n\n  // Draw the demand curve\n  stroke(255, 0, 0);\n  strokeWeight(3);\n  line(margin, margin, width - margin, height - margin);\n\n  // Draw a point on the demand curve based on current price and quantity\n  fill(0, 0, 255);\n  noStroke();\n  x = map(quantity, 0, maxQuantity, margin, height - margin)\n  y = map(price, 0, maxPrice, width - margin, margin)\n  circle(x,y,10);\n\n  stroke('silver');\n  line(margin, y, x, y)\n  line(x, y, x, height - margin)\n\n  fill(0);\n  noStroke();\n  circle(\n    margin, \n    map(price, 0, maxPrice, width - margin, margin), 10);\n\n  circle(\n    map(quantity, 0, maxQuantity, margin, height - margin), \n    height - margin, 10);\n\n  // Text annotations\n  noStroke();\n  fill(0);\n  textSize(16);\n  text(\"Price and Demand Curve\", 120, 30);\n  text(`Input Price: ${price}`, 10, height - 20);\n\n  text(`Output: Quantity = ${quantity}`, 70, 490);\n  textSize(12);\n\n  // instructions\n  let keyMargin = 180;\n  text(`Adjust price by moving the slider.`,     keyMargin, margin);\n  text(`Note that as the input (price) changes`, keyMargin, margin + 20);\n  text(`    the quantity sold also changes.`,    keyMargin, margin + 40);\n  text(`At high prices a low quantity is sold.`, keyMargin, margin + 60);\n  text(`At low prices a high quantity is sold.`, keyMargin, margin + 80);\n}\n</code></pre>"},{"location":"sims/template/","title":"MicroSim Template","text":"<p>Run the MicroSim Edit this MicroSim</p>"},{"location":"sims/template/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/name/main.html\" height=\"400\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/template/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to specify the drawing of a static filled circle.</p>"},{"location":"sims/template/#sample-prompt","title":"Sample Prompt","text":"<p>Prompt</p> <p>Create a single file p5.js sketch.   Draw a green circle on a 600x400 canvas with a radius of 200.</p>"},{"location":"sims/template/#sample-response","title":"Sample Response","text":"<pre><code>// canvas regions setup\n// let canvasWidth = 750;\nlet drawHeight = 400;\nlet controlHeight = 50;\nlet canvasHeight = drawHeight + controlHeight;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\n\nfunction setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  var mainElement = document.querySelector('main');\n  canvas.parent(mainElement);\n}\n\nfunction draw() {\n  // background of drawing region\n  fill('aliceblue');\n  rect(0, 0, canvasWidth, drawHeight);\n\n  // background of controls\n  fill('whitegray');\n  rect(0, drawHeight, canvasWidth, controlHeight);\n  circle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/template/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/template/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/template/#activities","title":"Activities","text":""},{"location":"sims/template/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/template/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/template/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/template/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/template/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"},{"location":"sims/template/#references","title":"References","text":"<ul> <li>Processing Wiki on Positioning Your Canvas</li> </ul>"},{"location":"sims/wave-sums/","title":"Wave Sum","text":""},{"location":"sims/wave-sums/#wave-sums","title":"Wave Sums","text":"<p>This lab demonstrates calculating the sum of sine waves of different lengths. Understanding how to convert waves from spacial domains into frequency domains is a key component of signal processing and understanding the FFT algorithm for doing Fast-Fourier Transforms.</p> <p>Wave Sums Demo</p>"},{"location":"sims/yin-yang/","title":"Yin &amp; Yang MicroSim","text":"<p>Run the MicroSim Edit this MicroSim</p>"},{"location":"sims/yin-yang/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/name/main.html\" height=\"400\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/yin-yang/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to specify the drawing of a static filled circle.</p>"},{"location":"why/","title":"Why MicroSims","text":"<p>This section contains content about why MicroSims are relevant to education and our analysis of the potential impact of better quality MicroSims in the quality of education.</p>"},{"location":"why/#motivation","title":"Motivation","text":"<p>Motivation</p>"},{"location":"why/#impact-analysis-query","title":"Impact Analysis Query","text":"<p>Deep Research Query on the Impact Analysis</p>"},{"location":"why/#deep-research-results","title":"Deep Research Results","text":"<p>Results of the Deep Research Analysis</p>"},{"location":"why/deep-research-final/","title":"Interactive Simulations (MicroSims) in STEM Education","text":"<p>OpenAI Deep Research Final Response to the MicroSim Impact Analysis Prompt</p>"},{"location":"why/deep-research-final/#enhancing-engagement-and-conceptual-understanding","title":"Enhancing Engagement and Conceptual Understanding","text":"<p>Interactive MicroSims have been shown to boost student engagement and deepen conceptual understanding in STEM. By making abstract concepts tangible, simulations spark curiosity and motivation. Studies consistently report that students using interactive simulations exhibit higher interest and participation in STEM lessons (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review). </p> <p>For example, replacing a traditional physics demonstration with an interactive sim led to much higher in-class conceptual question scores (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review). </p> <p>Simulations also improve comprehension and knowledge retention compared to lectures or textbooks alone (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review). They allow learners to visualize invisible processes (like magnetic fields, molecular motions, or electric currents) and receive real-time feedback, bridging the gap between theory and real-world phenomena (ncc9630-ofirst@ncc9630.dvi) (ncc9630-ofirst@ncc9630.dvi). </p> <p>This dynamic, visual approach helps demystify complex ideas \u2013 one study noted that students exploring Newton\u2019s laws via a sim developed a deeper understanding than those taught with traditional methods (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review). In short, interactive sims turn passive learning into an active, engaging experience, leading to stronger grasp of STEM concepts.</p> <p>(Using PhET simulations to replace real equipment in lab \u2013 Circuit Construction Kit) Interactive simulations make the \u201cinvisible\u201d visible. In the circuit simulation (right), electrons are shown flowing as blue spheres \u2013 a view not possible with the real circuit (left). Such visual feedback helps students understand abstract phenomena like electric current (Using PhET simulations to replace real equipment in lab \u2013 Circuit Construction Kit). </p> <p>Simulations also provide a safe, game-like environment that encourages experimentation. Students can manipulate variables, test hypotheses, and immediately see outcomes without fear of damaging equipment or getting the \u201cwrong\u201d answer (Using PhET simulations to replace real equipment in lab \u2013 Circuit Construction Kit) (Using PhET simulations to replace real equipment in lab \u2013 Circuit Construction Kit). </p> <p>This freedom to explore promotes hands-on learning and trial-and-error discovery, which research shows leads to more meaningful learning than passive observation. In virtual labs, learners can quickly try multiple setups (e.g. adjusting gravity, mixing chemicals, tuning parameters) and observe results, fostering scientific inquiry and problem-solving skills. The combination of interactive control, instant feedback, and intuitive visuals makes MicroSims a powerful tool for engaging students and improving their conceptual understanding across STEM disciplines.</p>"},{"location":"why/deep-research-final/#how-students-interact-with-microsims","title":"How Students Interact with MicroSims","text":"<p>Students typically interact with MicroSims through guided exploration and playful experimentation. Effective simulations are designed with an intuitive interface (minimal text, familiar objects, drag-and-drop controls) so learners of various ages can start exploring immediately (ncc9630-ofirst@ncc9630.dvi). For instance, PhET simulations use everyday objects (bulbs, beakers, bicycles) as icons, helping students connect science concepts to prior knowledge (ncc9630-ofirst@ncc9630.dvi). As students manipulate a sim \u2013 turning dials, sliding sliders, toggling settings \u2013 the simulation responds instantly with animated changes (ncc9630-ofirst@ncc9630.dvi). </p> <p>This interactivity invites learners to ask \u201cWhat if\u2026?\u201d and see the consequences in real time. Studies of classroom use find that students often play with a simulation at first, then gradually focus on the underlying science as they notice patterns and cause-effect relationships (ncc9630-ofirst@ncc9630.dvi) (ncc9630-ofirst@ncc9630.dvi). </p> <p>Critically, the level of guidance accompanying a sim influences how deeply students engage. Too much step-by-step instruction can lead to shallow follow-the-directions behavior, whereas completely unguided \u201cfree play\u201d might leave students unsure what to do (ncc9630-ofirst@ncc9630.dvi). </p> <p>The optimal approach is to provide minimal but strategic scaffolding \u2013 for example, a couple of open-ended questions or challenges that nudge students to investigate key features (ncc9630-ofirst@ncc9630.dvi) (ncc9630-ofirst@ncc9630.dvi). </p> <p>Research comparing activity designs found that \u201cgentle guidance\u201d (targeted prompts to explore certain controls) yielded better student reasoning than either an overly scripted lab or a totally open task (ncc9630-ofirst@ncc9630.dvi) (ncc9630-ofirst@ncc9630.dvi). With light guidance, students engage in self-directed inquiry: they form predictions, test them in the sim, observe outcomes, and iterate. In interviews, students describe using sims to build a mental framework of the concept, essentially learning by doing in a virtual environment (ncc9630-ofirst@ncc9630.dvi) (ncc9630-ofirst@ncc9630.dvi). This exploratory interaction is often accompanied by peer discussion as students work in pairs or small groups at a computer, debating what they see and challenging each other\u2019s ideas (similar to how they\u2019d collaborate in a hands-on lab). Notably, because simulations remove the fear of breaking real equipment or getting hurt, students tend to be more adventurous \u2013 clicking buttons, resetting conditions, trying extreme values \u2013 which leads to rich learning moments (ncc9630-ofirst@ncc9630.dvi). In one study, learners using a circuit sim \u201cexplored and investigated without needing much assistance,\u201d unlike peers with real apparatus who were nervous about breaking something (ncc9630-ofirst@ncc9630.dvi). Overall, students interact with MicroSims in a highly engaged, trial-and-error manner, and with thoughtful design and minimal guidance, this interaction becomes a productive form of active learning.</p>"},{"location":"why/deep-research-final/#effectiveness-across-grade-levels-5th-grade-to-college","title":"Effectiveness Across Grade Levels (5th Grade to College)","text":"<p>A major advantage of interactive simulations is their adaptability across a wide range of education levels. From upper elementary through college, appropriately tailored MicroSims can make age-appropriate learning more effective. Research shows that even young learners (10\u201312 year-olds) can benefit significantly from simulations when guided properly. In one case, fifth and sixth graders used an ecosystem simulation over several class sessions and showed \u201cconsiderable improvements\u201d in several systems-thinking skills afterward (ERIC - EJ833089 - An Investigation of the Potential of Interactive Simulations for Developing System Thinking Skills in Elementary School: A Case Study with Fifth-Graders and Sixth-Graders, International Journal of Science Education, 2009-Mar) (ERIC - EJ833089 - An Investigation of the Potential of Interactive Simulations for Developing System Thinking Skills in Elementary School: A Case Study with Fifth-Graders and Sixth-Graders, International Journal of Science Education, 2009-Mar). This demonstrates that complex ideas (like food webs or dynamic ecosystems) can be grasped by younger students if delivered via interactive, visual simulations. Middle school students, with their growing abstract reasoning, readily engage with sims for topics like basic physics, Earth science, or introductory algebra. By high school, simulations become a staple for science classes \u2013 e.g. exploring forces and motion, electricity, chemical reactions, or genetics \u2013 and are often used to supplement or replace physical lab experiments. In fact, high school and college instructors report using the same PhET simulations for similar conceptual goals (such as promoting understanding of fundamental principles or scientific inquiry), adjusting the surrounding activity to the learner\u2019s level (Examining the Use of PhET Interactive Simulations  in US College and High School Classrooms). The flexibility of sims allows teachers to use them in varied ways \u2013 from demos in a 5th-grade classroom to inquiry labs in AP Physics to concept visualizations in a college lecture.</p> <p>Across all levels, the core benefits remain consistent: simulations make learning interactive, visual, and student-centered. The difference lies in the complexity of content and scaffolding. Younger students may need simpler interfaces, more guidance, and contexts tied to everyday life (for example, a 5th-grade water cycle sim with cartoon graphics). Older students can handle more complex controls, quantitative data displays, and open-ended exploration (e.g. a college-level sim that lets them discover quantum energy levels). But fundamentally, the engaging nature of MicroSims works from elementary to higher education. Notably, most research to date has focused on secondary and post-secondary contexts, with fewer studies in early grades (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review). This suggests a gap and an opportunity: developing more MicroSims for K\u20135 topics (and studying their impact) could yield high payoffs in those early years where hands-on resources are scarce. The same is true for special education settings \u2013 well-designed interactive sims might greatly help learners with special needs, though more research is needed in that arena (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review). In summary, interactive simulations can be generalized as effective learning tools across educational levels. They should be designed with flexibility and accessibility in mind so that a broad spectrum of students \u2013 from a curious fifth grader to a college STEM major \u2013 can intuitively engage with the material and construct understanding.</p>"},{"location":"why/deep-research-final/#common-characteristics-of-the-most-effective-microsims","title":"Common Characteristics of the Most Effective MicroSims","text":"<p>Not all simulations are created equal. The highest-impact MicroSims tend to share a set of common design characteristics that maximize learning: </p> <ul> <li> <p>Intuitive, student-friendly interfaces: Effective sims use clean visuals, minimal text, and familiar metaphors so that students can jump in without extensive instructions (ncc9630-ofirst@ncc9630.dvi). Controls are straightforward (dragging, sliding, clicking) and respond instantly, creating a smooth \u201cdialogue\u201d between the student\u2019s actions and the simulation\u2019s feedback (ncc9630-ofirst@ncc9630.dvi). An intuitive design reduces cognitive load and lets learners focus on the science, not the software. </p> </li> <li> <p>Use of familiar contexts and analogies: The best sims depict scenarios or objects that students recognize from everyday life (bikes, balloons, magnets, etc.) (ncc9630-ofirst@ncc9630.dvi). Tying abstract concepts to concrete, familiar things helps students form mental connections. Analogies embedded in the sim (e.g. modeling electric current like water flow) can further aid understanding (ncc9630-ofirst@ncc9630.dvi). This contextualization means students spend less time wondering \u201cwhat am I looking at?\u201d and more time asking \u201chow does this work?\u201d.</p> </li> <li> <p>Making the invisible visible: A hallmark of great STEM sims is their ability to show hidden processes and multiple representations. They visualize things that are normally invisible \u2013 electrons moving through a circuit, molecules colliding, fields radiating, forces acting \u2013 thereby demystifying abstract phenomena (ncc9630-ofirst@ncc9630.dvi) (ncc9630-ofirst@ncc9630.dvi). Many effective sims include toggles for different views (e.g. switching between a macroscopic view and a molecular view, or overlaying graphs and data) so students can link causes and effects across representations. By seeing the unseeable, learners can develop accurate mental models of scientific principles (ncc9630-ofirst@ncc9630.dvi).</p> </li> <li> <p>Interactive and responsive feedback: High-quality MicroSims are highly interactive and provide real-time feedback. Every student action (moving a slider, adding an object, changing a value) produces a dynamic response \u2013 graphs update, animations play, outcomes change \u2013 reinforcing the cause-and-effect relationship (ncc9630-ofirst@ncc9630.dvi). This immediacy helps students learn through exploration and experimentation, much like playing with real-world objects. Many sims also build in \u201csoft boundaries\u201d or productive constraints that guide learners towards core concepts (for example, limiting extraneous details or unrealistic actions) (Using PhET simulations to replace real equipment in lab \u2013 Circuit Construction Kit) (Using PhET simulations to replace real equipment in lab \u2013 Circuit Construction Kit). These constraints focus attention on the important variables without overtly telling students what to do.</p> </li> <li> <p>Appropriate challenge and scaffolding: The most effective simulations hit a sweet spot between ease and challenge. They often include little puzzles or goal-oriented tasks implicit in the design (ncc9630-ofirst@ncc9630.dvi) \u2013 for instance, an electricity sim might challenge students to light a bulb, or a gravity sim might invite them to achieve a stable orbit. Such challenges encourage curiosity. At the same time, the sim should allow open-ended play and discovery. Many top-tier sims are used with accompanying inquiry-based activities that provide light scaffolding (guiding questions, tips) without spoiling the fun of discovery (ncc9630-ofirst@ncc9630.dvi). This balance ensures students remain in the productive zone of exploration \u2013 not frustrated by complexity, but also not just mindlessly clicking.</p> </li> <li> <p>Research-tested and refined: Another common feature is that these MicroSims are iteratively user-tested with students and educators. For example, the PhET simulations undergo extensive student interviews and classroom testing, with revisions made until students reliably grasp the intended concepts and find the interface intuitive (ncc9630-ofirst@ncc9630.dvi) (ncc9630-ofirst@ncc9630.dvi). This kind of refinement, driven by education research, results in simulations that effectively target known misconceptions and difficult concepts. The end product is a sim that \u201celicits only correct concepts\u201d from learners because the design itself guides them toward the right understanding (ncc9630-ofirst@ncc9630.dvi). In essence, the best MicroSims embed good pedagogy into the software.</p> </li> </ul> <p>When simulations exhibit these characteristics \u2013 intuitive design, real-world context, making the invisible visible, interactive feedback, balanced challenge, and research-based refinement \u2013 they become tremendously effective learning tools. Such sims engage students emotionally (through game-like fun and curiosity) and cognitively (through experimentation and visualization), resulting in deeper understanding. These features should be a blueprint for developing new high-impact simulations.</p>"},{"location":"why/deep-research-final/#evidence-of-usage-and-effectiveness","title":"Evidence of Usage and Effectiveness","text":"<p>Both quantitative and qualitative data underscore the effectiveness of interactive simulations in education. Usage statistics alone speak to their impact: for example, the popular PhET simulators (free online STEM sims) have been run tens of millions of times per year worldwide (Examining the Use of PhET Interactive Simulations  in US College and High School Classrooms), and usage surged even higher during recent years of remote learning. ExploreLearning\u2019s Gizmos platform similarly offers over 500 simulations for grades 3\u201312, reflecting widespread adoption in classrooms (Gizmos: Interactive STEM Simulations &amp; Virtual Labs). This broad usage is driven by positive results. Dozens of empirical studies have been conducted \u2013 many using pre- and post-test designs \u2013 and a majority conclude that students learn more with simulations than with traditional methods (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review) (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review). For instance, in a controlled experiment with high school physics labs, students who used a circuit simulation outperformed their peers who used real circuit kits on later exam questions, despite having the same lesson otherwise (ncc9630-ofirst@ncc9630.dvi). Six weeks after the lesson, the sim group scored significantly higher on conceptual questions about circuits, indicating superior long-term retention (ncc9630-ofirst@ncc9630.dvi). Moreover, when both groups were eventually asked to build a physical circuit, the students trained on the sim were faster and more confident at the task than those who initially used real equipment (ncc9630-ofirst@ncc9630.dvi). This suggests that well-designed MicroSims can transfer learning to hands-on skills \u2013 dispelling the notion that virtual labs are somehow less \u201creal\u201d or effective.</p> <p>Qualitative feedback from both students and teachers further highlights the value of MicroSims. Students often report that they enjoy using simulations and find them helpful for understanding difficult concepts. In interviews, many described simulations as giving them an intuitive feel for phenomena \u2013 \u201cI could really visualize the inner workings of the process,\u201d as one student said about a sim, adding that it taught them more than the lecture alone (ncc9630-ofirst@ncc9630.dvi). Another student noted a simulation \u201chelped me gain intuition about the topic\u2026 especially useful where it\u2019s normally not possible to directly observe the phenomenon\u201d (e.g. atoms moving or charges flowing) (ncc9630-ofirst@ncc9630.dvi). Such testimonials illustrate how simulations can illuminate topics that students previously found opaque or intimidating. Teachers likewise observe that simulations increase student engagement: quiet students come alive when at the keyboard, and classes buzz with discussion around \u201cwhat happens if we try this?\u201d Many educators deliberately use sims to target known misconceptions \u2013 for example, letting students play with a gravity sim to confront their misunderstandings about mass and free-fall. In surveys of hundreds of teachers, the primary goals cited for using simulations include developing conceptual understanding and promoting inquiry in their students (Examining the Use of PhET Interactive Simulations  in US College and High School Classrooms). Teachers value that sims can be flexibly integrated into lectures, labs, or homework, and used with diverse learners from remedial to advanced levels (Examining the Use of PhET Interactive Simulations  in US College and High School Classrooms) (Examining the Use of PhET Interactive Simulations  in US College and High School Classrooms). </p> <p>From a broader perspective, meta-analyses and literature reviews reinforce these positive outcomes. A recent systematic review of 31 studies concluded that digital simulations (especially interactive ones) consistently yield improvements in students\u2019 conceptual knowledge, problem-solving skills, and engagement, across STEM subjects (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review) (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review). The evidence is particularly strong in domains like physics and chemistry where visualizing abstract processes is key (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review) (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review). It\u2019s also notable that in the worst-case comparisons, simulations perform on par with traditional instruction, and in the best cases they provide significant gains (Using PhET simulations to replace real equipment in lab \u2013 Circuit Construction Kit). Additionally, simulations can positively influence attitudes: several studies found that using MicroSims made students more interested in STEM and more confident in their ability to learn science (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review) (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review). This motivational boost is hard to quantify but was evident in classrooms where students would continue tinkering with a sim even after an assignment, simply because it was fun and intriguing. In summary, the combined quantitative and qualitative data make a compelling case that interactive MicroSims are both well-utilized and highly effective educational tools. They improve learning outcomes, enhance engagement, and are beloved by students and teachers alike \u2013 a rare triple-win in education.</p>"},{"location":"why/deep-research-final/#high-impact-microsim-categories-and-development-priorities","title":"High-Impact MicroSim Categories and Development Priorities","text":"<p>Based on the research and current gaps, the following categories of interactive simulations emerge as the most impactful for STEM education. These are areas where existing sims have proven effective and where developing new MicroSims could yield significant educational gains:</p> <ul> <li> <p>1. Physics and Engineering Simulations: Physics has long been a fruitful domain for simulations, given its abstract concepts and invisible forces. Sims that cover classical mechanics (motion, gravity, energy), electromagnetism (electric circuits, fields, magnetism), waves (sound, light), and modern physics (quantum phenomena) have shown high impact on learning. They allow students to visualize forces and fields, slow down or pause motion, and experiment with parameters that are impossible to isolate in the real world (ncc9630-ofirst@ncc9630.dvi) (ncc9630-ofirst@ncc9630.dvi). For example, circuit simulations let students see charge flow and instantly reconfigure circuits, leading to better conceptual understanding than using wires and bulbs alone (ncc9630-ofirst@ncc9630.dvi). Similarly, engineering-oriented sims (e.g. building bridges or rockets) provide sandbox environments for design and experimentation. These physics/engineering MicroSims are highly engaging and have strong evidence of improving learning, so continuing to develop them (especially for topics that are hard to demonstrate in class, like magnetic fields or semiconductor physics) will yield great benefits.</p> </li> <li> <p>2. Chemistry and Molecular Simulations: Chemistry simulations allow students to enter the molecular world \u2013 to see atoms, molecules, and reactions that are otherwise invisible. High-impact examples include sims for chemical bonding, reactions and equilibria, gas laws, solutions and pH, and atomic structure. They often feature multiple representations (molecular animations alongside graphs of concentration or energy) which help students link the microscopic and macroscopic levels of chemistry (ncc9630-ofirst@ncc9630.dvi). These sims also provide a safe virtual lab for experiments that would be dangerous, expensive, or time-consuming (e.g. exploring reaction rates by instantly adjusting temperature or trying many different reactant combinations). Students can visualize how molecules collide and react, gaining an intuitive understanding of kinetics and equilibrium. Research indicates that such molecular-level simulations can correct misconceptions (like what dissolving really looks like) and improve conceptual grasp in chemistry courses (ncc9630-ofirst@ncc9630.dvi) (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review). Developing new MicroSims for under-taught areas (for example, organic reaction mechanisms or environmental chemistry processes) could be especially impactful, as they would make challenging content far more accessible.</p> </li> <li> <p>3. Biology and Life Science Simulations: In life sciences, simulations help model processes that occur within organisms or ecosystems over time. Cell and molecular biology sims (e.g. gene expression, cellular respiration, protein synthesis) let students manipulate biological pathways and observe outcomes, aiding understanding of complex sequences and interactions. Human anatomy and physiology can also be explored via interactive models (for example, simulating the circulatory system or neural networks). These are safer and often more ethical than traditional dissection or lab experiments, while still providing a hands-on feel. At the larger scale, ecology and environmental science simulations (such as predator-prey population models, disease spread simulations, or climate change models) allow students to experiment with system variables and see long-term impacts in accelerated time. Such sims promote systems thinking by showing how changes in one part of a biological system affect the whole. For instance, a food web simulation might show what happens to an ecosystem if a species is removed or a parameter (like rainfall) changes. Biology MicroSims are engaging because they often connect to real-life issues (health, environment) and can incorporate game-like scenarios (e.g. maintain the balance of an ecosystem). There is qualitative evidence that students find these simulations memorable and insightful for grasping living systems (ERIC - EJ833089 - An Investigation of the Potential of Interactive Simulations for Developing System Thinking Skills in Elementary School: A Case Study with Fifth-Graders and Sixth-Graders, International Journal of Science Education, 2009-Mar). Expanding this category \u2013 especially simulations of genetics, evolution, and complex ecosystems \u2013 will significantly enhance STEM education, as these are areas students often struggle to visualize.</p> </li> <li> <p>4. Mathematics and Computational Simulations: Math-focused MicroSims help students visualize abstract mathematical concepts by turning them into interactive objects. Examples range from elementary-level sims (exploring fractions with pie charts that students can adjust) to advanced math (interactively graphing functions and seeing how parameters transform the curve). Algebra and geometry sims can let learners manipulate equations or shapes and immediately see changes, reinforcing concepts like slope, intercept, congruence, and so on. Probability and statistics simulations (e.g. virtual coin flips or sampling distributions) enable students to experiment with large trials in seconds, building intuition about randomness and data patterns. There is evidence that connecting math concepts to visual, manipulative representations improves understanding, especially for learners who struggle with purely symbolic math. Even computational thinking and computer science basics can be taught via simple simulations (for instance, guiding a robot through a maze to teach programming logic, or visualizing sorting algorithms). While math sims have not been as extensively researched as science sims, platforms like PhET and others do include many math interactives and teachers report positive outcomes in engagement. New development in this category \u2013 such as MicroSims for calculus concepts (like an interactive integral that accumulates area) or for linear algebra (visualizing vectors and matrices) \u2013 could greatly support math learning by making the invisible logic of math visible and fun. Ensuring these sims tie into real-world contexts (like using simulations to model financial literacy or engineering problems) can further boost their impact by showing students why math matters.</p> </li> <li> <p>5. Complex Systems and \u201cSystems Thinking\u201d Simulations: This category cuts across disciplines and is especially crucial for developing systems thinking skills. These MicroSims model complex, dynamic systems with multiple interconnected parts, often incorporating feedback loops and time evolution. Examples include environmental systems (climate models, water resource management, sustainability scenarios), economic or social systems (simulation of a small economy or a city\u2019s growth), and integrated science issues (like an energy grid simulation combining technology and physics). Such simulations allow students to tweak one part of a system and observe ripple effects on the whole, teaching them to think in terms of interactions and dependencies. Research with an ecosystem simulation for middle schoolers showed that students can improve in understanding system structures and interactions after working with the sim (ERIC - EJ833089 - An Investigation of the Potential of Interactive Simulations for Developing System Thinking Skills in Elementary School: A Case Study with Fifth-Graders and Sixth-Graders, International Journal of Science Education, 2009-Mar). However, it also highlighted challenges in grasping feedback loops (ERIC - EJ833089 - An Investigation of the Potential of Interactive Simulations for Developing System Thinking Skills in Elementary School: A Case Study with Fifth-Graders and Sixth-Graders, International Journal of Science Education, 2009-Mar), suggesting that more development is needed to help learners recognize cyclical cause-and-effect. High-impact system sims often visualize flows (of energy, matter, money, etc.) and accumulate changes over time (for example, a graph of population over years in an ecology sim). They encourage what-if analysis, letting students act as policy-makers or scientists: \u201cWhat if we add more predators? What if carbon emissions are reduced by 50%?\u201d By seeing outcomes play out, students learn about stability, equilibrium, and unintended consequences \u2013 key aspects of systems thinking (ERIC - EJ833089 - An Investigation of the Potential of Interactive Simulations for Developing System Thinking Skills in Elementary School: A Case Study with Fifth-Graders and Sixth-Graders, International Journal of Science Education, 2009-Mar) (ERIC - EJ833089 - An Investigation of the Potential of Interactive Simulations for Developing System Thinking Skills in Elementary School: A Case Study with Fifth-Graders and Sixth-Graders, International Journal of Science Education, 2009-Mar). Given the importance of tackling complex real-world problems, developing more MicroSims in this category (and making them accessible from secondary school onward) could have a profound educational impact. They not only teach STEM content but also help students develop a holistic thinking approach needed in many fields.</p> </li> </ul> <p>These categories represent where interactive simulations can have the most significant impact on teaching and learning. When planning the development of new MicroSims, we recommend prioritizing these areas, as they either address core conceptual bottlenecks in STEM learning or fill a gap in current simulation offerings. Additionally, within each category, attention should be paid to scaling the simulation\u2019s design to different age groups (with appropriate complexity and supports) and to aligning simulations with curriculum needs and real-world relevance.</p>"},{"location":"why/deep-research-final/#key-takeaways-and-recommendations","title":"Key Takeaways and Recommendations","text":"<p>In summary, interactive MicroSims have proven to be transformative tools across STEM education by increasing engagement, making complex concepts understandable, and fostering inquiry skills. Students interact with these sims through active exploration, benefiting from intuitive design and immediate feedback that help them construct knowledge. The most effective simulations share common traits that educators and developers should emulate: simplicity of use, rich visualizations (especially of invisible processes), real-time interactivity, and built-in scaffolds or challenges that guide learning. The evidence \u2013 from improved test scores and long-term retention to enthusiastic student testimonials \u2013 confirms that well-designed simulations can significantly enhance learning outcomes. </p> <p>Going forward, development of high-impact MicroSims should focus on the categories above, leveraging what we know about effective design. In particular, expanding simulation resources for early grades and complex system topics will address current gaps and potentially yield big gains in student understanding (Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review). It\u2019s also recommended to continue rigorous testing and research on new simulations to ensure they meet learning objectives and are usable by diverse student populations. By doing so, the next generation of interactive simulations will not only cover more content areas but also integrate seamlessly into teaching practices, from 5th-grade science classes to university engineering courses. </p> <p>Overall recommendation: invest in creating MicroSims that are engaging, research-backed, and aligned with difficult STEM concepts \u2013 especially in physics/engineering, chemistry, biology, math, and systems thinking domains \u2013 as these will have the greatest impact on student learning. Emphasize design features that empower students to learn through exploration, and provide teachers with the flexibility to use these tools in various instructional contexts. By following these guidelines, educators and developers can harness the full potential of interactive simulations to enrich STEM education and cultivate deeper systems thinking in learners, preparing them for the complex challenges of the modern world. </p>"},{"location":"why/impact-analysis/","title":"MicroSim Maximal Impact Analysis","text":"<p>Here is a use of the OpenAI ChatGPT Deep Research tool to help us focus on finding what MicroSims would have the maximal impact on education.</p>"},{"location":"why/impact-analysis/#research-prompt","title":"Research Prompt","text":""},{"location":"why/impact-analysis/#initial-deep-research-prompt","title":"Initial Deep Research Prompt","text":"<p>Prompt</p> <p>We represent a group of software engineers who have developed a framework for generative AI and agentic IDEs to quickly and efficiently generate classroom interactive simulations.  These interactive simulations, which we call MicroSims, run within a web browser and use the p5.js JavaScript library, which is ideal for running simulations and animations.  All our simulations have controls like sliders and buttons that require students to interact with the MicroSims.</p> <p>Our goal is to start creating new MicroSims that will have the most impact in schools from 5th grade through college.  Please research what interactive simulations would be most beneficial for teachers.  Focus on finding specific types of interactive simulations that would have the maximum positive impact on our students.  Do not focus on any country or geography.  Include a wide range of subjects, including math, geometry, physics, chemistry, biology, computer science, robotics, systems thinking, graph databases, graph data modeling, graph algorithms, data science, machine learning, deep learning, agentic AI, user experience design, explainable AI and user interface design with HTML, CSS, and JavaScript.</p> <p>After you have found strong evidence of what MicroSims have a high positive impact, analyze the common characteristics of these MicroSims.  Include factors such as how many students might use these MicroSims and how effectively they explain complex concepts.  Conclude with a list of the categories of MicroSims that will have the most significant impact on education.</p>"},{"location":"why/impact-analysis/#deep-research-clarification-response","title":"Deep Research Clarification Response","text":"<p>I\u2019d be happy to research this for you! To make sure the findings are as useful as possible, could you clarify the following:</p> <ol> <li>Are you looking for research based on existing interactive simulations currently in use, or are you also interested in potential gaps where new simulations could have the most impact?</li> <li>Do you want the analysis to focus more on student engagement, conceptual understanding, or both?</li> <li>Would you like data on how teachers perceive the effectiveness of these simulations, or just how students interact with them?</li> <li>Should the research focus more on STEM subjects, or should it also include humanities and other disciplines?</li> <li>Would you like a breakdown of findings by education level (e.g., elementary, middle school, high school, college), or should it be generalized across all levels? These details will help refine the research so it aligns closely with your objectives!</li> </ol>"},{"location":"why/impact-analysis/#my-response-to-clarification","title":"My Response to Clarification","text":"<ol> <li>look at research on both existing MicroSims and opportunities to fill gaps</li> <li>Include both student engagement and conceptual understanding</li> <li>Focus on how students interact with the MicroSims</li> <li>Focus on STEM subjects.  Do not include humanities.  Include systems thinking.</li> <li>Return results generalized across all levels.</li> </ol>"},{"location":"why/impact-analysis/#deep-research-response-to-clarification-response","title":"Deep Research Response to Clarification Response","text":"<p>Great! I will research the most impactful interactive simulations for education, focusing on existing MicroSims and identifying opportunities to fill gaps. This will include STEM subjects and systems thinking, analyzing both student engagement and conceptual understanding. I will also examine how students interact with these simulations and generalize the findings across all education levels. I'll get back to you with detailed insights soon!</p>"},{"location":"why/impact-analysis/#deep-research-final-response","title":"Deep Research Final Response","text":"<p>Deep Research Final Response</p>"},{"location":"why/impact-analysis/#deep-research-activity-log","title":"Deep Research Activity Log","text":"<p>High-Impact Interactive Simulations for STEM Education</p> <p>OK, let's think through how interactive simulations boost engagement, foster systems thinking, and enhance STEM learning at various education levels. This involves digging into the latest research and available tools.</p> <p>OK, I'm thinking about how MDPI's open access journals can really enrich STEM education with their digital simulations.</p> <p></p> <p>Read\u00a0mdpi.com</p> <p>Interactive simulations show clear advantages in learning, enhancing engagement and understanding, particularly in adeptly visualizing abstract concepts through intuitive controls and immediate feedback.</p> <p>I'm gathering info on interactive simulations in systems thinking. It seems promising and worth further exploration.</p> <p></p> <p>Read\u00a0tandfonline.com</p> <p>I'm examining Linda Booth Sweeney's work on systems thinking, considering its potential relevance to my search for conceptual understanding in simulations.</p> <p></p> <p>Read\u00a0mdpi.com</p> <p>ChatGPT</p> <p>I'm noting the need to specifically address \"MicroSims\" as interactive simulations, highlighting their impact on engagement, conceptual understanding, and practical skills in STEM education.</p> <p>I'm gathering info on the PDF titled \"Student engagement and learning with PhET interactive simulations\" from phet.colorado.edu. It seems to offer engaging simulations.</p> <p></p> <p>Read\u00a0phet.colorado.edu</p> <p>ChatGPT</p> <p>Observing student interactions with PhET simulations reveals vast popularity and substantial usage, suggesting a significant impact on understanding through guided exploration and analogy.</p> <p></p> <p>Read more from\u00a0phet.colorado.edu</p> <p>ChatGPT</p> <p>I'm noting that simulations, particularly using PhET, yield significant student benefits such as enhanced understanding, intuition, and exam performance.</p> <p>Students leveraging PhET Circuit Construction Kit excelled on specific DC circuits questions, showcasing notable conceptual understanding.</p> <p></p> <p>Read more from\u00a0phet.colorado.edu</p> <p>ChatGPT</p> <p>OK, let me see. Concluding the most impactful MicroSim categories involves evaluating extensive subject areas like physics, chemistry, and biology, emphasizing conceptual simulations and systems thinking.</p> <p>OK, let me see. Checking PhET's research page for best practices and design guidelines to use in future projects.</p> <p></p> <p>Read more from\u00a0phet.colorado.edu</p> <p>ChatGPT</p> <p>I'm looking at articles like \"PhET: Simulations that Enhance Learning\" and \"Interactive sims: what works, what doesn't, and why\" 2008 (AJPh) to find relevant research for effective simulation design.</p> <p></p> <p>Read\u00a0mitrmedia.com</p> <p>ChatGPT</p> <p>I'm curious about students' engagement with MicroSims, their progression from amateur play to pattern recognition, and potential pitfalls.</p> <p>I'm piecing together how \"showing the invisible\" is explored in W.K. Adams' 2010 work and possibly aligns with Wieman's talk. Searching the PDF for \"invisible\" and \"analogy\".</p> <p></p> <p>Read\u00a0phet.colorado.edu</p> <p>ChatGPT</p> <p>The report highlights how simulations enhance understanding by making invisible phenomena, like current and magnetic fields, visible and presenting information in various formats.</p> <p></p> <p>Read more from\u00a0phet.colorado.edu</p> <p>ChatGPT</p> <p>Identifying key traits: intuitive UI, real-world connections, multiple representations, engaging small puzzles, and fostering exploration.</p> <p></p> <p>Read more from\u00a0phet.colorado.edu</p> <p>ChatGPT</p> <p>I'm working through intuitive UI, relatable design, and immediate feedback. Considering age appropriateness and global usage.</p> <p>I'm working through the PhET Global Initiatives page to find key numbers. Progress is steady and revealing insightful data.</p> <p></p> <p>Read more from\u00a0phet.colorado.edu</p> <p>ChatGPT</p> <p>I'm examining the search results to find specific statistics on simulations involving PhET Interactive Simulations in US colleges. The top two results seem promising.</p> <p></p> <p>Read\u00a0per-central.org</p> <p>ChatGPT</p> <p>Considering the annual usage of PhET simulations, covering over 45 million runs, and their role in fostering systems thinking.</p> <p></p> <p>Read\u00a0microcredentials.digitalpromise.org</p> <p>ChatGPT</p> <p>I'm piecing together insights on \"interactive simulations systems thinking research.\" This involves creating simulations to explore systems thinking.</p> <p>I'm investigating the potential of interactive simulations for developing system thinking, potentially from 2008, though blocked by a paywall. ResearchGate might offer an abstract snippet, while ERIC often provides accessible PDFs.</p> <p></p> <p>Read\u00a0eric.ed.gov</p> <p>ChatGPT</p> <p>Crafting a detailed scenario on interactive simulations. Observing improvements in systems thinking skills at various education levels. Notably, visual simulations enhance understanding of dynamic systems.</p> <p>I'm considering the impact of ending curriculum-based simulations for STEM subjects on the effectiveness of simulations when used as supplemental tools. This leads me to look at their broader applications and potential drawbacks.</p> <p></p> <p>Read\u00a0mdpi.com</p> <p>ChatGPT</p> <p>I'm mapping out the gaps in primary and special education simulations, highlighting benefits and the need for more diverse research with broad populations.</p> <p></p> <p>Read more from\u00a0mdpi.com</p> <p>ChatGPT</p> <p>Interestingly, I tried searching for \"physics\" and \"chemistry\" in MDPI, but they yielded no results. Next, I'll explore \"mathematics.\"</p> <p></p> <p>Read more from\u00a0mdpi.com</p> <p>ChatGPT</p> <p>I'm gathering info on STEM simulations, especially interactive ones, and their impact on education.</p> <p>I'm digging into how students engage with MicroSims, balancing free exploration with guided inquiry, assessing implicit scaffolding, and noting teacher integration strategies.</p> <p></p> <p>Read\u00a0phet.colorado.edu</p> <p>ChatGPT</p> <p>I'm combining quantitative data like performance stats and qualitative insights such as student attitudes, with a special focus on the benefits of PhET interactive simulations.</p> <p>I reviewed the PDF for images, considering PhET simulations for lab replacements, and consulted SERC for additional visual aids.</p> <p></p> <p>Read\u00a0serc.carleton.edu</p> <p>ChatGPT</p> <p>The page highlights PhET CCK's advantages: easy use, quick modifications, risk-free, and focus on key concepts without distractions, aligning with the provided information.</p> <p></p> <p>Read\u00a0cdn.serc.carleton.edu</p> <p>ChatGPT</p> <p>Initially, I'm examining a 342x600 pixel image that shows a real circuit on one side and a simulation on the other, considering its suitability and the potential need for a higher resolution version.</p> <p>I'm clicking on something intriguing.</p> <p></p> <p>Read\u00a0serc.carleton.edu</p> <p>ChatGPT</p> <p>I'm pulling together options to find an engaging image of a student using a simulation, possibly from Flickr or another source. Hm, I wonder what the best representation could be.</p> <p></p> <p>Read\u00a0flickr.com</p> <p>ChatGPT</p> <p>I'm thinking through the Flickr page and its links. The left arrow likely indicates different image sizes.</p> <p></p> <p>Read\u00a0live.staticflickr.com</p> <p>ChatGPT</p> <p>I'm thinking about trying a new approach to the problem presented in item 46. Progress seems promising.</p> <p></p> <p>Read more from\u00a0live.staticflickr.com</p> <p>ChatGPT</p> <p>I'm noting that \"_n.jpg\" might indicate a small thumbnail image from Flickr, and I should try replacing \"_n\" with \"_b\" for a larger image.</p> <p>Simplifying image search by consulting OpenAI's policies.</p> <p></p> <p>Read\u00a0ascnhighered.org</p> <p>ChatGPT</p> <p>I'm noting the image resolution and its suitability for current needs.</p> <p></p> <p>Read\u00a0cdn.serc.carleton.edu</p> <p>ChatGPT</p> <p>I'm thinking through the PhET \"Greenhouse Effect\" simulation, considering its interface and controls. This could illustrate systems thinking and climate systems.</p> <p>I'm curious to see what happens next, but I need to be mindful of the text's context.</p> <p></p> <p>Read more from\u00a0phet.colorado.edu</p> <p>ChatGPT</p> <p>Hm, that's interesting. It seems the recent weather map accurately portrays temperature fluctuations, aiding effective lesson delivery.</p> <p>I'm pulling together final citations to ensure a comprehensive analysis of interactions with interactive simulations, spanning various education levels, characteristics, and effectiveness. Progress is steady on this front.</p> <p>I'm piecing together a structured format for the report, ensuring inclusion of citations, images for engagement, and clear delineation of sections for readability. Progress is steady and methodical.</p>"},{"location":"why/impact-analysis/#citations","title":"Citations","text":""},{"location":"why/impact-analysis/#digital-simulations-in-stem-education-insights-from-recent-empirical-studies-a-systematic-review","title":"Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review","text":"<p>The studies included in this review revealed several significant trends in the effectiveness and impact of simulations across various educational settings. A common finding was the positive influence of simulations on student attitudes and engagement. Simulations consistently enhanced students' interest and motivation in STEM subjects, often making abstract concepts more accessible and engaging, especially in fields like physics and engineering. Several studies noted improved student participation and enthusiasm, with certain methods, like augmented reality and online collaboration tools, leading to high levels of engagement. ](https://www.mdpi.com/2673-8392/5/1/10#:~:text=The%20studies%20included%20in%20this,to%20high%20levels%20of%20engagement)[mdpi.com</p> <ol> <li> <p>Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review understanding by enabling students to actively explore and test hypotheses [20]. ](https://www.mdpi.com/2673-8392/5/1/10#:~:text=understanding%20by%20enabling%20students%20to,20)[mdpi.com</p> </li> <li> <p>Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review In terms of learning outcomes, simulations often led to better comprehension and knowledge retention compared to traditional methods. For example, students using computer-based simulations to study physics concepts, such as Newton's Second Law, showed a deeper understanding of these topics [15 ]. The integration of simulations with guided inquiry or interactive frameworks, like the KWL approach, further promoted critical thinking, reflective learning, and conceptual understanding [ 124]. ](https://www.mdpi.com/2673-8392/5/1/10#:~:text=In%20terms%20of%20learning%20outcomes%2C,124)phet.colorado.edu ncc9630-ofirst@ncc9630.dvi However, sims have the additional benefit of being able to make the invisible visible and provide multiple representations (macroscopic, microscopic, graphs, etc. . . ). One of the key features of sims is the inclusion of balanced challenges such as little puzzles and clues. These challenges are attainable and slowly bring the student to the main goal of understanding the underlying scientific concept via the exploration of physical phenomena. The students interact with the simulations via engaged phet.colorado.edu ncc9630-ofirst@ncc9630.dvi The PhET sims are designed with an intuitive interface for students and minimal text (fig. 2). The sims are interactive and animated, responding instantaneously to student interaction. Real world items (e.g. Light bulbs, bicycle pump, skate boards) are used so that students see the connections between the phenomena and their existing knowledge. However, sims have the additional benefit of being able to make the invisible [serc.carleton.edu</p> </li> </ol>"},{"location":"why/impact-analysis/#using-phet-simulations-to-replace-real-equipment-in-lab-circuit-construction-kit","title":"Using PhET simulations to replace real equipment in lab -- Circuit Construction Kit","text":"<p>Research shows that substituting the PhET Circuit Construction Kit simulation for real equipment in a variety of contexts leads to improved conceptual learning in the best cases, and the same conceptual learning in the worst cases. There are many advantages to using PhET simulations over real equipment: They are easy to use, so students can play around and modify the experiment quickly and easily without fear of breaking the equipment. They have productive constraints to focus attention on the most important aspects of the experiment (e.g. bulb brightness and current flow) rather than on irrelevant aspects (e.g. wire color and length). Finally, if real equipment is ](https://serc.carleton.edu/sp/library/phet/examples/example2.html#:~:text=PhET%20simulations%20instead,Finally%2C%20if%20real%20equipment%20is)[serc.carleton.edu</p> <ol> <li>Using PhET simulations to replace real equipment in lab -- Circuit Construction Kit over real equipment: They are easy to use, so students can play around and modify the experiment quickly and easily without fear of breaking the equipment. They have productive constraints to focus attention on the most important aspects of the experiment (e.g. bulb brightness and current flow) rather than on irrelevant aspects (e.g. wire color and length). Finally, if real equipment is not available, PhET simulations provide the opportunity to do multiple experiments with a single piece of equipment: a computer. ](https://serc.carleton.edu/sp/library/phet/examples/example2.html#:~:text=over%20real%20equipment%3A%20They%20are,piece%20of%20equipment%3A%20a%20computer)phet.colorado.edu ncc9630-ofirst@ncc9630.dvi (fig. 2). The sims are interactive and animated, responding instantaneously to student interaction. Real world items (e.g. Light bulbs, bicycle pump, skate boards) are used so that students see the connections between the phenomena and their existing knowledge. However, sims have the additional benefit of being able to make the invisible visible and phet.colorado.edu ncc9630-ofirst@ncc9630.dvi One of the key features of sims is the inclusion of balanced challenges such as little puzzles and clues. These challenges are attainable and slowly bring the student to the main goal of understanding the underlying scientific concept via the exploration of physical phenomena. The students interact with the simulations via engaged exploration phet.colorado.edu ncc9630-ofirst@ncc9630.dvi where they can interact with this visual environment at their own pace investigating what they are not sure about and building an expert-like mental framework around the concept as they see what features affect how the simulation behaves. This creates an understanding that includes a visualization of the phenomena and many connections between the bits of knowledge. phet.colorado.edu ncc9630-ofirst@ncc9630.dvi effective levels of guidance with simulations. Educators have found that use of heavily guided activities does not elicit deep thinking and learning from students; while other studies have found that with pure discovery learning students are not able to \"discover\" phet.colorado.edu ncc9630-ofirst@ncc9630.dvi activities does not elicit deep thinking and learning from students; while other studies have found that with pure discovery learning students are not able to \"discover\" phet.colorado.edu ncc9630-ofirst@ncc9630.dvi attitude during lab where the sim students explored and investigated without needing much assistance from the Teaching Assistant, while the real equipment students were nervous about breaking the equipment or themselves. In addition to measuring learning on assessments we document affective differences phet.colorado.edu ncc9630-ofirst@ncc9630.dvi Then students can construct their own understanding within this framework. Our work has focused on understanding how students use simulations to construct this phet.colorado.edu ncc9630-ofirst@ncc9630.dvi too. The sims create a common visualization and probe into the student's mind which provides many benefits such as when the student becomes quiet during an interview, the researcher can \"see\" what the student is thinking by watching what they are exploring with the simulation. The simulation also provides a common vocabulary. Students often use words they've gotten from the simulation or the researcher can watch what the phet.colorado.edu ncc9630-ofirst@ncc9630.dvi with their attitude during lab where the sim students explored and investigated without needing much assistance from the Teaching Assistant, while the real equipment students were nervous about breaking the equipment or themselves. In addition to measuring learning on assessments we document affective differences phet.colorado.edu ncc9630-ofirst@ncc9630.dvi with their attitude during lab where the sim students explored and investigated without needing much assistance from the Teaching Assistant, while the real equipment students were nervous about breaking the equipment or themselves. [eric.ed.gov ERIC - EJ833089 - An Investigation of the Potential of Interactive Simulations for </li> </ol>"},{"location":"why/impact-analysis/#developing-system-thinking-skills-in-elementary-school","title":"Developing System Thinking Skills in Elementary School","text":"<p>A Case Study with Fifth-Graders and Sixth-Graders, International Journal of Science Education, 2009-Mar development of system thinking skills. The learning environment included interactive simulations using the Stagecast Creator software to simulate the ecosystem of a marsh. Simulations are an important tool in any effort to develop system thinking, because they have the potential to highlight the dynamic nature of systems. Before the implementation of the learning environment (over a period of five 90-min lessons) two written tests were administered to the students, investigating the development of seven aspects of system thinking. The same tests were administered after the implementation. Specifically, four of the tasks included in each test were associated with skills concerning the structure and the elements of a system and three were associated with the ](https://eric.ed.gov/?id=EJ833089#:~:text=development%20of%20system%20thinking%20skills,three%20were%20associated%20with%20the)[eric.ed.gov ERIC - EJ833089 - </p>"},{"location":"why/impact-analysis/#an-investigation-of-the-potential-of-interactive-simulations-for-developing-system-thinking-skills-in-elementary-school","title":"An Investigation of the Potential of Interactive Simulations for Developing System Thinking Skills in Elementary School","text":"<p>A Case Study with Fifth-Graders and Sixth-Graders, International Journal of Science Education, 2009-Mar processes and interactions taking place within a system. The findings indicated that elementary school students have the potential to develop system thinking skills. The proposed learning environment provoked considerable improvements in some system thinking skills during a relatively brief learning process. However, the learning environment was not successful in promoting feedback thinking. We interpret these results in view of the difficulties encountered by the students. We also discuss the implications of our findings for the design of learning environments. (Contains 2 figures and 4 tables.) ](https://eric.ed.gov/?id=EJ833089#:~:text=processes%20and%20interactions%20taking%20place,2%20figures%20and%204%20tables)[per-central.org</p>"},{"location":"why/impact-analysis/#examining-the-use-of-phet-interactive-simulations-in-us-college-and-high-school-classrooms","title":"Examining the Use of PhET Interactive Simulations in US College and High School Classrooms","text":"<p>self-report survey from 1,233 high school and 276 college educators who are using PhET in their physics instruction, to provide insight into who uses PhET simulations, with which populations of students, towards what pedagogical goals, and with what instructional approaches. We found that new and experienced teachers use simulations, with diverse student populations, and to support a wide range of pedagogical goals. The responding high school and college educators were found to be similar in the goals they intended use of PhET simulations to support (for example, to develop conceptual goals, and to conduct science inquiry), but differed in their instructional approaches. ](https://www.per-central.org/items/detail.cfm?ID=13484#:~:text=self,differed%20in%20their%20instructional%20approaches)[mdpi.com</p>"},{"location":"why/impact-analysis/#digital-simulations-in-stem-education","title":"Digital Simulations in STEM Education","text":"<p>Insights from Recent Empirical Studies, a Systematic Review</p> <p>Employing pre- and post-tests to evaluate intervention effectiveness. While inquiry-based learning emerges as the most frequently implemented instructional strategy, hybrid and simulation-based approaches also feature prominently. Despite the evident benefits of digital simulations in enhancing conceptual understanding, engagement, and problem-solving skills, research gaps remain, particularly regarding their application in primary and special education contexts. This review underscores the need for diverse research methodologies and broader population studies to maximize the potential of digital simulations in STEM education. ](https://www.mdpi.com/2673-8392/5/1/10#:~:text=employing%20pre,digital%20simulations%20in%20STEM%20education)phet.colorado.edu ncc9630-ofirst@ncc9630.dvi simulations. Careful analysis reveals that showing the invisible and use of analogy both facilitate students' construction of their understanding; while the nature of guidance phet.colorado.edu ncc9630-ofirst@ncc9630.dvi However, sims have the additional benefit of being able to make the invisible visible and provide multiple representations (macroscopic, microscopic, graphs, etc. . . ). One of the key features of sims is the inclusion of balanced challenges such as phet.colorado.edu ncc9630-ofirst@ncc9630.dvi think-aloud style interviews with more than 100 different student volunteers. During these interviews, the student is not asked for their opinion or feedback on the simulation, only to think out-loud as they explore. Four to six 30--60 minute interviews are conducted with each version of a simulation. Interview results are used to modify the simulation if necessary and then a new series of interviews are conducted with new students. This phet.colorado.edu ncc9630-ofirst@ncc9630.dvi process continues until the simulation is eliciting only correct concepts and the interface is intuitive to use. The PhET simulations are very involved, interactive animated environments that create a unique opportunity for learning not only for the student but the researcher too. The sims create a common visualization and probe into the student's mind which provides many benefits such as when the student becomes quiet during an phet.colorado.edu ncc9630-ofirst@ncc9630.dvi with each version of a simulation. Interview results are used to modify the simulation if necessary and then a new series of interviews are conducted with new students. This process continues until the simulation is eliciting only correct concepts and the interface is intuitive to use. The PhET simulations are very involved, interactive animated environments that create a unique opportunity for learning not only for the student but the [per-central.org</p>"},{"location":"why/impact-analysis/#examining-the-use-of-phet-interactive-simulations-in-us-college-and-high-school-classrooms_1","title":"Examining the Use of PhET Interactive Simulations in US College and High School Classrooms","text":"<p>Flexible use, available free of charge, and usable across platforms. The resulting simulations are compatible with diverse learning goals, implementation contexts, pedagogical approaches, grade levels, and learners. While website statistics establish that over 45 million simulations are run per year, these statistics provide little information about who uses the simulations and how they are being used. Here we report on analysis of responses to a large-scale, self-report survey from 1,233 high school and 276 college educators who are using PhET in their physics instruction, to provide insight into who uses PhET simulations, with which populations of students, towards what pedagogical goals, ](https://www.per-central.org/items/detail.cfm?ID=13484#:~:text=flexible%20use%2C%20available%20free%20of,students%2C%20towards%20what%20pedagogical%20goals)gizmos.explorelearning.com Gizmos: Interactive STEM Simulations &amp; Virtual Labs Labs gizmos.explorelearning.com Featuring over 550 virtual, interactive STEM simulations all crafted to meet the latest educational standards, Gizmos empowers educators in grades 3-12. [mdpi.com</p>"},{"location":"why/impact-analysis/#digital-simulations-in-stem-education_1","title":"Digital Simulations in STEM Education","text":"<p>Insights from Recent Empirical Studies, a Systematic Review</p> <p>The review includes 31 peer-reviewed empirical studies published in the last five years, sourced from ERIC, Scopus, and Web of Science, and adheres to the PRISMA methodology to ensure transparency and rigor. The findings reveal that interactive simulations are the most widely used type of digital tool, accounting for 25 of the 31 studies, followed by game-based simulations and virtual labs. Quasi-experimental designs dominate the research landscape, often employing pre- and post-tests to evaluate intervention effectiveness. While inquiry-based learning emerges as the most frequently implemented instructional strategy, hybrid and simulation-based approaches also feature prominently. ](https://www.mdpi.com/2673-8392/5/1/10#:~:text=The%20review%20includes%2031%20peer,based%20approaches%20also%20feature%20prominently)phet.colorado.edu ncc9630-ofirst@ncc9630.dvi (bulbs, wires, resistors etc.). The lab activity written around the sim/equipment was identical otherwise. On the final exam (6 weeks later) three questions were asked about DC circuits. The students who had used CCK in lab performed statistically better on average than the students who used real equipment. The averages for the two groups were identical on the exam questions that did not address circuits. In addition, phet.colorado.edu ncc9630-ofirst@ncc9630.dvi was followed up by an activity where both groups used real equipment. Students had to build a complicated circuit and then describe how the circuit would react if they created a break in a specified location. The students who had used the sim for the previous 1 1 2 of lab were faster on average and completing this challenge. This is consistent with their phet.colorado.edu ncc9630-ofirst@ncc9630.dvi much assistance from the Teaching Assistant, while the real equipment students were nervous about breaking the equipment or themselves. In addition to measuring learning on assessments we document affective differences when using sims compared to other instructional materials. As with CCK in the lab above, where students were more comfortable trying things with the simulations than per-central.org Examining the Use of PhET Interactive Simulations in US College and High School Classrooms interactive simulations developed by the PhET Interactive Simulations project at University of Colorado Boulder. The design of each simulation seeks to support educators in achieving a range of pedagogical goals through implicit scaffolding. To decrease barriers to adoption, the simulations are designed for flexible use, available free of charge, and usable across platforms. The resulting simulations are compatible with diverse learning goals, implementation contexts, pedagogical approaches, grade levels, and learners. While website statistics establish that over 45 million simulations are run per year, these statistics provide little information about who uses the simulations and how [mdpi.com</p>"},{"location":"why/impact-analysis/#digital-simulations-in-stem-education_2","title":"Digital Simulations in STEM Education","text":"<p>Insights from Recent Empirical Studies, a Systematic Review** effectiveness and impact of simulations across various educational settings. A common finding was the positive influence of simulations on student attitudes and engagement. Simulations consistently enhanced students' interest and motivation in STEM subjects, often making abstract concepts more accessible and engaging, especially in fields like physics and engineering. Several studies noted improved student participation and enthusiasm, with certain methods, like augmented reality and online collaboration tools, leading to high levels of engagement. ](https://www.mdpi.com/2673-8392/5/1/10#:~:text=effectiveness%20and%20impact%20of%20simulations,to%20high%20levels%20of%20engagement)[mdpi.com</p>"},{"location":"why/impact-analysis/#digital-simulations-in-stem-education-insights-from-recent-empirical-studies-a-systematic-review_1","title":"Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review","text":"<p>engaging, especially in fields like physics and engineering. Several studies noted improved student participation and enthusiasm, with certain methods, like augmented reality and online collaboration tools, leading to high levels of engagement. ](https://www.mdpi.com/2673-8392/5/1/10#:~:text=engaging%2C%20especially%20in%20fields%20like,to%20high%20levels%20of%20engagement)mdpi.com Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review behavioral, cognitive, and emotional dimensions. Many studies aimed to understand how simulations impacted students' motivation, interest, and participation in STEM subjects, indicating a strong interest in simulations as a tool for increasing student involvement [13 , 121,19 , 113,28 , 136,39 , 138]. [mdpi.com</p>"},{"location":"why/impact-analysis/#digital-simulations-in-stem-education-insights-from-recent-empirical-studies-a-systematic-review_2","title":"Digital Simulations in STEM Education: Insights from Recent Empirical Studies, a Systematic Review","text":"<p>and engagement. Simulations consistently enhanced students' interest and motivation in STEM subjects, often making abstract concepts more accessible and engaging, especially in fields like physics and engineering. Several studies noted improved student participation and enthusiasm, with certain methods, like augmented reality and online collaboration tools, leading to high levels of engagement. ](https://www.mdpi.com/2673-8392/5/1/10#:~:text=and%20engagement,to%20high%20levels%20of%20engagement)phet.colorado.edu ncc9630-ofirst@ncc9630.dvi demonstrate that simulations help students' conceptual understanding about the phenomena. For example, one two hour lab of an algebra based physics course was divided into two groups---those that only used a simulation (CCK shown in fig. 4) and those that only used real equipment (bulbs, wires, resistors etc.). The lab activity written around the sim/equipment was identical otherwise. On the final exam (6 weeks later) three questions were [eric.ed.gov ERIC - EJ833089 - An Investigation of the Potential of Interactive Simulations for </p>"},{"location":"why/impact-analysis/#developing-system-thinking-skills-in-elementary-school-a-case-study-with-fifth-graders-and-sixth-graders-international-journal-of-science-education-2009-mar","title":"Developing System Thinking Skills in Elementary School: A Case Study with Fifth-Graders and Sixth-Graders, International Journal of Science Education, 2009-Mar","text":"<p>that elementary school students have the potential to develop system thinking skills. The proposed learning environment provoked considerable improvements in some system thinking skills during a relatively brief learning process. However, the learning environment was not successful in promoting feedback thinking. We interpret these results in view of the difficulties encountered by the students. ](https://eric.ed.gov/?id=EJ833089#:~:text=that%20elementary%20school%20students%20have,difficulties%20encountered%20by%20the%20students)[eric.ed.gov ERIC - EJ833089 -</p>"},{"location":"why/impact-analysis/#an-investigation-of-the-potential-of-interactive-simulations-for-developing-system-thinking-skills-in-elementary-school_1","title":"An Investigation of the Potential of Interactive Simulations for Developing System Thinking Skills in Elementary School","text":"<p>A Case Study with Fifth-Graders and Sixth-Graders, International Journal of Science Education, 2009-Mar Ecosystem of a marsh. Simulations are an important tool in any effort to develop system thinking, because they have the potential to highlight the dynamic nature of systems. Before the implementation of the learning environment (over a period of five 90-min lessons) two written tests were administered to the students, investigating the development of seven aspects of system thinking. The same tests were administered after the implementation. Specifically, four of the tasks included in each test were associated with skills concerning the structure and the elements of a system and three were associated with the processes and interactions taking place within a system. The findings indicated ](https://eric.ed.gov/?id=EJ833089#:~:text=ecosystem%20of%20a%20marsh,The%20findings%20indicated)[eric.ed.gov ERIC - EJ833089 - An Investigation of the Potential of Interactive Simulations for </p>"},{"location":"why/impact-analysis/#developing-system-thinking-skills-in-elementary-school_1","title":"Developing System Thinking Skills in Elementary School","text":"<p>A Case Study with Fifth-Graders and Sixth-Graders, International Journal of Science Education, 2009-Mar that elementary school students have the potential to develop system thinking skills. The proposed learning environment provoked considerable ](https://eric.ed.gov/?id=EJ833089#:~:text=that%20elementary%20school%20students%20have,2%20figures%20and%204%20tables)</p>"},{"location":"why/learning-pyramid/","title":"Learning pyramid","text":""},{"location":"why/learning-pyramid/#the-learning-pyramid-quote","title":"The Learning Pyramid Quote","text":"<p>Students retain approximately 75% of what they learn when they practice by doing, compared to just 5% of what they hear in lectures and 10% of what they read.</p> <p>That quote---sometimes called the \"Learning Pyramid\" or attributed to \"Edgar Dale's Cone of Experience\"---does not come from a verifiable, primary research study. In fact, it's considered apocryphal. While you'll see it widely repeated in teacher-training materials and on education websites, there is no recognized peer-reviewed source confirming that people retain \"5% of what they hear in lectures, 10% of what they read, and 75% of what they practice by doing.\"</p>"},{"location":"why/learning-pyramid/#where-it-is-often-incorrectly-cited","title":"Where It Is Often (Incorrectly) Cited","text":"<ol> <li>Edgar Dale's Cone of Experience (1946): Dale created a general visual model of how learners might engage with different types of media (e.g., verbal symbols, pictures, direct experiences), but he never attached fixed percentages of retention to these categories.</li> <li>National Training Laboratories (NTL) \"Learning Pyramid\": This version is often claimed to come from internal NTL research, but the organization itself has never produced an original data source or methodology supporting these exact numbers.</li> </ol>"},{"location":"why/learning-pyramid/#scholarly-rebuttals","title":"Scholarly Rebuttals","text":"<p>A few academic articles analyze the origins of these percentages and conclude that they are not based on any actual research. For example:</p> <ul> <li>Letrud, K. A. (2012). \"A Rebuttal of NTL's Learning Pyramid or the 'Cone of Learning.'\" Education, 133(1), 117--124.</li> <li>This paper explains that the purported retention rates can't be traced to a credible empirical study and appear to be a misunderstanding or misapplication of Dale's work.</li> </ul>"},{"location":"why/learning-pyramid/#key-takeaway","title":"Key Takeaway","text":"<p>If you need a verified source for how students learn best or how retention rates differ by instructional method, it's best to refer to peer-reviewed cognitive science or educational psychology research (e.g., studies on retrieval practice, spaced repetition, active learning). The specific \"5%, 10%, 75%\" figures have no solid evidence behind them.</p> <p>In short, there is no legitimate citation for the exact 5%-10%-75% quote because it has never been validated in a research study. It is often attributed to Dale or NTL, but neither can provide original data or a publication to support it. If you see those numbers repeated, know that they are anecdotal claims rather than empirically proven statistics.</p> <p>o1</p>"},{"location":"why/motivation/","title":"Why Simulations for Education","text":""},{"location":"why/motivation/#the-dream-of-adaptive-learning","title":"The Dream of Adaptive Learning","text":"<p>In Neal Stephenson's visionary novel The Diamond Age: Or, A Young Lady's Illustrated Primer, he presents a compelling glimpse into the future of education. The story centers around a remarkable interactive book called \"The Young Lady's Illustrated Primer,\" which adapts its narrative and lessons to the specific needs, progress, and circumstances of its reader. As the young protagonist Nell interacts with the book, it constructs personalized stories that teach her valuable skills\u2014from literacy and critical thinking to self-defense and computer programming\u2014all calibrated precisely to her developmental stage and learning style.</p> <p>This captivating vision represents the ultimate dream of adaptive learning: educational content that responds intelligently to the learner, providing exactly what they need, when they need it, in a format that engages them most effectively. While we haven't yet achieved the full sophistication of Stephenson's Primer, today's educational simulations and interactive learning tools are taking significant steps in this direction.</p> <p>The quest for truly adaptive educational experiences recognizes a fundamental truth: no two learners are identical. Each student brings unique backgrounds, abilities, interests, and learning preferences to the educational process. Traditional static educational materials\u2014textbooks, lectures, videos\u2014provide a one-size-fits-all approach that inevitably serves some learners better than others. Interactive simulations, by contrast, can adapt to different learning paces, provide customized feedback, and allow students to explore concepts through pathways that match their individual curiosities and strengths.</p>"},{"location":"why/motivation/#the-power-of-hands-on-learning","title":"The Power of Hands-on Learning","text":"<p>Educational research consistently confirms what many of us intuitively understand: we learn best by doing. Hands-on, experiential learning creates neural pathways that are stronger and more enduring than those formed through passive consumption of information. Consider these compelling findings:</p> <ul> <li>Students retain approximately 75% of what they learn when they practice by doing, compared to just 5% of what they hear in lectures and 10% of what they read.</li> <li>Concepts explored through interactive simulation lead to 30-40% faster mastery than traditional instructional methods alone.</li> <li>Information learned through active engagement is retained up to 4 times longer than information consumed passively.</li> </ul> <p>See References</p> <p>Educational simulations embody this hands-on approach by placing students in interactive environments where they can manipulate variables, observe outcomes, test hypotheses, and develop intuitive understanding through direct experience. This approach transforms abstract concepts into tangible experiences\u2014making invisible forces visible, compressing time to observe long-term effects, and allowing safe experimentation with potentially dangerous or expensive real-world processes.</p> <p>Consider the difference between reading about the principles of momentum and force versus manipulating objects in a physics simulation; between memorizing the steps of cellular respiration versus watching the process unfold in an interactive biology model; or between studying architectural principles versus constructing and testing virtual structures. In each case, the simulation approach engages multiple sensory and cognitive pathways, creating richer, more memorable learning experiences.</p>"},{"location":"why/motivation/#engaging-short-attention-spans","title":"Engaging Short Attention Spans","text":"<p>Today's educators face an unprecedented challenge: capturing and maintaining student attention in an era of instant gratification and continuous digital stimulation. The average attention span of younger generations continues to decrease, with research suggesting that sustained attention for a single task often lasts less than 20 minutes before concentration begins to wane significantly.</p> <p>Educational simulations offer a powerful antidote to this challenge through thoughtful application of gamification principles. By incorporating elements such as progression systems, immediate feedback, achievable challenges, and visual rewards, simulations tap into the same psychological rewards that make games so engaging. The difference, of course, is that the engagement serves explicitly educational purposes.</p> <p>Well-designed simulations maintain the critical balance between entertainment and education. They're not merely \"sugar-coating\" learning with superficial game elements; rather, they structure the learning experience to leverage intrinsic motivation:</p> <ul> <li>Challenge and achievement: Simulations can present progressively difficult challenges that keep learners in the \"flow\" state\u2014that sweet spot between frustration and boredom where engagement is highest.</li> <li>Exploration and discovery: Open-ended simulations allow students to follow their curiosity, creating personal investment in the learning process.</li> <li>Immediate feedback: Instead of waiting for graded assignments, simulations provide instant results when students manipulate variables or make decisions.</li> <li>Contextual relevance: Simulations can place learning in relevant contexts that help students understand why the material matters.</li> </ul> <p>The evidence for simulation effectiveness is compelling. Studies across multiple disciplines show that students using interactive simulations demonstrate higher engagement levels, with average on-task time increasing by 25-35% compared to traditional instruction. Importantly, this engagement translates to measurable learning gains, with simulation-using students typically scoring 15-25% higher on conceptual understanding assessments than peers using only traditional materials.</p>"},{"location":"why/motivation/#the-crucial-role-of-user-experience-design","title":"The Crucial Role of User Experience Design","text":"<p>The effectiveness of educational simulations depends heavily on the quality of their user interfaces. Even the most pedagogically sound simulation will fail if students struggle to navigate it, understand its controls, or interpret its feedback. This makes thoughtful user experience (UX) design not merely an aesthetic concern but a fundamental pedagogical requirement.</p> <p>Good UX design in educational simulations adheres to several key principles:</p>"},{"location":"why/motivation/#clarity-and-intuitiveness","title":"Clarity and Intuitiveness","text":"<p>Every element of the interface should serve a clear purpose, with controls that behave as expected. Students should be able to focus on the learning content rather than deciphering how the interface works. This means:</p> <ul> <li>Consistent placement of navigation elements</li> <li>Clear labeling of all controls</li> <li>Visual hierarchy that guides attention appropriately</li> <li>Interaction patterns that follow established conventions</li> </ul>"},{"location":"why/motivation/#minimizing-cognitive-load","title":"Minimizing Cognitive Load","text":"<p>Educational content inherently demands cognitive resources. The interface should minimize additional cognitive burden by:</p> <ul> <li>Eliminating unnecessary complexity and clutter</li> <li>Grouping related controls logically</li> <li>Providing progressive disclosure of advanced features</li> <li>Maintaining consistency across different sections</li> </ul>"},{"location":"why/motivation/#responsive-feedback","title":"Responsive Feedback","text":"<p>Students need clear connections between their actions and outcomes:</p> <ul> <li>Immediate visual or auditory confirmation of interactions</li> <li>Clear indication of system status and processing</li> <li>Helpful error messages when incorrect actions are taken</li> <li>Celebratory feedback for achievements and milestones</li> </ul>"},{"location":"why/motivation/#accessibility","title":"Accessibility","text":"<p>Educational simulations must be usable by all learners, including those with disabilities:</p> <ul> <li>Color schemes that work for color-blind users</li> <li>Keyboard navigation for those who cannot use pointing devices</li> <li>Screen reader compatibility for visually impaired students</li> <li>Appropriate text sizing and contrast for readability</li> </ul> <p>A particularly critical aspect of educational simulation design is the implementation of controls. Slider controls should always display both their current value and units of measurement, while clearly indicating their range of possible values. Buttons should have descriptive labels rather than ambiguous icons. Settings panels should group related controls logically and provide explanatory text for complex options.</p> <p>The impact of good UX design cannot be overstated. Studies show that improvements in interface usability directly correlate with learning outcomes, with optimized interfaces reducing task completion time by up to 40% and error rates by up to 90%. Most importantly, well-designed interfaces help maintain the flow state where learning is most effective, minimizing frustration and maximizing engagement with the educational content.</p>"},{"location":"why/motivation/#generative-ai-accelerating-simulation-development","title":"Generative AI: Accelerating Simulation Development","text":"<p>Recent advances in generative artificial intelligence are transforming the landscape of educational simulation development. Previously, creating effective educational simulations required specialized teams of instructional designers, subject matter experts, software developers, and UX designers working through time-intensive development cycles. This made high-quality simulations expensive and limited their availability across the curriculum.</p> <p>Today, generative AI tools are democratizing simulation creation by automating many aspects of the development process:</p>"},{"location":"why/motivation/#code-generation-from-best-practices","title":"Code Generation from Best Practices","text":"<p>Modern AI systems can generate simulation code based on established best practices in both educational design and user experience. When provided with clear rules and exemplars of effective educational interfaces, AI can produce simulation frameworks that:</p> <ul> <li>Follow consistent layout paradigms</li> <li>Implement proper control behaviors</li> <li>Maintain responsive design principles</li> <li>Integrate appropriate feedback mechanisms</li> </ul>"},{"location":"why/motivation/#rapid-prototyping-and-iteration","title":"Rapid Prototyping and Iteration","text":"<p>Perhaps the most significant advantage of AI-assisted development is the dramatic acceleration of the prototyping process:</p> <ol> <li>Instructors can describe a desired simulation in natural language</li> <li>AI generates a working prototype implementing standard UX patterns</li> <li>The prototype can be quickly tested and refined</li> <li>Iterations can happen in hours or days rather than weeks or months</li> </ol> <p>This rapid cycle allows for testing multiple approaches to the same educational challenge, identifying the most effective simulation design before significant resources are invested in polishing and distribution.</p>"},{"location":"why/motivation/#customization-at-scale","title":"Customization at Scale","text":"<p>AI systems excel at generating variations on established patterns, making it possible to customize simulations for different:</p> <ul> <li>Educational levels and contexts</li> <li>Subject areas and specific learning objectives</li> <li>Cultural and linguistic backgrounds</li> <li>Individual learning preferences and needs</li> </ul> <p>Despite these powerful capabilities, it's important to understand that generative AI does not eliminate the need for human expertise in the simulation development process. Rather, it amplifies human creativity and judgment by handling routine aspects of implementation while allowing instructional designers and subject matter experts to focus on the pedagogical substance.</p> <p>Educational simulations generated or enhanced by AI still require careful human review to ensure:</p> <ul> <li>Educational accuracy and appropriateness</li> <li>Alignment with curriculum standards and objectives</li> <li>Cultural sensitivity and inclusivity</li> <li>Ethical implementation of gamification elements</li> </ul> <p>When human expertise guides AI capabilities, the result is a powerful symbiosis that makes high-quality educational simulations more accessible, affordable, and adaptable than ever before.</p>"},{"location":"why/motivation/#testing-and-assessment-ensuring-educational-value","title":"Testing and Assessment: Ensuring Educational Value","text":"<p>Despite the efficiency gains offered by generative AI and modern development tools, the creation of truly effective educational simulations remains an empirical process requiring rigorous testing and assessment. No amount of thoughtful design or technological sophistication can substitute for evidence of actual learning outcomes in real educational settings.</p>"},{"location":"why/motivation/#the-ab-testing-paradigm","title":"The A/B Testing Paradigm","text":"<p>One of the most powerful approaches to simulation optimization is A/B testing, where different versions of a simulation are systematically compared:</p> <ol> <li>Identify a specific aspect of the simulation to test (e.g., feedback frequency, difficulty progression, visualization style)</li> <li>Create two versions that differ only in this aspect</li> <li>Randomly assign students to experience either version</li> <li>Measure relevant outcomes including engagement metrics and learning gains</li> <li>Implement the more effective approach and repeat the process for other aspects</li> </ol> <p>This methodical approach prevents simulation design from becoming merely a matter of opinion or aesthetic preference. Instead, design decisions are guided by empirical evidence of what actually works for students.</p>"},{"location":"why/motivation/#embedded-assessment","title":"Embedded Assessment","text":"<p>Beyond comparative testing, effective simulations incorporate ongoing assessment within the learning experience itself:</p> <ul> <li>Stealth assessment captures data on student interactions, solving strategies, misconceptions, and learning progression without interrupting the flow of the experience</li> <li>Checkpoint challenges provide structured opportunities to demonstrate mastery of specific concepts</li> <li>Reflection prompts encourage metacognition about the learning process</li> </ul> <p>These embedded assessments serve dual purposes: they provide valuable data for simulation refinement while also creating learning opportunities through the testing effect, where the act of retrieving information strengthens memory and understanding.</p>"},{"location":"why/motivation/#classroom-implementation-studies","title":"Classroom Implementation Studies","text":"<p>The ultimate test of any educational simulation comes in its implementation in actual learning environments. Classroom studies should examine:</p> <ul> <li>How the simulation integrates with broader curriculum goals</li> <li>Whether it reduces or increases teacher workload</li> <li>How it performs across diverse student populations</li> <li>Long-term retention of concepts learned through simulation</li> </ul> <p>The most successful educational simulations emerge from iterative cycles where classroom implementation informs ongoing refinement. This requires humility from developers and instructional designers\u2014a recognition that initial designs, however thoughtful, will likely require significant revision based on real-world experience.</p>"},{"location":"why/motivation/#conclusion-the-future-of-educational-simulations","title":"Conclusion: The Future of Educational Simulations","text":"<p>As we look toward the future of education, interactive simulations stand at the convergence of several powerful trends: our deepening understanding of how people learn, advances in user experience design, breakthroughs in artificial intelligence, and the growing sophistication of assessment methodologies.</p> <p>While we haven't yet achieved the fully adaptive educational experience envisioned in The Diamond Age, each generation of educational simulations brings us closer to that ideal. Today's best simulations already demonstrate the power of responsive, engaging, hands-on learning experiences to transform abstract concepts into genuine understanding.</p> <p>The coming years will likely see further advances as AI-enhanced simulations become increasingly personalized, responsive to individual learning patterns, and integrated with broader educational ecosystems. As these tools continue to evolve, they promise to help address some of education's most persistent challenges: maintaining engagement, accommodating diverse learning styles, and providing individualized support at scale.</p> <p>Yet amid this technological progress, the fundamental goal remains unchanged: creating learning experiences that inspire curiosity, build understanding, and empower students to apply knowledge in meaningful ways. The most advanced simulation is ultimately valuable only insofar as it serves this essential educational purpose\u2014helping learners construct their own understanding of our complex and fascinating world.</p>"},{"location":"why/motivation/#references","title":"References","text":"<p>Adams, W. K., Reid, S., LeMaster, R., McKagan, S. B., Perkins, K. K., Dubson, M., &amp; Wieman, C. E. (2008). A study of educational simulations part I - Engagement and learning. Journal of Interactive Learning Research, 19(3), 397-419.</p> <p>D'Angelo, C., Rutstein, D., Harris, C., Bernard, R., Borokhovski, E., &amp; Haertel, G. (2014). Simulations for STEM learning: Systematic review and meta-analysis. SRI International.</p> <p>Dale, E. (1969). Audiovisual methods in teaching (3rd ed.). Holt, Rinehart &amp; Winston.</p> <p>Davids, M. R., Chikte, U. M., &amp; Halperin, M. L. (2015). Effect of improving the usability of an e-learning resource: A randomized trial. Advances in Physiology Education, 39(2), 59-66.</p> <p>Freeman, S., Eddy, S. L., McDonough, M., Smith, M. K., Okoroafor, N., Jordt, H., &amp; Wenderoth, M. P. (2014). Active learning increases student performance in science, engineering, and mathematics. Proceedings of the National Academy of Sciences, 111(23), 8410-8415.</p> <p>Merchant, Z., Goetz, E. T., Cifuentes, L., Keeney-Kennicutt, W., &amp; Davis, T. J. (2014). Effectiveness of virtual reality-based instruction on students' learning outcomes in K-12 and higher education: A meta-analysis. Computers &amp; Education, 70, 29-40.</p> <p>Prince, M. (2004). Does active learning work? A review of the research. Journal of Engineering Education, 93(3), 223-231.</p> <p>Rutten, N., van Joolingen, W. R., &amp; van der Veen, J. T. (2012). The learning effects of computer simulations in science education. Computers &amp; Education, 58(1), 136-153.</p> <p>Smetana, L. K., &amp; Bell, R. L. (2012). Computer simulations to support science instruction and learning: A critical review of the literature. International Journal of Science Education, 34(9), 1337-1370.</p> <p>Wieman, C. E., Adams, W. K., &amp; Perkins, K. K. (2008). PhET: Simulations that enhance learning. Science, 322(5902), 682-683.</p> <p>World Bank. (2023). Learning pyramid: Retention rates from different ways of learning. Education Global Practice.</p> <p>Zaharias, P., &amp; Poylymenakou, A. (2009). Developing a usability evaluation method for e-learning applications: Beyond functional usability. International Journal of Human-Computer Interaction, 25(1), 75-98.</p>"},{"location":"why/uniqueness/","title":"What Makes MicroSims Unique in Educational Technology","text":"<p>Educational MicroSims represent a paradigm shift in how interactive educational content is created, distributed, and integrated into learning environments. While many educational technologies exist, MicroSims occupy a unique position at the intersection of simplicity, accessibility, and AI-powered generation.</p>"},{"location":"why/uniqueness/#the-generative-ai-revolution","title":"The Generative AI Revolution","text":"<p>The most transformative aspect of MicroSims is their compatibility with generative AI systems. Unlike traditional educational software that requires teams of developers, instructional designers, and subject matter experts working for months, MicroSims can be generated in seconds by large language models like GPT-4 or Claude.</p>"},{"location":"why/uniqueness/#on-demand-educational-content-creation","title":"On-Demand Educational Content Creation","text":"<p>When an educator needs a simulation to demonstrate a specific concept\u2014whether it's the relationship between frequency and wavelength in physics, compound interest in finance, or population dynamics in ecology\u2014they can simply describe their requirements to an AI system. The AI then generates a complete, functional MicroSim following standardized design patterns. This represents a fundamental democratization of educational content creation.</p>"},{"location":"why/uniqueness/#customization-without-programming","title":"Customization Without Programming","text":"<p>Traditional educational simulations are often black boxes\u2014powerful but inflexible. If a teacher wants to modify a PhET simulation to better match their curriculum or add a specific parameter their students are studying, they're typically out of luck. MicroSims, by contrast, are designed with transparent, well-documented code that can be modified by:</p> <ul> <li>Educators who want to adjust parameters or add features</li> <li>Students who want to explore \"what if\" scenarios</li> <li>AI systems that can make modifications based on natural language requests</li> </ul>"},{"location":"why/uniqueness/#iterative-refinement-through-ai","title":"Iterative Refinement Through AI","text":"<p>Because MicroSims follow standardized patterns, AI systems can not only create them but also improve them based on feedback. An educator can ask an AI to \"make the graph larger,\" \"add a reset button,\" or \"show the mathematical equation being modeled,\" and the AI can regenerate the simulation with these modifications. This iterative refinement process that once took weeks of developer time now happens in real-time.</p>"},{"location":"why/uniqueness/#the-power-of-iframe-integration","title":"The Power of iframe Integration","text":"<p>The technical architecture of MicroSims\u2014self-contained JavaScript applications that run entirely in the browser\u2014makes them uniquely suited for distribution through iframes. This seemingly simple technical detail has profound implications for educational technology adoption.</p>"},{"location":"why/uniqueness/#universal-embedding","title":"Universal Embedding","text":"<p>MicroSims can be embedded in virtually any digital learning environment:</p> <ul> <li>Learning Management Systems (Canvas, Blackboard, Moodle)</li> <li>Interactive textbooks and e-books</li> <li>Course websites and blogs</li> <li>Google Sites and other simple web platforms</li> <li>Mobile applications through WebView components</li> <li>Presentation software that supports web content</li> </ul> <p>This universality means institutions don't need to adopt new platforms or negotiate complex licensing agreements. A MicroSim created for one context can be reused anywhere that supports basic web standards.</p>"},{"location":"why/uniqueness/#sandboxed-security","title":"Sandboxed Security","text":"<p>The iframe architecture provides natural security boundaries. Each MicroSim runs in its own sandboxed environment, unable to access or interfere with the host page's data or other embedded content. This security model is crucial for educational institutions with strict IT policies. Unlike traditional educational software that might require installation permissions or network access, MicroSims pose minimal security risk.</p>"},{"location":"why/uniqueness/#version-independence","title":"Version Independence","text":"<p>When a MicroSim is embedded via iframe, it can be updated independently of the host platform. Bug fixes, feature additions, or content updates can be deployed to the source, and all embedded instances immediately reflect these changes. Conversely, if stability is required, institutions can host their own copies, ensuring content remains unchanged regardless of external updates.</p>"},{"location":"why/uniqueness/#responsive-scaling","title":"Responsive Scaling","text":"<p>Modern iframe implementations support responsive design, allowing MicroSims to adapt to different screen sizes and orientations. A single MicroSim can work equally well on a classroom smart board, a student's laptop, or a mobile phone, without requiring platform-specific versions.</p>"},{"location":"why/uniqueness/#the-convergence-of-simplicity-and-sophistication","title":"The Convergence of Simplicity and Sophistication","text":"<p>What makes MicroSims truly unique is how they resolve the traditional tension between simplicity and sophistication in educational technology.</p>"},{"location":"why/uniqueness/#simple-enough-for-ai-generation","title":"Simple Enough for AI Generation","text":"<p>The constrained scope and standardized patterns of MicroSims make them tractable for current AI systems. While generating a full-featured educational platform would challenge even the most advanced AI, creating a focused simulation with clear parameters is well within current capabilities.</p>"},{"location":"why/uniqueness/#sophisticated-enough-for-real-learning","title":"Sophisticated Enough for Real Learning","text":"<p>Despite their simplicity, MicroSims can model complex phenomena and support deep learning. The examples in your collection\u2014from FFT butterfly diagrams to investment calculators\u2014demonstrate that meaningful educational experiences don't require massive, complex software systems.</p>"},{"location":"why/uniqueness/#transparent-enough-for-understanding","title":"Transparent Enough for Understanding","text":"<p>Unlike many educational technologies that hide their workings, MicroSims expose their code and logic. This transparency serves multiple purposes:</p> <ul> <li>Educators can verify the accuracy of models and calculations</li> <li>Advanced students can examine the implementation to deepen understanding</li> <li>Institutions can audit code for security and compliance</li> <li>The community can identify and fix errors collaboratively</li> </ul>"},{"location":"why/uniqueness/#the-network-effect-of-standardization","title":"The Network Effect of Standardization","text":"<p>The standardized architecture of MicroSims creates powerful network effects. As more MicroSims are created following the same patterns:</p> <ul> <li>AI systems become better at generating them through expanded training data</li> <li>Educators develop familiarity with the interface conventions</li> <li>Students can transfer interaction knowledge between different simulations</li> <li>Developers can create tools and frameworks that work with all MicroSims</li> <li>Institutions can establish streamlined approval and deployment processes</li> </ul>"},{"location":"why/uniqueness/#implications-for-educational-equity","title":"Implications for Educational Equity","text":"<p>The unique characteristics of MicroSims have significant implications for educational equity:</p>"},{"location":"why/uniqueness/#reduced-cost-barriers","title":"Reduced Cost Barriers","text":"<p>Traditional educational software often requires expensive licenses, powerful hardware, or high-bandwidth internet connections. MicroSims, being lightweight and self-contained, can run on basic devices with minimal connectivity, making quality interactive content accessible to under-resourced schools and students.</p>"},{"location":"why/uniqueness/#language-and-cultural-adaptation","title":"Language and Cultural Adaptation","text":"<p>AI systems can generate MicroSims in different languages or adapt them for different cultural contexts. A simulation teaching financial literacy can use currency and economic scenarios relevant to the student's location, created on-demand without requiring separate development efforts for each market.</p>"},{"location":"why/uniqueness/#accessibility-by-design","title":"Accessibility by Design","text":"<p>The standardized patterns include accessibility features, ensuring that generated MicroSims support screen readers, keyboard navigation, and other assistive technologies. This built-in accessibility is often an afterthought in traditional educational software but is fundamental to the MicroSim architecture.</p>"},{"location":"why/uniqueness/#the-future-of-ai-powered-educational-content","title":"The Future of AI-Powered Educational Content","text":"<p>MicroSims represent just the beginning of what's possible when educational content creation is democratized through AI. As generative AI systems become more sophisticated, we can envision:</p> <ul> <li>MicroSims that automatically adapt their difficulty based on student performance</li> <li>Suites of related simulations generated from a single curriculum outline</li> <li>AI tutors that create custom simulations to address specific student misconceptions</li> <li>Collaborative simulations where AI generates multi-user educational experiences</li> <li>Integration with virtual and augmented reality platforms while maintaining the same simple, accessible architecture</li> </ul>"},{"location":"why/uniqueness/#conclusion","title":"Conclusion","text":"<p>MicroSims are unique in educational technology not because of any single feature, but because of how they bring together multiple innovations: AI generation, iframe distribution, standardized patterns, and transparent implementation. They represent a new category of educational resource that is simultaneously simple enough for rapid AI generation and sophisticated enough for meaningful learning.</p> <p>By removing traditional barriers\u2014cost, technical complexity, platform dependence, and inflexibility\u2014MicroSims democratize access to interactive educational content. They transform every educator into a potential content creator and every web page into a potential learning environment. In an educational landscape increasingly defined by personalization, accessibility, and rapid adaptation, MicroSims provide a foundation for the next generation of intelligent educational systems.</p>"}]}