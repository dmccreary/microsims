{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Micro Simulations for Education","text":"<p>Welcome to the MicroSims for Education website.</p> <p>A MicroSim (or Micro-Simulation) is a simple animation or simulation program that is quickly generated using generative AI to help teachers explain concepts to students.  MicroSims are designed to be generated from a brief description of a problem using generative AI tools such as ChatGPT.</p> <p>The term MicroSim was coined by Val Lockhart in the summer of 2023 while she was working with generative AI.  She found that both teachers and students could generate useful p5.js simulations using GPT-4 with little or no training.</p>"},{"location":"#system-prompt-limitations","title":"System Prompt Limitations","text":"<p>Although you can create a System Prompt that puts many best practices in the context window of ChatGPT, it is not an ideal solution. A better process is building a customized GPT on curated examples that have a high-quality interface with good user experience design reviews.  This is one of the objectives of this website.</p>"},{"location":"#the-microsim-registry","title":"The MicroSim Registry","text":"<p>One of our goals on this site is to create a library of MicroSims that can be used to fine-tune a generative AI application.  We have found that new GPTs will create higher-quality simulations if they are trained with a high-quality training set.  This reflects the fact that although there are tens of thousands of sample p5.js animations, many of them are created by first-time programmers.</p> <p>Although it is easy for a non-programmer to use generative AI to create a new MicroSim, it is more difficult to find high-quality MicroSims that have been peer-reviewed by senior software developers and user experience designers.  These MicroSims have some of the following qualities:</p> <ol> <li>Clearly labeled controls with values.  We discourage the use of mouse actions that are unlabeled.</li> <li>Controls that are placed at the bottom of the simulation.  This encourages smartboard use in classrooms.</li> <li>Controls aligned for visual aesthetics</li> <li>A machine-readable (yml) description of the MicroSim including subject, topic and UI controls.</li> </ol>"},{"location":"#how-to-use-this-site","title":"How to Use This Site","text":"<p>We provide both a search and navigation system to reach the MicroSims.</p> <p>Here are some samples to get you started:</p> <ul> <li>Bouncing Ball - our classic \"Hello World\" demo to get started</li> <li>String Harmonics - one version includes the use of sound.</li> <li>3D Sphere - demonstrates the use of the 3D libraries</li> </ul>"},{"location":"about/","title":"About the MicroSims Website","text":"<p>The goal of this website is to provide resources for anyone interested in creating small simulations and animations for use in education using generative AI.</p> <p>This site provides both a quick Getting Started guide as well as intermediate and advanced examples.  Most of the beginning examples use the p5.js JavaScript animation library.  However, we have also seen good results using other JavaScript libraries that do layout and animations.  Make sure you try the search function in the upper right and also make your web browser window wide to see the full navigation panel on the left.</p>"},{"location":"about/#history-of-processing","title":"History of Processing","text":"<p>Processing is a free, open-source coding language for visual art developed by Ben Fry and Casey Reas, former classmates at the MIT Media Lab. Launched in 2001 as Proce55ing, the project encompasses a programming environment designed for artists\u2019 use, and a community of practitioners.</p>"},{"location":"about/#background-on-the-processing-language-and-p5js","title":"Background on the Processing Language and P5.js","text":"<p>p5.js is a modern version of the Processing language.</p> <p>Processing is a flexible software system and a language for learning how to code within the context of animation. It was developed by Casey Reas and Ben Fry, who were then graduate students at the MIT Media Lab. The project began in 2001 and was officially launched in 2003.  Because of its widespread adoption by the open-source community, it is now supported by the Processing Foundation.</p> <p>The key ideas behind Processing include:</p> <ol> <li> <p>Accessibility for Beginners: Processing was designed to serve as the first programming language for artists and designers. It simplifies many aspects of programming and graphics, making it more accessible and less intimidating for beginners.</p> </li> <li> <p>Focus on Visual Output: The language is geared towards creating visual output, which is appealing to artists and designers. This visual focus makes programming more engaging and understandable for those who are more visually oriented.</p> </li> <li> <p>Educational Tool: Processing is widely used as a teaching tool in universities and schools. Its simplicity and immediate visual feedback make it an excellent resource for teaching the fundamentals of programming and digital art.  Immediate visual feedback is a key feature in helping students to learn to code.</p> </li> <li> <p>Open Source and Community Driven: Processing is open-source, meaning that it's free to use and modify. This has led to a large, active community of users who contribute to its development and share their work, further enriching the tool's capabilities and resources.</p> </li> <li> <p>Extensibility and Libraries Processing is not just a language but also an integrated development environment (IDE). It supports extensibility through libraries, allowing users to expand its capabilities. These libraries can be used for a wide range of applications, from computer vision to 3D graphics, contributing to its versatility in creating simulations.</p> </li> <li> <p>Ease of Creating Simulations: Processing simplifies the process of programming graphical simulations. Its straightforward syntax and rich set of drawing functions allow users to quickly prototype and visualize complex systems. This ease of use in creating interactive graphics and simulations is one of its most appealing aspects for artists, designers, and educators.</p> </li> </ol> <p>Overall, Processing stands out for its focus on the arts and design, its ease of use, and its strong community support, all of which contribute to its popularity for creating simulations and visual arts projects.</p>"},{"location":"about/#references","title":"References","text":"<p>The Processing Foundation</p>"},{"location":"contact/","title":"Contact","text":"<p>Dan McCreary on LinkedIn</p>"},{"location":"glossary/","title":"Glossary of High-Level Concepts in Generating MicroSims","text":"<p>This glossary focuses on high-level concepts related to creating high-quality simulations and user interfaces using the p5.js framework.</p>"},{"location":"glossary/#terms-and-definitions","title":"Terms and Definitions","text":""},{"location":"glossary/#accessibility","title":"Accessibility","text":"<p>Making simulations and UIs usable by people with a wide range of abilities.</p>"},{"location":"glossary/#animation","title":"Animation","text":"<p>Creating motion and shape change, often through frame-by-frame updates. Animations with speed controls are a core element to good user experience design.</p>"},{"location":"glossary/#canvas","title":"Canvas","text":"<p>The area where all the drawing in p5.js takes place.  Setting up the correct canvas dimensions with a clear area for drawing and an area for simulation controls is foundational for simulations and good user experience design.</p>"},{"location":"glossary/#link-preview","title":"Link Preview","text":"<p>The image, title and description of a web page when the link is posted to a social media or video chat. We use mkdocs material for this site so we use the configuration provided by the material plugin.</p> <ul> <li>Material Social Cards Plugin Docs</li> <li>YouTube Tutorial</li> </ul>"},{"location":"glossary/#event-handling","title":"Event Handling","text":"<p>Responding to user actions like mouse clicks, key presses, or touch events for interactivity.</p>"},{"location":"glossary/#vector-graphics","title":"Vector Graphics","text":"<p>Scalable graphics for rendering shapes, essential for simulations and UI elements.</p>"},{"location":"glossary/#interactivity","title":"Interactivity**","text":"<p>Involves user input and system feedback, from simple clicks to complex gestures.</p>"},{"location":"glossary/#user-experience-ux-design","title":"User Experience (UX) Design**","text":"<p>Designing interfaces and simulations that are easy, intuitive, and enjoyable to use.</p>"},{"location":"glossary/#rendering","title":"Rendering","text":"<p>How graphics are drawn on the canvas, including 2D and WEBGL (3D) in p5.js. Many of the lastest features of p5.js focus on allowing simulations to create complex simulations with fast rendering speed using the WebGL 3D libraries.</p>"},{"location":"glossary/#responsive-design","title":"Responsive Design","text":"<p>Techniques ensuring simulations and UIs work well on various devices and screen sizes.</p>"},{"location":"glossary/#smart-board","title":"Smart Board","text":"<p>An interactive whiteboard, also known as an interactive board or smart board, is a large interactive display board in the form factor of a whiteboard. In many classrooms, an instructor can stand at the front of a classroom and move sliders below a simulation to control the simulation.</p> <p>For effective use of smart boards, we use a minimum text size of 16 for control labels and values.</p>"},{"location":"glossary/#simulation-fidelity","title":"Simulation Fidelity","text":"<p>The degree to which a simulation replicates real-world processes or systems.</p>"},{"location":"glossary/#slider","title":"Slider","text":"<p>A user interface control that allows a simulation parameter to vary from a minimum to a maximum value. Sliders have a default value and a value for incrementing the range.</p> <p>A slider is also called a \"Range Control Slider\", but in our examples we will just use the shorthand \"slider\".</p>"},{"location":"glossary/#social-page-metadata","title":"Social Page Metadata","text":"<p>Data </p> <pre><code>---\ntitle:\ndescription:\nimage:\n---\n</code></pre>"},{"location":"glossary/#performance-optimization","title":"Performance Optimization","text":"<p>Techniques to make simulations and interfaces run smoothly, including code optimization.</p>"},{"location":"glossary/#prototyping","title":"Prototyping","text":"<p>Creating a preliminary model of a simulation or UI for exploring ideas and testing UX.</p>"},{"location":"glossary/#state-management","title":"State Management","text":"<p>Tracking and updating the status of different elements and interactions in the system. Many simulations use a mode variable to controls the state of a simulation. Examples of states include Running, Stopped and Step instructions.</p>"},{"location":"glossary/#user-testing","title":"User Testing","text":"<p>Evaluating a simulation or interface by testing it with real users for feedback.</p>"},{"location":"glossary/#interaction-design","title":"Interaction Design","text":"<p>Designing interactive digital products with logical and thought-out behaviors.</p>"},{"location":"glossary/#urllib","title":"URLlib","text":"<p>The Python library we use to generate social cards.</p> <p>We use urllib3=1.26.6</p>"},{"location":"glossary/#webgl","title":"WebGL","text":"<p>We Graphics Language (WebGL) is the name of the standard list of commands for drawing within web browsers.</p> <p>This glossary aims to provide a foundational understanding for effectively using the p5.js framework in creating high-quality simulations and user interfaces.</p>"},{"location":"how-we-built-this-site/","title":"How We Built This Site","text":"<p>This page describes how we built this website and some of  the rationale behind why we made various design choices.</p>"},{"location":"how-we-built-this-site/#python","title":"Python","text":"<p>MicroSims are about how we use generative AI to create animations and simulations.  The language of AI is Python.  So we wanted to create a site that could be easily understood by Python developers.</p>"},{"location":"how-we-built-this-site/#mkdocs-vs-docusaurus","title":"Mkdocs vs. Docusaurus","text":"<p>There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus.  Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management.</p>"},{"location":"how-we-built-this-site/#github-and-github-pages","title":"GitHub and GitHub Pages","text":"<p>GitHub is a logical choice to store our  site source code and documentation.  GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs.</p> <p>GitHub also has Issues,  Projects and releases that we can use to manage our bugs and tasks.</p> <p>The best practice for low-cost websites that have public-only content is GitHub Pages. Mkdocs has a command (<code>mkdocs gh-deploy</code>) that does deployment directly to GitHub Pages.  This was an easy choice to make.</p>"},{"location":"how-we-built-this-site/#github-clone","title":"GitHub Clone","text":"<p>If you would like to clone this repository, here are the commands:</p> <pre><code>mkdir projects\ncd projects\ngit clone https://github.com/dmccreary/microsims\n</code></pre>"},{"location":"how-we-built-this-site/#after-changes","title":"After Changes","text":"<p>After you make local changes you must do the following:</p> <pre><code># add the new files to a a local commit transaction\ngit add FILES\n# Execute the a local commit with a message about what and why you are doing the commit\ngit commit -m \"comment\"\n# Update the central GitHub repository\ngit push\n</code></pre>"},{"location":"how-we-built-this-site/#material-theme","title":"Material Theme","text":"<p>We had several options when picking a mkdocs theme:</p> <ol> <li>Mkdocs default</li> <li>Readthedocs</li> <li>Third-Party Themes See Ranking</li> </ol> <p>The Material Theme had 16K stars.  No other theme had over a few hundred. This was also an easy design decision.</p> <p>One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link.  Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process.</p>"},{"location":"how-we-built-this-site/#conda-vs-venv","title":"Conda vs VENV","text":"<p>There are two choices for virtual environments.  We can use the native Python venv or use Conda.  venv is simle but is only designed for pure Python projects.  We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other.  See the ChatGPT Analysis Here.</p> <p>Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries.</p> <pre><code>conda deactivate\nconda create -n mkdocs python=3\nconda activate mkdocs\npip install mkdocs \"mkdocs-material[imaging]\"\n</code></pre>"},{"location":"how-we-built-this-site/#mkdocs-commands","title":"Mkdocs Commands","text":"<p>There are three simple mkdoc commands we use.</p>"},{"location":"how-we-built-this-site/#local-build","title":"Local Build","text":"<pre><code>mkdocs build\n</code></pre> <p>This builds your website in a folder called <code>site</code>.  Use this to test that the mkdocs.yml site is working and does not have any errors.</p>"},{"location":"how-we-built-this-site/#run-a-local-server","title":"Run a Local Server","text":"<pre><code>mkdocs serve\n</code></pre> <p>This runs a server on <code>http://localhost:8000</code>. Use this to test the display formatting locally before you push your code up to the GitHub repo.</p> <pre><code>mkdoc gh-deploy\n</code></pre> <p>This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub.</p>"},{"location":"how-we-built-this-site/#mkdocs-material-social-tags","title":"Mkdocs Material Social Tags","text":"<p>We are using the Material Social tags.  This is a work in progress!</p> <p>Here is what we have learned.</p> <ol> <li>There are extensive image processing libraries that can't be installed with just pip.  You will need to run a tool like brew on the Mac to get the libraries installed.</li> <li>Even after <code>brew</code> installs the libraries, you have to get your environment to find the libraries.  The only way I could get that to work was to set up a local UNIX environment variable.</li> </ol> <p>Here is the brew command that I ran:</p> <pre><code>brew install cairo freetype libffi libjpeg libpng zlib\n</code></pre> <p>I then had to add the following to my ~/.zshrc file:</p> <pre><code>export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib\n</code></pre> <p>Note that I am running on a Mac with Apple silicon.  This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set.</p> <ul> <li>Cover images for blog post #4364</li> <li>Discussion on overriding the Social Card Image</li> </ul>"},{"location":"license/","title":"Creative Commons License","text":"<p>All content in this repository is governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul> <p>Notices</p> <p>You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.</p> <p>No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.</p> <p>This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.</p>"},{"location":"references/","title":"MicroSims References","text":"<ol> <li>P5.js Editor</li> <li>Processing Foundation</li> <li>Custom OpenAI ChatGPT p5.js Visual Art Composer by By Samuel J Bennett from Reddit Post on </li> <li>Sketches by Jordanne</li> <li>Open Processing - thousands of examples</li> <li>Minified P5.js editor Javascript</li> <li>The Official P5js Discord Server</li> <li>Reddit P5.js</li> <li>Reddit Processing</li> <li>Customizing Buttons and Sliders by TuDelft</li> <li>Processing by TuDelft</li> </ol>"},{"location":"submission-guidelines/","title":"MicroSim Submission Guidelines","text":""},{"location":"submission-guidelines/#the-easy-way-for-newcomers","title":"The Easy Way For Newcomers","text":"<p>The quickest way to help us grow content is to just open an Issue on our GitHub Issues page. Put in a short description and all your code.  If you are using the p5.js editor you can just paste in a link to your code there.  We will take care of the rest.</p>"},{"location":"submission-guidelines/#for-experienced-github-users","title":"For Experienced GitHub Users","text":"<p>We prefer you submit a Pull Request to our site. This allows us to test your code and then merge your changes directly into the \"sims\" directory.</p>"},{"location":"submission-guidelines/#usability-tips","title":"Usability Tips","text":"<ol> <li>Create a new directory for you MicroSim in the docs/sims area</li> <li>Copy the Sims Template to get started</li> <li>Provide a background in your index.md file</li> <li>Include an image of your working MicroSim in the index.md file</li> <li>Include a link to your MicroSim html file in the index.md file</li> <li>Include a link to the MicroSim running in the p5.js editor</li> <li>Include the JavaScript file in your index.md file</li> <li>Place the MicroSim controls below your drawing region</li> <li>Provide a simple example with just one or two sliders and if appropriate, have a line to an \"Advanced\" version with multiple sliders</li> <li>Use a very light gray or '''aliceblue''' color as the background of your drawing region.  Use white as the background for the controls region.</li> </ol>"},{"location":"submission-guidelines/#sample-templates-for-drawing-and-controls-region","title":"Sample Templates for Drawing and Controls Region","text":"<ol> <li>Template for index.md</li> <li>Template for MicroSim</li> </ol>"},{"location":"prompts/","title":"Sample Prompts for Generating MicroSims","text":"<p>This area of our site contains guidelines on using generative AI tools to create microsims.  There are several strategies we employ.</p>"},{"location":"prompts/#leveraging-projects","title":"Leveraging Projects","text":"<p>Both Anthropic Claude and OpenAI have the concept of projects where you can load sample code.  We strongly suggest you load sample working MicroSimulation sketch files and indicate in your prompts that you want to use these as templates.</p>"},{"location":"prompts/#why-templates-work","title":"Why Templates Work","text":"<p>Generative AI is very good at generating algorithms, but not very good at generating layout.  By using templates with specific positioning rules in the comments you can get much better layout.</p>"},{"location":"prompts/#publish-layout-rules-in-your-project","title":"Publish Layout Rules In Your Project","text":""},{"location":"prompts/#basic-prompts","title":"Basic Prompts","text":"<p>Basic Prompts</p>"},{"location":"prompts/basic-prompts/","title":"Basic MicroSim Prompts","text":""},{"location":"prompts/basic-prompts/#basic-prompt","title":"Basic Prompt","text":"<p>Prompt</p> <p>Please generate a p5.js sketch. Only generate the sketch.js file. Do not generate the html file. The sketch must simulate...</p>"},{"location":"prompts/basic-prompts/#prompts-with-drawing-and-control-regions","title":"Prompts with Drawing and Control Regions","text":"<p>Prompt</p> <p>Please generate a p5.js sketch. Only generate the sketch.js file. Do not generate the html file. The sketch should have two regions of equal width on the canvas. The top region is the drawing area. The bottom region is the controls area. All drawing should be done in the drawing region of the canvas. All controls should be placed on the bottom controls region of the canvas. The input range controls are... The buttons are ... The sketch must simulate...</p>"},{"location":"prompts/basic-prompts/#responsive-prompts","title":"Responsive Prompts","text":"<p>Prompt</p> <p>Please generate a p5.js sketch. Only generate the sketch.js file. Do not generate the html file. The sketch should have two regions of equal width on the canvas. The top region is the drawing area. The bottom region is the controls area. All drawing should be done in the drawing region of the canvas. All controls should be placed on the bottom controls region of the canvas. Use the responsive-design.js template.</p>"},{"location":"setup/","title":"MicroSims Quick Start","text":""},{"location":"setup/#getting-started","title":"Getting Started","text":"<p>Getting started is easy!</p> <ol> <li>Go to your favorite generative AI tool such as OpenAi's ChatGPT.  GPT-4 is the best version to use but it has a $20/month fee.</li> <li>Type in a chat that starts with \"Generate a p5.js file that does...\"</li> <li>Copy the generated code and paste it into the p5.js Editor.  You will need to replace the default code.</li> <li>Press the \"Play\" button (the red triangle)</li> <li>Save your MicroSim and share the link with your friends!</li> </ol> <p>That is it!  Most people can generate their first MicroSims in a few minutes.</p> <p>You can also use the custom GPT called the Knowledge Graph Builder which has been fine-tuned on the p5.js reference library.</p> <p>If you don't like what you saw, go back to your generative AI tool and create a more specific request. Then copy the result of this new result into the P5.js editor. Just keep repeating this process until your simulation does what it needs to do. You may have to repeat this a dozen times, but most users find that they are still 10x more productive than having to learn to write code!</p> <p>If you like what you see you can create an account on the P5.js editor and come back and show your class.</p> <p>That is it!  There are many other tools that we can explore to make this process even easier and tune the quality of the output to specific tasks.</p>"},{"location":"setup/#background-on-processing","title":"Background on Processing","text":"<p>One of the reasons that generative AI is so good at generating these simulations is that Processing has been around for about 23 years. It is widely used by artists, teachers and others to generate high-quality animations with interactive controls.  As a result, there is ample code online that generative AI tools are trained on.</p>"},{"location":"setup/#avoid-the-urge-to-fix-the-code","title":"Avoid the Urge to Fix the Code","text":"<p>Always go back to the ChatGPT and tell it what is not working and suggest a fix.</p>"},{"location":"setup/#start-with-a-simple-prompt","title":"Start with a Simple Prompt","text":"<p>Start with a simple prompt that describes the core function that you would like done.</p>"},{"location":"setup/#add-controls","title":"Add Controls","text":"<p>Start adding controls such as sliders and buttons.  A good simulation always allows the user to change parameters such as the animation speed and how to start, stop, step and reset the simulation.</p>"},{"location":"setup/#focus-on-usability","title":"Focus on Usability","text":""},{"location":"setup/#share-your-microsim","title":"Share Your MicroSim","text":"<p>The best way to share your simulation is to create a pull request with your working simulation.  Make sure you read the MicroSim structure document to get an idea of how to best structure your code.</p> <p>If you are not clear on how to do a pull request, you can always open an issue in GitHub and post your code there.</p> <p>If you need help, please contact Dan McCreary on LinkedIn.</p>"},{"location":"setup/01-processing/","title":"Background on the Processing Language","text":"<p>p5.js is a modern version of the Processing language.</p> <p>Processing is a flexible software system and a language for learning how to code within the context of animation. It was developed by Casey Reas and Ben Fry, who were then graduate students at the MIT Media Lab. The project began in 2001 and was officially launched in 2003.  Because of its widespread adoption by the open-source community, it is now supported by the Processing Foundation.</p> <p>The key ideas behind Processing include:</p> <ol> <li> <p>Accessibility for Beginners: Processing was designed to serve as the first programming language for artists and designers. It simplifies many aspects of programming and graphics, making it more accessible and less intimidating for beginners.</p> </li> <li> <p>Focus on Visual Output: The language is geared towards creating visual output, which is appealing to artists and designers. This visual focus makes programming more engaging and understandable for those who are more visually oriented.</p> </li> <li> <p>Educational Tool: Processing is widely used as a teaching tool in universities and schools. Its simplicity and immediate visual feedback make it an excellent resource for teaching the fundamentals of programming and digital art.  Immediate visual feedback is a key feature in helping students to learn to code.</p> </li> <li> <p>Open Source and Community Driven: Processing is open-source, meaning that it's free to use and modify. This has led to a large, active community of users who contribute to its development and share their work, further enriching the tool's capabilities and resources.</p> </li> <li> <p>Extensibility and Libraries Processing is not just a language but also an integrated development environment (IDE). It supports extensibility through libraries, allowing users to expand its capabilities. These libraries can be used for a wide range of applications, from computer vision to 3D graphics, contributing to its versatility in creating simulations.</p> </li> <li> <p>Ease of Creating Simulations: Processing simplifies the process of programming graphical simulations. Its straightforward syntax and rich set of drawing functions allow users to quickly prototype and visualize complex systems. This ease of use in creating interactive graphics and simulations is one of its most appealing aspects for artists, designers, and educators.</p> </li> </ol> <p>Overall, Processing stands out for its focus on the arts and design, its ease of use, and its strong community support, all of which contribute to its popularity for creating simulations and visual arts projects.</p>"},{"location":"setup/02-system-prompt/","title":"Setting up a System Prompt","text":"<p>With ChatGPT you can set up a single system prompt for generating p5.js MicroSims.  The text is automatically inserted before your prompt.</p>"},{"location":"setup/02-system-prompt/#system-prompte-for-a-2d-p5js","title":"System Prompte for a 2D p5.js","text":"<p>Here is a sample systems prompt for a 2D simulation.</p> <pre><code>1. Generate a single file p5.js sketch for a 2D animation.\n2. Do not generate any html files.\n3. Set the width and height of the canvas as global variables before the setup.\n4. Use a default text of 16 by placing the textSize(16) in the setup.\n5. Use a background fill of 245 (light gray) for the drawing area.\n6. Place the controls - sliders and buttons - on a white background - 255\n7. Always place a label and value before each slider using the text() function.\n8. DO NOT place a slider on the canvas without a label and value before it.\n9. Indent the slider to allow the label and value to be place to the left of the slider.\n10. Use the slider style function to make the slider span the width of the canvas less\nthe margin for the lable and value.\n11. Place all the sliders at the bottom of the canvas.\n12. Align the sliders vertically.\n13. Always return the result as a single JavaScript file.\n\nUse the following template:\n\n\nlet width = 400;\nlet height = 300;\nfunction draw {\n    const canvas = createCanvas(width, height)\n}\n</code></pre>"},{"location":"setup/02-system-prompt/#system-prompte-for-a-3d-p5js","title":"System Prompte for a 3D p5.js","text":"<pre><code>1. Generate a single file p5.js sketch for a 3D animation.\n2. Use the ```WEBGL``` as the third parameter of the createCanvas.\n\nfunction setup() {\n  createCanvas(710, 400, WEBGL);\n\n  describe(\n    'a 3d example.'\n  );\n}\n</code></pre>"},{"location":"setup/03-sound-test/","title":"Sound Test","text":"<p>Make sure you add the following line to your .html file:</p> <pre><code>    &lt;script src=\"../js/p5.sound.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>The line can be place right after the loading of the p5.js library in the html head section.</p> <pre><code>&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;String Harmonics&lt;/title&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"../js/p5.sound.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>We suggest having the default mode of a sim have the sound off.  Add a button to turn the sound on.</p>"},{"location":"setup/04-structure/","title":"Structure of a MicroSim Demonstration","text":"<p>To make it easier for developers to understand and reuse our MicroSims, we are proposing the following directory and file standards.</p>"},{"location":"setup/04-structure/#required-components","title":"Required Components","text":"<ol> <li>Directory with the name of the app</li> <li>index.md file within this directory.  The index.md file has a link to the HTML file.</li> <li>HTML file that displays the application.  It also loads the JavaScript file and provides a link back to the main index.md file.</li> <li>JavaScript file that holds the simulation code.</li> </ol>"},{"location":"setup/04-structure/#optional-components","title":"Optional Components","text":"<ol> <li>An image of the working simulation.  Ideally, this will serve as the Link Preview.</li> <li>A button to the working simulation.</li> <li>A sample set of one or more prompts that were used to generate the simulation.</li> <li>Sample of code that was generated.</li> <li>Suggested activities or lesson plans.</li> <li>Links to related simulations.</li> </ol>"},{"location":"setup/05-yaml-file/","title":"MicroSim YAML File","text":"<pre><code>MicroSim:\n  Name: \"Name of the MicroSim\"\n  Description: \"A brief description of what the MicroSim does\"\n  SubjectArea: \"The subject area of the MicroSim\"\n  Topic: \"Specific topic the MicroSim addresses\"\n  Parameters:\n    - Parameter1:\n        Label: \"Label for Parameter 1\"\n        Min: minimum_value\n        Max: maximum_value\n        Default: default_value\n        Increment: increment_value\n    - Parameter2:\n        Label: \"Label for Parameter 2\"\n        Min: minimum_value\n        Max: maximum_value\n        Default: default_value\n        Increment: increment_value\n    # Add more parameters as needed\n  GradeLevel: \"Appropriate grade level for the MicroSim\"\n  LessonPlans:\n    - LessonPlan1:\n        Title: \"Title of Lesson Plan 1\"\n        Description: \"Description of Lesson Plan 1\"\n        # Additional details about the lesson plan\n    - LessonPlan2:\n        Title: \"Title of Lesson Plan 2\"\n        Description: \"Description of Lesson Plan 2\"\n        # Additional details about the lesson plan\n    # Add more lesson plans as needed\n</code></pre>"},{"location":"setup/06-link-previews/","title":"Link Previews on Social Media","text":"<p>Many of our teachers use tools such as Zoom, Teams or Google to run their classes.  The instructors copy the link of each simulation and past it into a chat window. They have told us it is very helpful if a high-quality image appears above or as the link.  This is called a Link Preview.</p> <p>Each of the simulations can contain its own link preview image.</p>"},{"location":"setup/06-link-previews/#image-standards","title":"Image Standards","text":"<p>For creating high-quality preview images on  social media using the OpenGraph image standard,  the recommended resolution and aspect ratio are as follows:</p> <ol> <li>Recommended Resolution: The ideal resolution for Open Graph images is generally 1200 pixels by 627 pixels (1.91:1 aspect ratio)\u200b\u200b. However, some sources suggest a slightly different size of 1200\u00d7630 pixels, which also maintains the 1.91 aspect ratio\u200b\u200b.</li> <li>The minimum requirement is 200 by 200 pixels.</li> <li>Aspect Ratio: The common aspect ratio recommended is 1.91:1. This ratio is consistent across various guidelines, ensuring that the image displays effectively in social media link previews\u200b\u200b.</li> <li>Image Size Limit: The image size should not exceed 5MB to ensure optimal loading and compatibility across platforms\u200b\u200b. For Facebook, specifically, it is recommended that the Open Graph image should not be more than 8MB\u200b\u200b.</li> </ol> <p>These specifications are designed to ensure that your images display correctly and attractively across various social media platforms when shared as link previews.</p>"},{"location":"setup/06-link-previews/#references","title":"References","text":"<ul> <li>Social media preview with open graph meta tags</li> <li>The Open Graph Image</li> </ul>"},{"location":"setup/07-ux-tips/","title":"MicroSim User Experience Tips","text":"<p>We have been testing our MicroSims with teachers, students and mentors and they have given us some valuable tips to make it easier to integrate these simulations into their classrooms.</p> <p>We should note that it gets easier every month to have tools like ChatGPT generate working MicroSims.  The challenge is that the user interface controls are not always easy to use. This requires a bit of \"tweaking\" of the simulation code to get the right placement and alignment of the MicroSim.</p> <p>To help you with these tips we have provided a Template MicroSim that you can copy.</p>"},{"location":"setup/07-ux-tips/#use-consistent-structure","title":"Use Consistent Structure","text":"<p>We would like our MicroSims to all have a consistent structure:</p> <ol> <li>A directory that the MicroSim is contained</li> <li>A main index.md file that describes the MicroSim</li> <li>Links in the main index file to the demos and images</li> <li>Lesson plans in the main index.md file or links to lesson plans</li> </ol>"},{"location":"setup/07-ux-tips/#include-an-image-as-the-first-element","title":"Include an Image as the First Element","text":"<p>Including a static image (or a gif) is critical for people to quickly see if this is the MicroSim they have been expecting. These images can also be used to build link previews for posting on social media as well as for generating \"catalog cards\" that users can scroll through.</p> <p>Getting a good image is not always easy.  Some screen capture tools don't work well with a moving animation.</p> <p>Try to create an image that is large enough to be clear even on a wide computer screen.  There are also detailed guidelines for creating images that are used on link previews for social media.</p> <p>Posting your MicroSim with an image tends to get almost double the amount of clickthroughs and retweets!</p> <p>Here are the key points suggested by the Open Graph standard:</p> <ol> <li>Use an image that is a minimum of 600 x 314 pixels (width and height)</li> <li>Facebook recommends a size of 1200 x 630</li> <li>Keep the image sizes under 7MB</li> <li>The aspect ratio should be 1 to 1.91 (height to width)</li> <li>Test the page link preview using a tool such as the Open Graph Testing Tool</li> </ol> <p>Here is a sample of how you can include a centered image with a caption in your Markdown content.</p> <p>You can learn more about the Open Graph Protocol at the ogp.md website.</p> <p>Here is a template of code you can include in your mkdocs markdown index.md file:</p> <pre><code>&lt;figure markdown&gt;\n   ![Image Name](./image.png){ width=\"400\" }\n   &lt;figcaption&gt;Figure caption.&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> <p>Note this depends on your mkdocs.yml file having the right configuration.</p>"},{"location":"setup/07-ux-tips/#include-a-link-to-the-demo-as-the-second-element","title":"Include a Link to the Demo as the Second Element","text":"<p>Place your demo in either an HTML file or another file that places the MicroSim at the top upper left corner of the page. Don't require the user to scroll down on the demo page.</p>"},{"location":"setup/07-ux-tips/#place-simulation-controls-under-the-microsim","title":"Place Simulation Controls Under the MicroSim","text":"<p>This allows teachers at a smart board to use the MicroSims at the front of a classroom.  Teachers can change the slider values without blocking the screen.</p>"},{"location":"setup/07-ux-tips/#provide-a-back-to-lesson-plan-link-under-the-simulation","title":"Provide a \"Back To Lesson Plan\" Link under the Simulation","text":"<pre><code>&lt;a href=\"./\"&gt;Back to Lesson Plan&lt;/a&gt;\n</code></pre>"},{"location":"setup/07-ux-tips/#make-sliders-wide","title":"Make Sliders Wide","text":"<p>By default, many generated MicroSims make the slider the default width, which does not provide the fine resolution of setting a value.</p>"},{"location":"setup/07-ux-tips/#provide-sound-off-versions","title":"Provide Sound-Off Versions","text":"<p>If you include sound in your MicroSims (encouraged), please allow the sound to be off by default or have a version of the sim that runs without sound.</p> <p>If you have ever been in a classroom of 30 students all hearing the sound of bouncing balls you will understand why this is important.</p>"},{"location":"setup/07-ux-tips/#provide-a-link-to-the-p5js-editor","title":"Provide a Link to the p5.js Editor","text":"<p>Sometimes you want to make it easy for users to quickly change some aspect of your simulation that is not available in the controls.  One way to do this is to provide a link to a working simulation in the P5.js edito.</p> <p>This can be an extra maintenance step and I frequently make small changes to the simulation and then forget to update the editor code.</p>"},{"location":"setup/08-paste-as-markdown/","title":"Paste as Markdown","text":"<p>When you copy text from ChatGPT, it puts the formatted text in a paste buffer in a rich-text format.   But if you simply do a \"Paste\" function within your editor, it may lose all the formatting.  What we need is a \"Paste as Markdown\" function that preserves the Markdown formatting within the paste buffer.</p> <p>Note that the Copy function usually retains the structure of your selected Markdown text.  The problem is that the default Paste function tends to remove formatting information such as header levels, links, bold, italics, numbered lists etc.</p> <p>Depending on your desktop, there are several ways of adding the \"Paste as Markdown\" feature.</p>"},{"location":"setup/08-paste-as-markdown/#paste-as-markdown-chrome-extension","title":"Paste as Markdown Chrome Extension","text":"<p>One way is to add the Paste As Markdown Chrome Extension.  This will add an additional menu to your Chrome browser.</p>"},{"location":"setup/08-paste-as-markdown/#paste-as-markdown-visual-studio-extension","title":"Paste as Markdown Visual Studio Extension","text":"<p>Within Visual Studio, you can install and extension called Markdown Paste.  If you then do a Option/Command V you will retain all the formatting in your Markdown file!</p>"},{"location":"setup/p5-reference-manual/","title":"P5.js Reference Guide","text":""},{"location":"setup/p5-reference-manual/#canvas","title":"Canvas","text":"<p>The area where p5.js drawings are displayed. Created using <code>createCanvas()</code>. A good example is a canvas that is 400 wide and 300 high. We can use two global variables to declare these dimensions.</p> <pre><code>let width = 400\nlet height = 300\nfunction setup() {\n    const canvas = createCanvas(width, height);\n    // code to connect your canvas into the HTML\n    // canvas.parent('canvas-container');\n    // uncommet this line only within the HTML file\n}\n</code></pre>"},{"location":"setup/p5-reference-manual/#setup","title":"setup()","text":"<p>Called once at the start of the program to define initial environment properties.</p> <pre><code>let width = 400\nlet height = 300\nfunction setup() {\n    createCanvas(width, height);\n    background(245);\n}\n</code></pre>"},{"location":"setup/p5-reference-manual/#draw","title":"draw()","text":"<p>Continuously executes the lines of code inside its block until stopped.</p> <pre><code>function draw() {\n    // draw a circle in the center\n    circle(width/2, height/2, 50);\n}\n  ```\n\n#### createVector()\n\nCreates a new `p5.Vector` object with a x and y value.\n\n  ```javascript\n  let v = createVector(50, 50);\n  ```\n\n#### mouseX, mouseY\n- System variables storing the coordinates of the mouse.\n  ```javascript\n  function draw() {\n    circle(mouseX, mouseY, 50);\n  }\n  ```\n\n#### background()\nSets the color used for the canvas background.  Our default should be 245\nwhich is a light gray.\n\n  ```javascript\n  function setup() {\n    createCanvas(400, 400);\n    background(255); // White background\n  }\n  ```\n\n#### fill()\n\nSets the color used to fill shapes.\n\n```javascript\nfunction draw() {\n  fill(255, 0, 0); // Red color\n  ellipse(50, 50, 80, 80);\n}\n</code></pre>"},{"location":"setup/p5-reference-manual/#stroke","title":"stroke()","text":"<p>Sets the color used for lines and borders around shapes.   <pre><code>function draw() {\n  stroke(0); // Black color\n  line(0, 0, 100, 100);\n}\n</code></pre></p>"},{"location":"setup/p5-reference-manual/#rect","title":"rect()","text":"<ul> <li>Draws a rectangle.   <pre><code>function draw() {\n  rect(30, 20, 55, 55);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#ellipse","title":"ellipse()","text":"<ul> <li>Draws an ellipse (oval).   <pre><code>function draw() {\n  ellipse(50, 50, 80, 80);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#line","title":"line()","text":"<ul> <li>Draws a line.   <pre><code>function draw() {\n  line(30, 20, 85, 75);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#loadimage","title":"loadImage()","text":"<ul> <li>Loads an image from a path.   <pre><code>let img;\nfunction preload() {\n  img = loadImage('image.png');\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#image","title":"image()","text":"<ul> <li>Draws an image to the canvas.   <pre><code>function draw() {\n  image(img, 0, 0);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#creategraphics","title":"createGraphics()","text":"<ul> <li>Creates a new graphics object.   <pre><code>let pg;\nfunction setup() {\n  createCanvas(100, 100);\n  pg = createGraphics(50, 50);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#translate","title":"translate()","text":"<ul> <li>Remaps the (0,0) position on the canvas.   <pre><code>function draw() {\n  translate(width / 2, height / 2);\n  rect(0, 0, 30, 30);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#rotate","title":"rotate()","text":"<ul> <li>Rotates the entire canvas.   <pre><code>function draw() {\n  rotate(PI / 4);\n  rect(50, 50, 100, 50);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#push","title":"push()","text":"<p>Saves the current drawing style settings and transformations.   <pre><code>function draw() {\n  push();\n  stroke(0);\n  fill(102);\n  rect(0, 0, 50, 50);\n  pop();\n}\n</code></pre></p>"},{"location":"setup/p5-reference-manual/#pop","title":"pop()","text":"<p>Restores the drawing style settings and transformations previously saved.   <pre><code>// Used in conjunction with push() as shown above.\n</code></pre></p>"},{"location":"setup/p5-reference-manual/#framerate","title":"frameRate()","text":"<p>Specifies the number of frames to be displayed every second.   <pre><code>function setup() {\n  frameRate(30);\n}\n</code></pre></p>"},{"location":"setup/p5-reference-manual/#noloop","title":"noLoop()","text":"<p>Stops the draw loop.  This can be used when a drawing is finished.   <pre><code>function draw() {\n  ellipse(50, 50, 80, 80);\n  noLoop();\n}\n</code></pre></p>"},{"location":"setup/p5-reference-manual/#loop","title":"loop()","text":"<p>Restarts the draw loop after it has been stopped.</p> <pre><code>function mousePressed() {\n  loop();\n}\n</code></pre>"},{"location":"setup/p5-reference-manual/#keypressed","title":"keyPressed()","text":"<p>Called whenever a key is pressed.</p> <pre><code>function keyPressed() {\n  if (keyCode === LEFT_ARROW) {\n    // Left arrow key pressed\n  }\n}\n</code></pre>"},{"location":"setup/p5-reference-manual/#mousepressed","title":"mousePressed()","text":"<p>Called whenever a mouse button is pressed.   <pre><code>function mousePressed() {\n  ellipse(mouseX, mouseY, 80, 80);\n}\n</code></pre></p>"},{"location":"setup/template/","title":"Getting Started MicroSim Template","text":"<p>Run the Template MicroSim Edit tne MicroSim Template</p>"},{"location":"setup/template/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us ...</p>"},{"location":"setup/template/#use-an-iframe","title":"Use an iFrame","text":"<pre><code>&lt;iframe src=\"template.html\" height=\"400px\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"setup/template/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a p5.js sketch.\nDraw a blue circle in the center.\nHave a slider change the radius of the circle.\nUse the attached template.js file.\n</code></pre>"},{"location":"setup/template/#sample-templatejs-file","title":"Sample template.js file","text":"<pre><code>// MicroSim Template\n// canvas regions setup\n// let canvasWidth = 750;\nlet drawHeight = 335;\nlet controlHeight = 50;\nlet canvasHeight = drawHeight + controlHeight;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet margin = 50;\n\nfunction setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  var mainElement = document.querySelector('main');\n  canvas.parent(mainElement);\n  textSize(16);\n\n  // create a new slider at th bottom of the canvas\n  mySlider = createSlider(0, 300, 150, 1);\n  mySlider.position(120, drawHeight + 15);\n  mySlider.size(canvasWidth - 3*margin); \n}\n\nfunction draw() {\n  // background of drawing region\n  fill('aliceblue');\n  rect(0, 0, canvasWidth, drawHeight);\n\n  // background of controls\n  fill('whitegray');\n  rect(0, drawHeight, canvasWidth, controlHeight);\n\n  // get the updated slider value\n  radius = mySlider.value();\n\n  // custom drawing here\n  fill('blue');\n  circle(canvasWidth/2, canvasHeight/2, radius);\n\n  // add the slider label and value in control area\n  fill('black');\n  text(\"Radius:\"+radius, 15, drawHeight + 30)\n}\n</code></pre>"},{"location":"setup/template/#explanation-of-code","title":"Explanation Of Code","text":""},{"location":"setup/template/#drawing-regions","title":"Drawing Regions","text":""},{"location":"setup/template/#setup","title":"Setup","text":""},{"location":"setup/template/#draw","title":"Draw","text":""},{"location":"sims/","title":"Examples of MicroSims","text":"<p>This section of the MicroSims website contained examples of MicroSims that cover many different subjects in education including geometry, electronics, biology, physics, linear algebra, statistics, systems thinking, cellular automata, fractals and computer science.</p> <p>We encourage you to submit your own MicroSims and we have a set of guidelines to help </p> <p>Gallery</p>"},{"location":"sims/gallery/","title":"Gallery","text":"Arithmetic Logic Unit (ALU) Analog Clock Battery Drain Breath First Graph Search Binary Number Bouncing Ball Canon and Projectile Motion Circle Battery Circuit Collision Avoidance Robot Gold Star Logic Gates Named Colors Polygon Pulse-Width Modulation Sine Wave String Harmonics Supply and Demand"},{"location":"sims/555-timer/","title":"555 Timer","text":"555 Timer MicroSim <p>Run the 555 Timer MicroSim</p> <p>Edit the 555 Timer MicroSim</p> <p>The 555 timer IC is an integrated circuit used in a variety of timer, delay, pulse generation, and oscillator applications. It is one of the most popular timing ICs due to its flexibility and price.</p>"},{"location":"sims/555-timer/#prompt","title":"Prompt","text":"<pre><code>Create a single file p5.js simulation of a 555 timer in monostable mode.\nAdd sliders for resistance and capacitance.\nMake the canvas be 400x250.\nMake the text size be 16.\nDraw a waveform and an LED that flashes.\nPlace the sliders at the bottom of the canvas in the bottom 50 pixels.\nAdd labels and values to the left of the sliders.  \n</code></pre>"},{"location":"sims/555-timer/#response","title":"Response","text":"<pre><code>This code will create an interactive simulation where you can adjust the resistance and capacitance values using sliders and see the effect on the LED flash rate and the waveform displayed. The LED and waveform visually represent the timer's operation in monostable mode.\n</code></pre> <pre><code>let resistanceSlider, capacitanceSlider;\nlet ledState = false;\nlet lastTriggerTime = 0;\nlet waveform = [];\nconst canvasWidth = 400, canvasHeight = 450;\n\nfunction setup() {\n  createCanvas(canvasWidth, canvasHeight);\n  textSize(12);\n\n  // Sliders\n  resistanceSlider = createSlider(1, 100, 50);\n  resistanceSlider.position(20, canvasHeight - 30);\n  capacitanceSlider = createSlider(1, 100, 50);\n  capacitanceSlider.position(220, canvasHeight - 30);\n}\n\nfunction draw() {\n  background(255);\n\n  // Draw the waveform\n  drawWaveform();\n\n  // Update and draw LED\n  updateLED();\n  drawLED();\n\n  // Draw slider labels and values\n  drawLabelsAndValues();\n}\n\nfunction drawWaveform() {\n  stroke(0);\n  noFill();\n  beginShape();\n  for (let i = 0; i &lt; waveform.length; i++) {\n    let x = map(i, 0, waveform.length, 0, width);\n    let y = map(waveform[i], 0, 1, 150, 100);\n    vertex(x, y);\n  }\n  endShape();\n\n  if (frameCount % 2 === 0) {\n    waveform.push(ledState ? 1 : 0);\n    if (waveform.length &gt; width) {\n      waveform.splice(0, 1);\n    }\n  }\n}\n\nfunction updateLED() {\n  let currentTime = millis();\n  let thresholdTime = lastTriggerTime + (resistanceSlider.value() * capacitanceSlider.value());\n  if (currentTime &gt; thresholdTime) {\n    ledState = !ledState;\n    lastTriggerTime = currentTime;\n  }\n}\n\nfunction drawLED() {\n  fill(ledState ? color(255, 0, 0) : color(128));\n  ellipse(200, 50, 30, 30);\n}\n\nfunction drawLabelsAndValues() {\n  fill(0);\n  text(\"Resistance: \" + resistanceSlider.value() + \" \u03a9\", 20, canvasHeight - 40);\n  text(\"Capacitance: \" + capacitanceSlider.value() + \" \u00b5F\", 220, canvasHeight - 40);\n}\n\n// Add this function to handle window resizing\nfunction windowResized() {\n  resizeCanvas(canvasWidth, canvasHeight);\n}\n</code></pre>"},{"location":"sims/555-timer/#references","title":"References","text":"<ul> <li>555 timer IC on Wikipedia</li> <li>Digikey 555-timer Calculator</li> <li>555 Circuit Simulator on Falstad - this allows you to change the resistor and capacitor in a simulator and it will show you the frequency of a signal.</li> </ul>"},{"location":"sims/ac-circuit/","title":"AC Circut","text":"AC Circuit <p>Run AC Circuit MicroSim</p> <p>Edit This MicroSim</p>"},{"location":"sims/alu/","title":"Arithmetic Logic Unit (ALU)","text":"Arithmetic Logic Unit <p>Demo</p> <p>Note</p> <p>This microsim is a work-in-progress.  The ALU works in some cases but has bugs   and the layout is not optimized.</p> <p>Prompt:</p> <pre><code>Create a single file ps.js sketch on a 400x400 canvas.\nThe sketch is a simulation of an Arithmetic Logic Unit (ALU).\nPlace a title \"Arithmetic Logic Unit\" on the top center of the canvas of text size 16.\nThe inputs are two registers: A and B.\nPlace the labels for the registers to the left of text inputs.\nPlace the input registers so the align vertically.\nPlace buttons for the operations below the registers.\nThe operation are: ADD, SUBTRACT, AND, OR, XOR.\nDisplay the value of the output below the operations.\nLabel the output value \"Output\" in blue text.\nCreate an input toggle button to display all values in either binary or decimal.\nMake the default value be decimal.\n</code></pre> <pre><code>let inputA;\nlet inputB;\nlet outputP;\nlet binDecToggle;\nlet isBinary = false;\n\nfunction setup() {\n  createCanvas(400, 400);\n  background(220);\n  textAlign(CENTER, CENTER);\n\n  // Title\n  textSize(16);\n  text(\"Arithmetic Logic Unit\", width/2, 20);\n\n  // Register A\n  text(\"Register A:\", 60, 60);\n  inputA = createInput('201');\n  inputA.position(110, 50);\n\n  // Register B\n  text(\"Register B:\", 60, 100);\n  inputB = createInput('100');\n  inputB.position(110, 90);\n\n  // Operations\n  let addBtn = createButton('ADD');\n  addBtn.position(20, 140);\n  addBtn.mousePressed(() =&gt; performOperation(\"ADD\"));\n\n  let subBtn = createButton('SUBTRACT');\n  subBtn.position(70, 140);\n  subBtn.mousePressed(() =&gt; performOperation(\"SUBTRACT\"));\n\n  let andBtn = createButton('AND');\n  andBtn.position(165, 140);\n  andBtn.mousePressed(() =&gt; performOperation(\"AND\"));\n\n  let orBtn = createButton('OR');\n  orBtn.position(220, 140);\n  orBtn.mousePressed(() =&gt; performOperation(\"OR\"));\n\n  let xorBtn = createButton('XOR');\n  xorBtn.position(265, 140);\n  xorBtn.mousePressed(() =&gt; performOperation(\"XOR\"));\n\n  // Output label\n  fill('blue');\n  text(\"Output:\", 60, 200);\n\n  // Output display\n  outputP = createP(\"0\");\n  outputP.position(110, 175);\n\n  // Binary/Decimal toggle button\n  binDecToggle = createButton('Toggle Binary/Decimal');\n  binDecToggle.position(100, 220);\n  binDecToggle.mousePressed(toggleBinDec);\n}\n\nfunction draw() {\n  // nothing\n}\n\nfunction performOperation(operation) {\n  let a = int(inputA.value());\n  let b = int(inputB.value());\n\n  let result;\n\n  switch (operation) {\n    case \"ADD\":\n      result = a + b;\n      break;\n    case \"SUBTRACT\":\n      result = a - b;\n      break;\n    case \"AND\":\n      result = a &amp; b;\n      break;\n    case \"OR\":\n      result = a | b;\n      break;\n    case \"XOR\":\n      result = a ^ b;\n      break;\n  }\n\n// Convert decimal number to binary\nfunction dec_bin(decNum) {\n  if (decNum === 0) return \"0\";\n\n  let binary = \"\";\n  while (decNum &gt; 0) {\n    binary = (decNum % 2) + binary;\n    decNum = Math.floor(decNum / 2);\n  }\n  return binary;\n}\n\n  if (isBinary) {\n    outputP.html(dec_bin(result));\n  } else {\n    outputP.html(result.toString());\n  }\n}\n\nfunction toggleBinDec() {\n  isBinary = !isBinary;\n\n  performOperation(\"ADD\"); // Refresh the value on toggle\n}\n</code></pre>"},{"location":"sims/alu/#challenges","title":"Challenges","text":"<p>Real ALUs also keep track of several bits if information about the result of the arithmetic such as if there were overflows.</p> <p>Challenges</p> <ol> <li>Add a bit to indicate the result is non-zero.</li> <li>Add a sign flag to indicate the number is non-negative</li> <li>Add a carry flag to indicate that the result fits in 16 bits</li> <li>Add an overflow flag to indicate that the sum of two numbers is also positive</li> </ol>"},{"location":"sims/alu/#references","title":"References","text":"<p>I love this small simulator from CircuitVerse:</p> <p>Four Bit ALU on CircuitVerse - This shows the process of using an OpCode which is a number for an operation. The carry bit does not work in this example.</p> <p>A much better example is here:</p> <p>University of New Brunswick EE3221 Course</p> <p>That version is a binary only but it includes the following flags:</p> <p>Flags The Zero flag (Z) is 0 because the result is non-zero</p> <p>The Sign flag (N) is 0 because the result appears non-negative (the MSB is 0)</p> <p>The Carry flag (C) is 0 (good) because the addition result did not exceed 16-bits. This would be of interest if (RA,RB) represent unsigned integers (0..65535).</p> <p>The Overflow flag (V) is 0 (good) because adding two positive numbers gave a positive result. This would be of interest if (RA,RB) represent signed integers (-32768..+32767).</p>"},{"location":"sims/analog-circuit/","title":"Analog Circuits","text":"<p>In these MicroSims we will build simulations of analog circuits.  Instead of DC voltages, these circuits often have AC inputs and include components such as capacitors, inductors and resistors.</p> <p>Link to Demo</p>"},{"location":"sims/analog-circuit/#about-this-microsim","title":"About this MicroSim","text":""},{"location":"sims/analog-circuit/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/analog-circuit/#sample-response","title":"Sample Response","text":"<pre><code>let canvasHeight = 400;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\nfunction setup() {\nconst canvas = createCanvas(canvasWidth, canvasHeight);\n  canvas.parent('canvas-container');\n  fill(245);\n  rect(0,0, canvasWidth, canvasHeight);\n  fill('green');\n  circle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/analog-circuit/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/analog-circuit/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/analog-circuit/#activities","title":"Activities","text":""},{"location":"sims/analog-circuit/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/analog-circuit/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/analog-circuit/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/analog-circuit/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/analog-circuit/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"},{"location":"sims/analog-clock/","title":"Analog Clock","text":"Analog Clock <p>Run Analog Clock MicroSim</p>"},{"location":"sims/analog-clock/#prompt","title":"Prompt","text":"<pre><code>Create a single p5.js sketch file that uses a 400x400 canvas.\nThe file is a simulation of an analog clock face.\nThe clock face has a black background.\nThe clock has white hands for the minute and hour hand.\nThe clock as a red second hand.\nThere are two modes: manual and automtic\nManual mode allows the use to manually set the time using three sliders for hours, minute and seconds.\nAutomatic mode use the local time to update the display.\nAdd labels and values for the sliders.\nMake sure to reenable the controls as we switch back to manual mode.\n</code></pre>"},{"location":"sims/analog-clock/#code","title":"Code","text":"<p>This is a wonderful lab to demonstrate some use of the trigonomic functions sine() and cosine().  We ask the question:</p> <p>Write some Python code that will take in the seconds as a number from 0 to 59 and it will return the x and y positions of the tip of the second hand.</p> <pre><code>// Draw second hand\n// convert seconds to radians\nsecondHand = map(sc, 0, 60, 0, TWO_PI) - HALF_PI;\n// draw a line from the center of the canvas to the endpoint\nline(0, 0, cos(secondHand) * canvasSize / 2.5, \n           sin(secondHand) * canvasSize / 2.5);\n</code></pre>"},{"location":"sims/analog-clock/#full-program-source","title":"FUll Program Source","text":"<pre><code>let canvasSize = 400;\nlet hourHand, minuteHand, secondHand;\nlet hourSlider, minuteSlider, secondSlider;\nlet manualMode = true;\n\nfunction setup() {\n  const canvas = createCanvas(400, 400);\n  // use this line in the web\n  canvas.parent('canvas-container');\n  // use this in editor\n  // createCanvas(canvasSize, canvasSize);\n  background(0);\n\n  // Create sliders for manual mode\n  hourSlider = createSlider(0, 11, 0);\n  hourSlider.position(10, canvasSize + 10);\n\n  minuteSlider = createSlider(0, 59, 0);\n  minuteSlider.position(10, canvasSize + 40);\n\n  secondSlider = createSlider(0, 59, 0);\n  secondSlider.position(10, canvasSize + 70);\n\n  let modeButton = createButton('Switch Mode');\n  modeButton.position(10, canvasSize + 100);\n  modeButton.mousePressed(switchMode);\n}\n\nfunction draw() {\n  background(0);\n  translate(canvasSize / 2, canvasSize / 2);\n\n  let hr, mn, sc;\n  if (manualMode) {\n    hr = hourSlider.value();\n    mn = minuteSlider.value();\n    sc = secondSlider.value();\n  } else {\n    let now = new Date();\n    hr = now.getHours() % 12;\n    mn = now.getMinutes();\n    sc = now.getSeconds();\n  }\n\n  // Draw hour hand\n  stroke(255);\n  strokeWeight(10);\n  hourHand = map(hr, 0, 12, 0, TWO_PI) - HALF_PI;\n  line(0, 0, cos(hourHand) * canvasSize / 4, sin(hourHand) * canvasSize / 4);\n\n  // Draw minute hand\n  strokeWeight(8);\n  minuteHand = map(mn, 0, 60, 0, TWO_PI) - HALF_PI;\n  line(0, 0, cos(minuteHand) * canvasSize / 3, sin(minuteHand) * canvasSize / 3);\n\n  // Draw second hand\n  stroke(255, 0, 0);\n  strokeWeight(4);\n  secondHand = map(sc, 0, 60, 0, TWO_PI) - HALF_PI;\n  line(0, 0, cos(secondHand) * canvasSize / 2.5, sin(secondHand) * canvasSize / 2.5);\n}\n\nfunction switchMode() {\n  manualMode = !manualMode;\n\n  // disable the controls\n  if manualMode {\n    hourSlider.attribute('disabled', !manualMode);\n    minuteSlider.attribute('disabled', !manualMode);\n    secondSlider.attribute('disabled', !manualMode);\n  } else {\n    hourSlider.attribute('enabled', !manualMode);\n    minuteSlider.attribute('enabled', !manualMode);\n    secondSlider.attribute('enabled', !manualMode);\n  }\n\n}\n</code></pre>"},{"location":"sims/animated-wire/","title":"Animated Wire MicroSim","text":"<p>Run the Animated Wire MicroSim</p>"},{"location":"sims/animated-wire/#sample-animate-wire-function","title":"Sample Animate Wire Function","text":"<pre><code>// Function for drawing an animated wire\nfunction drawAnimatedWire(x1, y1, x2, y2, speed1, state) {\n    if (state) {\n        let distance = dist(x1, y1, x2, y2);\n        let circlePos = map((millis() * speed1) % distance, 0, distance, 0, 1);\n\n        let x = lerp(x1, x2, circlePos);\n        let y = lerp(y1, y2, circlePos);\n\n        stroke(0);\n        strokeWeight(lineWidth)\n        line(x1, y1, x2, y2);\n\n        fill(255, 0, 0);\n        noStroke();\n        circle(x, y, 10);\n    } else {\n        stroke(0);\n        strokeWeight(lineWidth)\n        line(x1, y1, x2, y2);\n    }\n}\n</code></pre>"},{"location":"sims/background-grid/","title":"Background Grid Controls","text":"<p>Run the Background Grid Control Demo</p>"},{"location":"sims/background-grid/#key-points","title":"Key Points","text":"<ol> <li>The simulations have two regions</li> <li>The plot region holds the animation</li> <li>The controls region holds the interactive controls</li> </ol>"},{"location":"sims/background-grid/#sample-code","title":"Sample Code","text":"<pre><code>// Standard sizes for Smartboard with controls at the bottom\nlet canvasWidth = 600;\nlet canvasHeight = 600;\n\nlet plotWidth = canvasWidth;\nlet plotHeight = 500;\nlet plotMargin = 50;\n\nlet controlWidth = canvasWidth;\nlet controlHeight = 100;\n\nlet thicknessSlider, spacingSlider;\nlet gridThickness = 1;\nlet gridSpacing = 50;\n\nfunction setup() {\n  createCanvas(canvasWidth, canvasHeight);  // Set the canvas size\n\n  // Create thickness slider (range from 1 to 10)\n  thicknessSlider = createSlider(.1, 1.25, .25, .05);\n  thicknessSlider.position(190, plotHeight + 20);\n  thicknessSlider.size(canvasWidth / 2);\n\n  // Create spacing slider (range from 5 to 100, step of 5)\n  spacingSlider = createSlider(5, 100, 25, 5);\n  spacingSlider.position(190, plotHeight + 50);\n  spacingSlider.size(canvasWidth / 2);\n\n  // Call the function to draw the grid initially\n  drawGrid();\n}\n\nfunction draw() {\n  noStroke();\n  fill(\"DodgerBlue\");  // DodgerBlue background\n  rect(0,0,canvasWidth, plotHeight)\n  drawGrid(25);  // Call the drawGrid function with a grid spacing of 25\n\n  // Draw the Controls Area\n  fill('cornsilk')\n  stroke(1);\n  strokeWeight(1);\n  rect(0,plotHeight,canvasWidth,controlHeight)\n\n  // Get values from sliders\n  gridThickness = thicknessSlider.value();\n  gridSpacing = spacingSlider.value();\n\n  // Draw grid using the current slider values\n  drawGrid();\n\n  // Display slider labels and values\n  fill('black');\n  noStroke();\n  textSize(16);\n  textAlign(LEFT, CENTER);\n  text(\"Grid Thickness: \" + gridThickness, 10, plotHeight + 30);\n  text(\"Grid Spacing: \" + gridSpacing, 10, plotHeight + 60);\n}\n\nfunction drawGrid() {\n  for (let x = 0; x &lt; plotWidth; x += gridSpacing) {\n    if (x % 100 === 0) {\n      strokeWeight(gridThickness * 4);  // Adjust thickness for every 100th line\n    } else if (x % 50 === 0) {\n      strokeWeight(gridThickness * 2);  // Adjust thickness for every 50th line\n    } else {\n      strokeWeight(gridThickness);  // Standard line thickness\n    }\n    stroke(255);  // Set the grid color to white\n    line(x, 0, x, plotHeight);  // Draw vertical grid lines within the plot area\n  }\n\n  for (let y = 0; y &lt; plotHeight; y += gridSpacing) {\n    if (y % 100 === 0) {\n      strokeWeight(gridThickness * 4);  // Adjust thickness for every 100th line\n    } else if (y % 50 === 0) {\n      strokeWeight(gridThickness * 2);  // Adjust thickness for every 50th line\n    } else {\n      strokeWeight(gridThickness);  // Standard line thickness\n    }\n    stroke(255);  // Set the grid color to white\n    line(0, y, plotWidth, y);  // Draw horizontal grid lines within the plot area\n  }\n}\n</code></pre>"},{"location":"sims/ball-in-rotating-hexagon/","title":"Bouncing Ball in a Rotating Hexagon","text":"<p>Run the Ball in Hexagon MicroSim Edit the MicroSim with the p5.js editor</p> <p>Just copy this iframe into your webpage to use the MicroSim in your classroom:</p> <pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/ball-in-rotating-hexagon/main-v2.html\" height=\"450px\" width=\"400px\"&gt;&lt;/iframe&gt;\n</code></pre> <p>Edit this MicroSim using the p5.js editor</p>"},{"location":"sims/ball-in-rotating-hexagon/#version-1","title":"Version 1","text":"<p>Here is the first version we created using the new OpenAI o1-mini model without the slider for speed control and not responsive.</p> <p>Prompt</p> <p>Create a p5.js sketch that shows a ball bouncing inside a spinning hexagon. The ball should be affected by gravity and friction, and it must bounce off the rotating walls realistically.</p> <p>Run the First Ball in Hexagon MicroSim</p> <p>Special thanks to Linas Beli\u016bnas for the suggestion.</p>"},{"location":"sims/bathtub/","title":"Bathtub MicroSim","text":"Figure caption. <p>Link to Bathtub MicroSim</p>"},{"location":"sims/bathtub/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim demonstrates the flow of water in and out of a bathtub.</p> <p>The user can change the rate of flow in and the flow out.</p> <p>A chart also displays the bathtub hight history.</p>"},{"location":"sims/battery-drain/","title":"Battery Drain","text":"Battery Drain <p>Run the Battery Drain Demo</p> <p>Edit the Simulation</p>"},{"location":"sims/battery-drain/#about-the-battery-drain-microsim","title":"About The Battery Drain MicroSim","text":"<p>This MicroSim teaches students how batteries work in robots.  The student can adjust the speed of the motor.  But the more power the motor draws, the faster the battery drains.  When the motor is off, there is no drain.  When the battery is fully drained the motor will no longer turn.</p>"},{"location":"sims/battery-drain/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Generate a p5.js file on a 400x400 canvas that demonstrates the\nrate that a battery is discharged when it is powering a motor.\nAdd a slider at the bottom of the canvas that allows the user\nto adjust the speed of the motor.  Place the battery on the\nleft side.  Make the negative sign be at the bottom and \nuse a black filled rect.  Make the battery top be positive\nand use a gold filled rect to draw it.  Draw wires from\nthe battery's positive and negative to a motor in the right side.\nThe motor should drive a circle that spins faster as the slider is changed.\nThe motor should only spin if we have power.\n</code></pre>"},{"location":"sims/battery-drain/#sample-code","title":"Sample Code","text":"<pre><code>// battery drain\n// Animate a motor that drains a battery faster the more power is used\nlet canvasWidth = 400;\nlet drawHeight = 400;\nlet canvasHeight = 430;\nlet motorSpeedSlider;\nlet motorSpeed;\nlet batteryLevel = 100;\nlet dischargeRate;\nlet sliderLeftMargin = 100;\n\nfunction setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  //\n  textSize(16);\n\n  motorSpeedSlider = createSlider(0, 100, 50);\n  motorSpeedSlider.position(sliderLeftMargin, drawHeight + 10);\n  motorSpeedSlider.style('width', canvasWidth - sliderLeftMargin - 20 + 'px')\n\n  frameRate(60);\n}\n\nfunction draw() {\n  fill(245);\n  rect(0,0,canvasWidth,drawHeight);\n  fill('white');\n  rect(0,drawHeight,canvasWidth,canvasHeight-drawHeight);\n\n  motorSpeed = motorSpeedSlider.value();\n  // Battery representation\n  drawBattery();\n\n  // Wires from battery to motor\n  stroke(0);\n  // top wire\n  line(50, 50, 350, 50);\n  // bottom wire\n  line(50, 350, 350, 350);\n  line(350, 50, 350, 350);\n\n  // Motor and spinning circle\n  drawMotor();\n\n  // Update battery discharge\n  updateBattery();\n  noStroke();\n  fill('black');\n  text(\"Speed:\"+motorSpeed, 10, drawHeight+25);\n}\n\nfunction drawBattery() {\n  // Battery body\n\n  percentGold = .4\n  // Positive terminal\n  fill('gold'); // Gold color\n  rect(20, 50, 50, 300*percentGold);\n\n  // Negative terminal\n  fill('black');\n  rect(20, 350*percentGold, 50, 350*(1-percentGold));\n\n  // Battery level\n  let levelHeight = map(batteryLevel, 0, 100, 0, 300);\n  fill(0, 255, 0);\n  rect(30, 350 - levelHeight, 30, levelHeight);\n}\n\n// draw a spinning motor if we have power\nfunction drawMotor() {\n  fill(150);\n  ellipse(350, 200, 100, 100); // Motor body\n\n  // draw the spinner if we have power\n  if (batteryLevel &gt; 1) {\n   push();\n      translate(350, 200);\n      rotate(frameCount / 50 * motorSpeed);\n      fill(0, 0, 255);\n      ellipse(0, 40, 20, 20); // Spinning circle\n   pop();\n  }\n}\n\n// the battery level goes down with time\nfunction updateBattery() {\n  dischargeRate = motorSpeedSlider.value() / 1000;\n  batteryLevel -= dischargeRate;\n  batteryLevel = max(batteryLevel, 0);\n}\n</code></pre> <p>Challenges</p> <ol> <li>Add a label that shows the percent of charge remaining</li> <li>Add a label that predicts how long the battery will last at the current discharge rate</li> <li>Add another button called \"Recharge\" that will slowly recharge the battery</li> <li>Add animation to the wires of red dots moving along the wires.  Make the dots go faster at a higher power.</li> <li>Make the battery explode if you charge it too quickly</li> </ol>"},{"location":"sims/battery-drain/#lesson-plans","title":"Lesson Plans","text":""},{"location":"sims/battery-drain/#5th-grade-robotics-class-lesson-plan","title":"5th Grade Robotics Class Lesson Plan","text":""},{"location":"sims/battery-drain/#objective","title":"Objective","text":"<ul> <li>Understand the concept of battery discharge and its application in powering motors, particularly in robotics.</li> <li>Develop an understanding of how adjusting variables (like motor speed) can impact power consumption.</li> <li>Ask questions about what we do with batteries when they are discharged?</li> </ul>"},{"location":"sims/battery-drain/#duration","title":"Duration","text":"<ul> <li>1 hour</li> </ul>"},{"location":"sims/battery-drain/#materials","title":"Materials","text":"<ul> <li>Computers with internet access to use the p5.js Web Editor.</li> <li>Projector to demonstrate the p5.js simulation.</li> <li>Printed screenshots of the p5.js canvas setup (for reference).</li> </ul>"},{"location":"sims/battery-drain/#introduction-10-minutes","title":"Introduction (10 minutes)","text":"<ul> <li>Interactive Questioning: Begin by asking students about their experiences with batteries. \"What devices at home use batteries?\" \"Have you noticed how the performance changes as the battery drains?\"</li> <li>Relevance to Robotics: Discuss why robots need batteries, linking to their own experiences with battery-powered devices.</li> </ul>"},{"location":"sims/battery-drain/#demonstration-of-the-simulation-10-minutes","title":"Demonstration of the Simulation (10 minutes)","text":"<ul> <li>Show the p5.js Simulation: Project the simulation on the screen. Demonstrate how the motor's speed changes with the slider and how this affects battery discharge.</li> <li>Explain the Components: Point out the battery, the wires, the motor, and the spinning circle, explaining their roles.</li> </ul>"},{"location":"sims/battery-drain/#group-activity-experimenting-with-the-simulation-20-minutes","title":"Group Activity: Experimenting with the Simulation (20 minutes)","text":"<ul> <li>Hands-On Exploration: Students work in pairs on computers to experiment with the simulation.</li> <li>Guided Inquiry: Encourage students to observe what happens as they adjust the motor speed. Does the battery discharge faster at higher speeds?</li> </ul>"},{"location":"sims/battery-drain/#discussion-and-reflection-15-minutes","title":"Discussion and Reflection (15 minutes)","text":"<ul> <li>Group Discussion: Reconvene as a class and discuss observations. Key questions: \"How did changing the motor speed affect the battery life?\" \"Why is this important for designing robots?\"</li> <li>Connecting to Real Life: Relate the activity to real-world scenarios. \"How might this knowledge impact the way we design battery-powered devices or robots?\"</li> </ul>"},{"location":"sims/battery-drain/#conclusion-5-minutes","title":"Conclusion (5 minutes)","text":"<ul> <li>Summarize Key Learnings: Reinforce the importance of understanding battery usage in robotics and everyday devices.</li> <li>Reflect on the Activity: Ask students to share one new thing they learned and how they might apply this knowledge.</li> </ul>"},{"location":"sims/battery-drain/#assessment","title":"Assessment","text":"<ul> <li>Participation and engagement during the activity.</li> <li>Responses during the discussion, reflecting understanding of the concept.</li> </ul>"},{"location":"sims/battery-drain/#follow-up","title":"Follow-Up","text":"<ul> <li>In the next lesson, explore other factors affecting battery life in robots, like weight or the type of task performed.</li> <li>Assign a small project where students design a simple battery-powered device or robot, considering battery life.</li> </ul>"},{"location":"sims/battery-life/","title":"Battery Life Calculator","text":"<p>Batteries</p> <p>Coin Cell AA AAA 18650</p>"},{"location":"sims/battery-life/#devices","title":"Devices","text":"<ol> <li>dim red LED - 2 milliamps</li> <li>Very bright white LED - 20 milliamps</li> </ol>"},{"location":"sims/battery-life/#references","title":"References","text":"<p>https://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-battery-life</p>"},{"location":"sims/bfs/","title":"Breath First Graph Search","text":"Breath First Search <p>Run Breath First Graph Search MicroSim Note you must click on the Next Button twice to get to level 1 search.</p>"},{"location":"sims/bfs/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Generate a simulation of breadth-first-search on a graph.  \nPlace a green vertex at the center of a network of 20 \nvertices that are placed on the canvas.  \nConnect each vertex to the 2 or 3 closest vertices \nusing edges. For each step in the search, \ncolor the next vertex red.  \nRepeat until all vertices have been visited.\n</code></pre> <p>Link to Transcript</p>"},{"location":"sims/binary-number/","title":"Binary Number","text":"<p>A binary number is one where each of the digits can only be a 0 or a 1.  The values will double with each position.  So the left-most digit is 0 or 1,   the second bit is 0 or 2, the third is 0 or 4 and the fourth is 0 or 8. You can generate any number from 0 to 15 by adding the values.</p> <ul> <li>Binary Number 4-Bit Demo</li> <li>Binary Number 8-Bit Demo</li> </ul>"},{"location":"sims/binary-number/#prompt","title":"Prompt","text":"<pre><code>Create a simulation of a 4-bit binary number.\nAdd buttons that toggle each of the four bits. \nAdd a text output that shows the decimal equivalent of the binary number.\n</code></pre>"},{"location":"sims/binary-number/#sample-response","title":"Sample Response","text":"<pre><code>// Global canvas dimensions\nlet canvasWidth = 330;\nlet canvasHeight = 120;\n\n// Binary bits and decimal value\nlet bits = [0, 0, 0, 0];\nlet decimalValue = 0;\n\nfunction setup() {\n  createCanvas(canvasWidth, canvasHeight);\n  textSize(24);\n  background(245);\n\n  // Create toggle buttons for each bit with correct labeling\n  for (let i = 0; i &lt; 4; i++) {\n    let btn = createButton('Bit ' + i);\n    btn.position(20 + (3 - i) * 80, 50); // Placing buttons with Bit 3 on the left and Bit 0 on the right\n    btn.mousePressed(() =&gt; toggleBit(i));\n  }\n}\n\nfunction draw() {\n  // Clear the previous frame\n  clear();\n  background(245);\n\n  // Draw binary bits\n  for (let i = 0; i &lt; bits.length; i++) {\n    text(bits[i], 40 + (3 - i) * 80, 30); // Displaying bits with Bit 3 on the left and Bit 0 on the right\n  }\n\n  // Calculate and draw the decimal value\n  decimalValue = binaryToDecimal(bits);\n  text('Decimal: ' + decimalValue, 20, 110);\n}\n\n// Toggle bit value\nfunction toggleBit(index) {\n  bits[index] = bits[index] === 0 ? 1 : 0;\n}\n\n// Convert binary array to decimal\nfunction binaryToDecimal(binaryArray) {\n  let decimal = 0;\n  for (let i = 0; i &lt; binaryArray.length; i++) {\n    decimal += binaryArray[i] * Math.pow(2, i);\n  }\n  return decimal;\n}\n</code></pre>"},{"location":"sims/binary-number/#learnings-from-the-response","title":"Learnings from The Response","text":"<ol> <li>How to set up an array of buttons each with different actions</li> <li>How to use the pow(2, i) to convert a binary to decimal value</li> <li>How to setup a tobbleBit(index) function using the <code>?</code> and <code>:</code> syntax</li> </ol>"},{"location":"sims/binary-number/#lesson-plan","title":"Lesson Plan","text":"<p>Objective:</p> <p>Students will understand the binary number system and how it is used in computer science.  They will learn to convert binary numbers to decimal numbers and vice versa.</p> <p>Grade Level: 9th Grade</p> <p>Duration: 1-2 class periods (45-90 minutes)</p> <p>Materials:</p> <ol> <li>Computers with internet access (or offline environment set up with p5.js).</li> <li>Projector to demonstrate the simulation.</li> <li>Link to the simulation.</li> <li>Worksheets or online notebooks for binary-to-decimal conversion exercises.</li> <li>Whiteboard and markers.</li> </ol>"},{"location":"sims/binary-number/#lesson-outline","title":"Lesson Outline:","text":"<ol> <li> <p>Introduction to Binary Numbers (15 minutes):</p> </li> <li> <p>Begin with a discussion on number systems, focusing on the decimal system.</p> </li> <li>Introduce the binary number system, explaining its base-2 nature.</li> <li> <p>Discuss the significance of binary numbers in computer science.</p> </li> <li> <p>Demonstration of the Simulation (10 minutes):</p> </li> <li> <p>Project the simulation on the screen.</p> </li> <li>Explain the interface, pointing out the bits, their significance, and the decimal conversion.</li> <li> <p>Demonstrate toggling the bits and observing the decimal output.</p> </li> <li> <p>Interactive Session with Simulation (20 minutes):</p> </li> <li> <p>Allow students to experiment with the simulation on their computers.</p> </li> <li>Encourage them to predict the decimal output before toggling the bits.</li> <li> <p>Facilitate a discussion about their observations and insights.</p> </li> <li> <p>Binary to Decimal Conversion Exercise (15 minutes):</p> </li> <li> <p>Distribute worksheets with binary numbers.</p> </li> <li>Instruct students to convert them to decimal numbers using the simulation as a reference.</li> <li> <p>Review the answers as a class, discussing any common errors or misconceptions.</p> </li> <li> <p>Group Activity: Real-World Applications (15-30 minutes):</p> </li> <li> <p>Divide students into small groups.</p> </li> <li>Assign each group to research and present a short explanation about a real-world application of binary numbers (e.g., digital storage, computer processors).</li> <li> <p>Facilitate a class discussion on these applications, linking them back to the simulation.</p> </li> <li> <p>Wrap-up and Reflection (5-10 minutes):</p> </li> <li> <p>Summarize key takeaways from the lesson.</p> </li> <li>Encourage students to reflect on what they learned and how they might see binary numbers in their daily lives.</li> <li>Answer any remaining questions.</li> </ol>"},{"location":"sims/binary-number/#assessment","title":"Assessment","text":"<ul> <li>Evaluate students based on their participation in activities and discussions.</li> <li>Review their worksheets for accuracy in binary to decimal conversion.</li> <li>Assess group presentations for understanding of real-world applications.</li> </ul>"},{"location":"sims/binary-number/#extension-activities","title":"Extension Activities","text":"<ul> <li>Extend the simulation to be 8, 16, 32 and 64 bits</li> <li>Discuss what the shift-left and shift-right functions will do.  Hint: how would you double the number?</li> <li>Introduce the concept of hexadecimal numbers and how they relate to binary and decimal systems.</li> <li>Create a project where students develop their own simple binary-based simulations or games using p5.js.</li> <li>Discuss the process of adding binary numbers.</li> </ul>"},{"location":"sims/binary-number/#references","title":"References","text":"<ul> <li>ChatGPT Transcript - this demonstrates the iterative nature of prompting including giving up and fixing the code myself after multiple attempts.</li> </ul>"},{"location":"sims/bouncing-ball/","title":"Bouncing Ball","text":"Bouncing Ball <p>Run Bouncing Ball Demo</p> <p>The bouncing ball is the \"Hello World!\" of the Processing system. It contains the key element that shows the power of the Processing system: graphics with movement and user interaction.  When we design MicroSims, we also want clearly-visible user interface elements that can control the running of our simulations.  This version contains a  slider to control the speed of the ball's movement.</p>"},{"location":"sims/bouncing-ball/#prompt","title":"Prompt","text":"<p>Here is a simple prompt to get you started.</p> <pre><code>Generate a single p5.js sketch of a blue bouncing ball on a 400x400 canvas.\n</code></pre> <p>Copy the prompt into ChatGPT.  It will generate a JavaScript file you can copy and paste or download into the p5.js editor to test.</p> <p>Here is a more precise prompt that also allows us to change the speed using a slider.</p> <pre><code>Generate a single p5.js sketch of a blue bouncing ball on a 400x400 canvas.\nThe sketch shows a ball bouncing around a rectangular area.\nThe canvas should be 500 wide and 300 high.\nThe default text size is 16.\nThe ball is blue and has a radius of 50.\nThere is a slider that changes the speed from 0 to 20 with a default speed of 3.\nThe slider should be placed at the bottom of the canvas.\nThe slider should have a label \"Speed: \" and the speed value to the left of the slider.\nThe slider should span the width of the canvas after the label and value.\nDD NOT use objects - just functions.\n</code></pre> <p>Here is an additional example that allows the user to change both the speed and the ball size:</p> <ul> <li>Bouncing Ball with Speed and Radius Controls</li> </ul> <p>Edit Using P5.js Editor</p>"},{"location":"sims/bouncing-ball/#sample-source-code","title":"Sample Source Code","text":"<p>Here is some sample source code that has been generated and modified just a little for readability.</p> <pre><code>// bouncing ball - version 1\n// designed for use using touch sensitive whiteboard in a classroom\n\nlet width = 500;\nlet height = 350;\nlet drawHieght = 320; // region for drawing\nr = 20; // radius of the ball\n\n// initial position\nx = 100;\ny = 100;\nspeed = 3; // default speed\n// direction of motion\ndx = speed;\ndy = speed;\n// spacing before the slider\nsliderLeftMargin = 83;\n\nfunction setup() {\n  const canvas = createCanvas(width, height);\n  // Include this for placement in our HTML page but not in the p5.js editor\n  // canvas.parent('canvas-container');\n\n  // make the text a bit larger for large classrooms\n  textSize(16);\n\n  speedSlider = createSlider(0, 20, speed);\n  speedSlider.position(sliderLeftMargin, drawHieght + 15);\n  speedSlider.style('width', width - sliderLeftMargin - 15 + 'px');\n}\n\nfunction draw() {\n  rect(0,0, canvasWidth, drawHieght); // light gray\n\n  // get the new value from the slider\n  speed = speedSlider.value()\n\n  // set the new speed but don't change the direction (positive or negative)\n  if (dx &gt; 0) dx = speed;\n     else dx = -speed;\n\n  if (dy &gt; 0) dy = speed;\n     else dy = -speed;\n\n  // Add the current speed to the position.\n  x += dx;\n  y += dy;\n\n  // simple bounce check without considering the radius of the ball\n  if ((x &gt; width) || (x &lt; 0)) {\n    dx = dx * -1;\n  }\n  if ((y &gt; drHieght) || (y &lt; 0)) {\n    dy = dy * -1;\n  }\n\n  fill('blue');\n  circle(x, y, r*2);\n\n  // Add the label and value at the bottom\n  fill('black');\n  text('Speed: ' + speed, 10, height-10)\n}\n</code></pre>"},{"location":"sims/bouncing-ball/#key-points-about-the-code","title":"Key Points about the Code","text":"<ol> <li>We created some global variables before the setup() function</li> <li>We created a setup() function to initialize the canvas and the slider</li> <li>We created a draw() function to render check that moves the ball, checks the edges, and draws the circle and text.</li> </ol>"},{"location":"sims/bouncing-ball/#use-in-classroom","title":"Use In Classroom","text":"<ol> <li>Physics Lesson: Use this simulation to discuss concepts like velocity, acceleration, and kinetic energy. Ask students to predict how changing the speed will affect the ball's movement.</li> <li>Math Integration: Introduce concepts of geometry and algebra, such as calculating the ball's trajectory or the distance traveled over time.</li> <li>Coding Concepts: Use this as a base for teaching basic programming concepts, such as variables, functions, and object-oriented programming. Students can modify the code to change the ball's size, color, or even add more balls.</li> </ol>"},{"location":"sims/bouncing-ball/#lesson-plan-for-a-9th-grade-physical-science-class","title":"Lesson Plan for a 9th-Grade Physical Science Class","text":""},{"location":"sims/bouncing-ball/#objective","title":"Objective","text":"<p>Students will understand the concepts of kinetic and potential energy, and how these energies are transformed during the motion of a bouncing ball.</p>"},{"location":"sims/bouncing-ball/#materials","title":"Materials","text":"<ul> <li>Computer with internet access for the p5.js editor.</li> <li>The bouncing ball simulation (as provided in the previous response).</li> <li>Whiteboard or chalkboard.</li> <li>Writing materials for students.</li> </ul>"},{"location":"sims/bouncing-ball/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/bouncing-ball/#introduction-10-minutes","title":"Introduction (10 minutes)","text":"<ul> <li>Begin with a brief discussion on energy: what it is and its different forms, focusing on kinetic and potential energy.</li> <li>Introduce the concept of energy transformation, particularly how potential energy is converted to kinetic energy and vice versa.</li> </ul>"},{"location":"sims/bouncing-ball/#demonstration-15-minutes","title":"Demonstration (15 minutes)","text":"<ul> <li>Display the bouncing ball simulation to the class.</li> <li>Show how the ball\u2019s speed (kinetic energy) increases as it falls (due to potential energy converting to kinetic energy) and decreases as it rises (kinetic converting back to potential).</li> </ul>"},{"location":"sims/bouncing-ball/#interactive-activity-20-minutes","title":"Interactive Activity (20 minutes)","text":"<ul> <li>Have the students access the simulation on their computers.</li> <li>Ask them to experiment with different speeds and observe the ball\u2019s behavior.</li> <li>Prompt questions for exploration: </li> <li>How does changing the speed affect the ball\u2019s motion?</li> <li>Can they identify when the ball has the most kinetic or potential energy?</li> </ul>"},{"location":"sims/bouncing-ball/#group-discussion-15-minutes","title":"Group Discussion (15 minutes)","text":"<ul> <li>Bring the class back together to discuss their observations.</li> <li>Facilitate a conversation about how the simulation demonstrates the concepts of kinetic and potential energy.</li> <li>Discuss real-world examples, like a roller coaster or a skateboarder in a halfpipe.</li> </ul>"},{"location":"sims/bouncing-ball/#concept-application-20-minutes","title":"Concept Application (20 minutes)","text":"<ul> <li>Provide a worksheet with problems related to kinetic and potential energy.</li> <li>Include problems where students calculate the potential energy at the ball\u2019s highest point and the kinetic energy at different points of the motion.</li> <li>Students can use the simulation to visually understand the problems.</li> </ul>"},{"location":"sims/bouncing-ball/#wrap-up-and-reflection-10-minutes","title":"Wrap-Up and Reflection (10 minutes)","text":"<ul> <li>Summarize the key concepts learned in the lesson.</li> <li>Ask students to write a short paragraph on how the simulation helped them understand the energy transformation.</li> </ul>"},{"location":"sims/bouncing-ball/#homework","title":"Homework","text":"<ul> <li>Assign a project where students create their own simulation or modify the existing one to demonstrate a different physics concept.</li> </ul>"},{"location":"sims/bouncing-ball/#assessment","title":"Assessment","text":"<ul> <li>Participation in the interactive activity and group discussion.</li> <li>Accuracy and understanding is shown in the worksheet.</li> <li>Reflection paragraph and homework project.</li> </ul>"},{"location":"sims/bouncing-ball/#references","title":"References","text":""},{"location":"sims/bouncing-ball/01-bounce/","title":"Bouncing Ball","text":""},{"location":"sims/bouncing-ball/brownian-motion/","title":"Brownian Motion","text":""},{"location":"sims/bouncing-ball/brownian-motion/#brownian-motion","title":"Brownian Motion","text":"<p>A classic physics simulation where the user can adjust the temperature and number of molecules in the simulation.</p> <p>Brownian Motion</p> <p>Prompt</p> <pre><code>Generate a 2D p5.js simulation of Brownian motion on a 600x400 canvas.\nUse\nSimulate a set of gas molecules in a chamber.  \nAdd two in-chart range control sliders for temperature and number of molecules.\nAdd labels and values to the range control sliders.\nPlace the labels, values an sliders at the bottom of the canvas.\n</code></pre>"},{"location":"sims/bouncing-ball/brownian-motion/#sample-code","title":"Sample Code","text":""},{"location":"sims/breadboard/","title":"MicroSim Template","text":"Figure caption. <p>Link to Breadboard Demo Link to Push Button Demo Link to Resistors Demo Link to Vector Breadboard Edit the Breadboard MicroSim</p>"},{"location":"sims/breadboard/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to simulate an LED circuit with a button on a breadboard.</p>"},{"location":"sims/breadboard/#image-background","title":"Image Background","text":"<p>Here is how we draw a breadboard in the background</p> <pre><code>canvasWidth = 400;\ndrawHeight = 275;\ncanvasHeight = 320;\n\nfunction preload() {\n    breadboard_img = loadImage('./breadboard-horiz-small.png');\n}\n\nfunction setup() {\n    const canvas = createCanvas(canvasWidth, canvasHeight);\n}\n\nfunction draw() {\n    // make the background drawing region light gray\n    fill(245);\n    rect(0,0,canvasWidth, canvasWidth);\n    // make the background of the controls white\n    fill('white')\n    rect(0,drawHeight,canvasWidth, canvasHeight-drawHeight);\n\n    // Place the image at 00\n    image(breadboard_img, 0, 0);\n}\n\n// button press momentary \nfunction setup() {\n  createCanvas(200, 200);\n}\n\nfunction draw() {\n  background(245);\n\n  // Button style - use a rect with rounded corners\n  fill(0, 0, 255);\n  rect(80, 80, 40, 40, 5);\n\n  // Draw the circle red if we have a press in our circle\n  if (dist(mouseX, mouseY, 100, 100) &lt; 20 &amp;&amp; mouseIsPressed)\n    fill(255, 0, 0);\n  else\n    fill(200, 200, 200);\n\n  // Draw the circle\n  circle(100, 100, 38);\n\n}\n</code></pre>"},{"location":"sims/breadboard/#button-press","title":"Button Press","text":""},{"location":"sims/breadboard/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/breadboard/#sample-response","title":"Sample Response","text":"<pre><code>let canvasHeight = 400;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\nfunction setup() {\nconst canvas = createCanvas(canvasWidth, canvasHeight);\n  canvas.parent('canvas-container');\n  fill(245);\n  rect(0,0, canvasWidth, canvasHeight);\n  fill('green');\n  circle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/breadboard/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/breadboard/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/breadboard/#activities","title":"Activities","text":""},{"location":"sims/breadboard/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/breadboard/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/breadboard/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/breadboard/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/breadboard/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"},{"location":"sims/breadboard/#prompt-for-400-tie-breadboard-layout","title":"Prompt for 400-Tie Breadboard Layout","text":"<pre><code>Create a p5.js drawing like the image attached.\nCreate a single file p5.js layout on a 400X275 canvas.\nCreate a layout of a 400-tie solderless mini breadboard.\nThe breadboard has a landscape orientation.\nEach tie should be represented by a 4x4 black rectangle.\nThe breadboard should have two power rails at the top and bottom of the breadboard.\nEach power rail has both a positive and negative horizontal row of ties.\nThe power rail rows have 5 groupings of 5 ties with a small space between the groups.\nThe positive power rail is red and the negative power rail is black.\nThe power rails run horizontally.\nThe center region has 30 columns of five vertical ties in columns at the top an bottom.\nThe 30 columns are evenly spaced in the 400 pixel width.\nA central trough runs horizontally down the center of the breadboard.\n</code></pre>"},{"location":"sims/breadboard/#references","title":"References","text":"<ul> <li>WokWi Online Simulator of the Pico</li> </ul>"},{"location":"sims/canon/","title":"Canon and Projectile Motion","text":"Figure caption. <p>Run Demo of Canon Projectile Motion</p> <p>In this lesson, we add gravity to our simulation.  The program has a \"Fire\" button and you can adjust the angle an power of the canon that fires the ball.</p>"},{"location":"sims/canon/#sample-prompts","title":"Sample Prompts","text":"<pre><code>Generate a single file p5.js sketch that demonstrates projectile motion.\nAllow the user to set the initial angle and power of a projectile.\n</code></pre> <p>Here is a more precise specification with details on the control placement.</p> <pre><code>Generate a single file p5.js sketch on an 800x550 canvas.\nThe program is a simulation of projecile motion.\nThe upper drawing region is 800x500 and is intialized with a light gray rectangle of 245.\nThe lower 50 height is for placing the controls on a white background.\nA circle of radius 10 is placed in the lower left corner of the drawing region.\nA \"Fire\" buttin is below the circle.\nTo the right of the fire button are two sliders.\nOne slider is for the initial angle at fire time.\nOne slider is for the power at fire time.\nGravity is in the positive y of force 0.05\nWhen the ball goes outside the drawing region (800x500) the simulation must stop.\nWhen the simulation stops, place a new ball in the lower left corner of the drawing region.\n</code></pre> <p>Edit this Code Using the p5.js Editor</p>"},{"location":"sims/canon/#sample-code","title":"Sample Code","text":"<pre><code>// Cannon Ball - a demonstration of projectile motion\n// Gravity is a constant\nlet canvasWidth = 800;\nlet drawHeight = 500;\nlet canvasHeight = drawHeight + 40; // add 20 per slider\nlet angleSlider, powerSlider;\nlet angle, power;\nlet cannonBall;\nlet firing = false;\nlet sliderLeftMargin = 140;\n\n// setup the canvas and controls and \n// create a new cannonBall in the lower left corner\nfunction setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  // uncomment when placing into HTML\n  // canvas.parent('canvas-container');\n  textSize(16);\n\n  angleSlider = createSlider(0, 90, 75, 1);\n  angleSlider.position(sliderLeftMargin, drawHeight + 5);\n  angleSlider.style('width', canvasWidth - sliderLeftMargin - 200 + 'pt')\n\n  powerSlider = createSlider(1, 10, 7, 0.1);\n  powerSlider.position(sliderLeftMargin, drawHeight + 25);\n  powerSlider.style('width', canvasWidth - sliderLeftMargin - 200 + 'pt')\n\n  fireButton = createButton('Fire');\n  fireButton.position(10, drawHeight+15);\n  fireButton.mousePressed(fireCannon);\n\n  cannonBall = new CannonBall(10, drawHeight-10, 0, 0);\n}\n\nfunction draw() {\n  // only draw the drawing region light gray\n  fill(245);\n  rect(0, 0, canvasWidth, drawHeight);\n  // fill the bottom control region with a white background\n  fill('white');\n  rect(0, drawHeight, canvasWidth, canvasHeight- drawHeight);\n\n  // get the new angle and power\n  angle = angleSlider.value();\n  power = powerSlider.value();\n\n  if(firing) {\n    cannonBall.applyForce(createVector(0, 0.05)); // Gravity is here\n    cannonBall.update();\n  }\n\n  // draws the new cannon ball\n  cannonBall.display();\n\n  // are we still on the canvas?\n  if(cannonBall.pos.y &gt; drawHeight || cannonBall.pos.y &lt; 0) {\n    firing = false;\n    // get a new ball ready\n    cannonBall = new CannonBall(10, drawHeight-10, 0, 0);\n  }\n\n  fill(1);\n  noStroke();\n  text('Angle: ' + angle, 60, drawHeight + 20);\n  text('Power: ' + power, 60, drawHeight + 40);\n}\n\nfunction fireCannon() {\n  let force = p5.Vector.fromAngle(radians(-angle));\n  force.mult(power);\n  cannonBall.applyForce(force);\n  firing = true;\n}\n\nclass CannonBall {\n  constructor(x, y, vx, vy) {\n    this.pos = createVector(x, y);\n    this.vel = createVector(vx, vy);\n    this.acc = createVector(0, 0);\n    this.r = 10;\n  }\n\n  applyForce(force) {\n    this.acc.add(force);\n  }\n\n  update() {\n    this.vel.add(this.acc);\n    this.pos.add(this.vel);\n    this.acc.mult(0);\n  }\n\n  display() {\n    fill('black')\n    circle(this.pos.x, this.pos.y, this.r * 2);\n  }\n}\n</code></pre>"},{"location":"sims/canon/#learnings-from-the-code","title":"Learnings from the Code","text":"<ol> <li>The p5.js has a library for simulating forces on an object.</li> <li>We can use the Class operator to create functions on the canon ball.</li> </ol>"},{"location":"sims/canon/#references","title":"References","text":""},{"location":"sims/circle/","title":"Circle","text":"<p>Run the Circle Slider MicroSim</p> <p>Here is a simple example that you can start with.  The ChatGPT prompt would be the following:</p> <p>Prompt</p> <p>Generate a single p5.js sketch file that draws a blue circle   in the center of a 400x400 canvas.</p> <p>Create a range control slider that allows the radius to be   adjusted from 0 to 200.</p> <p>Use the text() function within the draw() function to display the   label and current value of the radius.</p> <p>Use a responsive design and adjust the slider when the window is resized.</p> <pre><code>let radiusSlider;\nlet radius = 0;\n\nfunction setup() {\n  createCanvas(400, 400);\n\n  // Create the radius slider\n  radiusSlider = createSlider(0, 200, 100);\n  radiusSlider.position(10, 10);\n}\n\nfunction draw() {\n  background(220);\n\n  // Fetch the current radius from the slider\n  radius = radiusSlider.value();\n\n  // Draw the circle\n  fill(0, 0, 255);\n  noStroke();\n  circle(width / 2, height / 2, radius * 2);\n\n  // Display the radius value\n  fill(0);\n  text(\"Radius: \" + radius, 10, 50);\n}\n</code></pre>"},{"location":"sims/circle/#full-responsive-version","title":"Full Responsive Version","text":"<pre><code>// Circle MicroSim with responsive design\n// Canvas dimensions\nlet canvasWidth = 400;\nlet drawHeight = 400;\nlet controlHeight = 50;\nlet canvasHeight = drawHeight + controlHeight;\nlet margin = 25;\nlet sliderLeftMargin = 100;\nlet defaultTextSize = 16;\n\n// Global variables for width and height\nlet containerWidth; // calculated by container upon resize\nlet containerHeight = canvasHeight; // fixed height on page\n\n// Circle parameters\nlet radius = 60;\nlet radiusSlider;\n\nfunction setup() {\n    // Create a canvas to match the parent container's size\n    updateCanvasSize();\n    const canvas = createCanvas(containerWidth, containerHeight);\n    canvas.parent(document.querySelector('main'));\n    textSize(defaultTextSize);\n\n    // Create slider for radius control\n    radiusSlider = createSlider(0, 200, radius, 1);\n    radiusSlider.position(sliderLeftMargin, drawHeight + 12);\n    radiusSlider.size(canvasWidth - sliderLeftMargin - 20);\n}\n\nfunction draw() {\n    // Draw the display area\n    fill('aliceblue');\n    stroke('silver');\n    strokeWeight(1);\n    rect(0, 0, canvasWidth, drawHeight);\n\n    // Draw the controls area\n    fill('white');\n    rect(0, drawHeight, canvasWidth, controlHeight);\n\n    // Get the current radius from the slider\n    radius = radiusSlider.value();\n\n    // Draw the circle\n    fill('blue');\n    noStroke();\n    circle(canvasWidth/2, drawHeight/2, radius*2);\n\n    // Draw the label and value\n    fill('black');\n    strokeWeight(0);\n    textSize(defaultTextSize);\n    textAlign(LEFT, CENTER);\n    text('Radius: ' + radius, 10, drawHeight + 20);\n}\n\nfunction windowResized() {\n    // Update canvas size when the container resizes\n    updateCanvasSize();\n    resizeCanvas(containerWidth, containerHeight);\n\n    // Resize the slider to match the new canvasWidth\n    radiusSlider.size(canvasWidth - sliderLeftMargin - 20);\n}\n\nfunction updateCanvasSize() {\n    // Get the exact dimensions of the container\n    const container = document.querySelector('main').getBoundingClientRect();\n    containerWidth = Math.floor(container.width);  // Avoid fractional pixels\n    canvasWidth = containerWidth;\n}\n</code></pre>"},{"location":"sims/circuits/","title":"Battery Circuit","text":"See animated current when the circuit is turned on. <p>Battery Circuit Demo</p> <p>In this lesson, we will create an animation of a circuit that includes:</p> <ol> <li>A battery</li> <li>An on/off switch</li> <li>A resistor</li> <li>An LED</li> <li>Wires that connect the components in a series loop</li> </ol> <p>We will use the Animated Wire demo that we did in a prior lab.</p> <p>We will break the problem down into ChatGPT prompts that animate and test individual components. We will then concatenate the components into a main animation file.</p> <p>This is the most complex program we have generated so far.  It requires us to first use ChatGPT to create several functions:</p> <ol> <li>A drawBattery function that draws the positive and negative parts of a battery</li> <li>A drawSwitch function that will toggle on or off</li> <li>A resistor function that draws a resistor zig-zag symbol</li> <li>An LED function that is black in the off state and red in the on state</li> <li>An animate wire function that animates the flow of current (see the previous example)</li> </ol> <p>Once we have functions for all these components, we can then assemble them together in an entire simulation.  You will find that ChatGPT will not usually get the the layout wrong and you will need to adjust the positions of the wires.</p>"},{"location":"sims/circuits/#references","title":"References","text":"<ul> <li>Paul Falstad's Web-based circuit simulator</li> <li>Circuit JS 1 - open source JavaScript based circuit simulator.</li> </ul>"},{"location":"sims/circuits/circuits-v2/","title":"Circuits","text":""},{"location":"sims/circuits/circuits-v2/#background","title":"Background","text":"<p>Creating a simulation of a basic electrical circuit with an on/off switch, a battery, and a light bulb is a great way to teach students about electricity and circuits. We'll use p5.js to create this interactive simulation. In this simulation, students can toggle the switch to turn the light bulb on and off, visually seeing how closing and opening a circuit works.</p> <p>Here's a basic outline of the p5.js code for this simulation:</p> <ol> <li>Setup: Define the canvas and initial state of the switch (on or off).</li> <li>Draw: Render the battery, switch, and light bulb. The light bulb's brightness changes based on the switch's state.</li> <li>Mouse Interaction: Allow the switch to be toggled on and off with a mouse click.</li> </ol>"},{"location":"sims/circuits/circuits-v2/#classroom-implementation-ideas","title":"Classroom Implementation Ideas","text":"<p>Concept Visualization: Use this simulation to help students visualize how a simple circuit works, emphasizing the role of each component. Interactive Learning: Encourage students to toggle the switch and observe changes, fostering understanding through interaction. Critical Thinking: Pose questions like \"What happens if the battery is reversed?\" or \"What changes if we add another light bulb?\"</p>"},{"location":"sims/circuits/circuits-v2/#further-extensions","title":"Further Extensions","text":"<p>Additional Components: Introduce resistors or variable resistors (like a potentiometer) to the circuit. Circuit Diagrams: Have students draw the circuit diagram based on the simulation, then build the actual circuit using physical components. Exploring Variables: Modify the code to represent different battery voltages or bulb wattages.</p>"},{"location":"sims/circuits/circuits-v2/#demos-of-circuits","title":"Demos of Circuits","text":"<ol> <li>Simple Circuit</li> <li>Switch</li> <li>Battery With LED Circuit</li> <li>Wire Animate</li> <li>Motor Circuit</li> <li>H-Bridge</li> </ol>"},{"location":"sims/circuits/circuits-v2/#sample-prompt","title":"Sample Prompt","text":"<p>```linenubs=\"0\" Create a single file p5.js sketch on a 300x200 canvas. Subject: simple electrical circiuts. Create a simulation of an electrical circuit with a batter, an on/off switch, a light bulb and the connecting wires. Make the default text size be 16. Add the title \"Click Anywhere to Toggle The Switch\" to the top of the canvas. Place the battery standing vertically on the left with the positive side up and the negative side down. Draw the top of the battery as a gold rectangle on the top with a \"+\" on it. Draw the bottom of the battery as a black rectangle \"-\" near the bottom. The top row of connection points are at y=50. The bottom row of connection points are at y=150. Make the wires toogle from black (circuit off) to red (circuit on). Make all the wires width 3. Make the switch be a rectangle that is horizontal and 50px wide when on. Make the swtich rectangle rotate up 45 degrees when the switch is off. Complete the circuit with the light going to the negative battery terminal in a column at x=250. Make sure to reset the stroke width to 0 after drawing wires. Allow the user to click anywhere on the canvas to toggle the switch.</p> <pre><code>## Sample Code\n\n```js\nlet switchOn = false; // Initial state of the switch\nlet switchAngle = 45; // Angle of the switch when off\n\nfunction setup() {\n  createCanvas(300, 200);\n  textSize(16);\n}\n\nfunction draw() {\n  background(220);\n\n  // Draw title\n  fill(0);\n  strokeWeight(0);\n  text(\"Click Anywhere to Toggle The Switch\", 10, 20);\n\n  // Draw the battery\n  drawBattery();\n\n  // Draw the switch\n  drawSwitch();\n\n  // Draw the light bulb\n  drawLightBulb();\n\n  // Draw wires\n  drawWires();\n}\n\nfunction drawBattery() {\n  fill('grey');\n  rect(20, 100, 20, 50); // battery body\n  rect(20, 95, 20, 5); // positive terminal\n  rect(20, 150, 20, 5); // negative terminal\n}\n\nfunction drawSwitch() {\n  push();\n    translate(80, 50); // Move origin to switch pivot\n    rotate(radians(switchOn ? 0 : switchAngle)); // Rotate when off\n    fill('black');\n    rect(0, 0, 50, 10); // switch\n  pop();\n}\n\nfunction drawLightBulb() {\n  if (switchOn) {\n    fill('yellow');\n  } else {\n    fill('white');\n  }\n  ellipse(250, 50, 30, 30); // light bulb\n}\n\nfunction drawWires() {\n  stroke(switchOn ? 'red' : 'black');\n  strokeWeight(3);\n\n  // Wire from battery top to switch\n  line(40, 100, 40, 50);\n  line(40, 50, 80, 50);\n\n  // Wire from switch to light bulb\n  line(130, 50, 250, 50);\n\n  // Wire from light bulb to battery bottom\n  line(250, 50, 250, 150);\n  line(250, 150, 40, 150);\n}\n\nfunction mousePressed() {\n  switchOn = !switchOn; // Toggle the switch\n  switchAngle = switchOn ? 0 : 45; // Adjust switch angle\n}\n</code></pre>"},{"location":"sims/collision-avoidance-robot/","title":"Collision Avoidance Robot","text":"Collision Avoidance Robot <p>Link to Collision Avoidance Demo</p>"},{"location":"sims/collision-avoidance-robot/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a p5.js simulation of a collision avoidance robot on a 400x400 canvas.\nThe robot moves in a circle of radius 200 which is centered in the canvas.\nThe robot is drawn as blue filled rectangle 40x40 with a 20 long red line pointing at the front.\nThe robot has four modes: stopped, forward, backing up a turning.\nThere are three buttons at the bottom of the drawing region: Start, Stop and Reset.\nThe initial state is stopped.  Place the robot in the center facing right.\nWhen the user presses Start the robot goes into forward mode.\nWhen the robot comes within 20 of the edge of the circle it will backup 20 and then turn.\nThe turn will be 120 degrees either right or left.\nAfter the robot turns it will then go forward.\nWhen the user presses Stop the mode will be stopped.\nWhen the user presses Reset the robot will be placed stopped at the center of the canvas.\n</code></pre>"},{"location":"sims/color-names/","title":"Color Names","text":"Figure caption. <p>Link to Color Names Demo Edit the Color Names MicroSim</p>"},{"location":"sims/color-names/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us the names of the colors and how to see their RGB values.</p>"},{"location":"sims/conway/","title":"Conway's Game of Life","text":"<p>Conway's Game of Life is a simple simulator of cells.  This is a class of simulation called Cellular Automata</p> <p>Demo of Conway's Game of Life</p>"},{"location":"sims/curve/","title":"Curve Control PointerEvent","text":"Curve Control Points <p>Run the Curve Control Point MicroSim Edit Curve Control Points MicroSim</p>"},{"location":"sims/curve/#curve-percent","title":"Curve Percent","text":"<p>Curve Percent Edit Curve Percent</p>"},{"location":"sims/curve/#custom-curve-with-percent-function","title":"Custom Curve with Percent Function","text":"<pre><code>// Draw a curve with only the percent drawin\nfunction customCurve(c1x, c1y, x1, y1, x2, y2, c2x, c2y, percent) {\n  beginShape();\n  for (let t = -0.01; t &lt;= percent + 0.01; t += 0.01) {\n    let v0 = createVector(c1x, c1y);\n    let v1 = createVector(x1, y1);\n    let v2 = createVector(x2, y2);\n    let v3 = createVector(c2x, c2y);\n    let x = curvePoint(v0.x, v1.x, v2.x, v3.x, t);\n    let y = curvePoint(v0.y, v1.y, v2.y, v3.y, t);\n    curveVertex(x, y);\n  }\n  endShape();\n}\n</code></pre>"},{"location":"sims/data-element-mapper/","title":"Data Element Mapper MicroSim","text":"Figure caption. <p>Link to Demo</p>"},{"location":"sims/data-element-mapper/#about-this-microsim","title":"About this MicroSim","text":""},{"location":"sims/flashcards/","title":"Flashcards App","text":"<p>Run the flashcard application</p>"},{"location":"sims/flashcards/#sample-decomposition-prompt","title":"Sample Decomposition Prompt","text":"<pre><code>I want to create a web application that displays 300 flashcards to help me learn the meaning of the 300 most common words in Tagalog.  How can we decompose this into smaller functions?\n</code></pre>"},{"location":"sims/flashcards/#sample-decomposition-response","title":"Sample Decomposition Response","text":"<p>Creating a web application to display flashcards for learning the 300 most common words in Tagalog is a great idea. To make this project manageable and organized, we can decompose it into smaller functions and components. Here's a suggested breakdown:</p> <ol> <li> <p>Data Collection and Preparation</p> <ul> <li>Function to Fetch Word Data: Develop a function to gather the 300 most common Tagalog words. This might involve scraping a website or using an existing dataset.</li> <li>Data Structuring Function: Design a structure to hold word data, including the Tagalog word, its English translation, and any additional data like usage examples or pronunciation guides.</li> <li> <p>Flashcard Generation</p> </li> <li> <p>Flashcard Object Creation: Create a class or structure for a flashcard, encapsulating all necessary data (Tagalog word, English translation, examples, etc.).</p> </li> <li>Flashcard Display Logic: Develop a function to display a single flashcard with its content, including front (Tagalog word) and back (translation, examples).</li> <li> <p>User Interface (UI) Design</p> </li> <li> <p>Main Layout: Design the main layout of the web application, considering where the flashcards will be displayed, navigation buttons, and any other necessary interface elements.</p> </li> <li>Flashcard UI Component: Create a UI component for the flashcard that can flip or reveal additional information upon user interaction.</li> <li>Navigation Controls: Implement UI controls for moving between flashcards (next, previous, random).</li> <li> <p>Interactivity and User Progress Tracking</p> </li> <li> <p>Progress Tracking Function: Develop a system to track the user's progress, such as which flashcards have been seen and any scoring or mastery system you want to include.</p> </li> <li>Review and Testing Mechanisms: Optionally, add features for users to test themselves, like quizzes or a mode where they must recall the translation before seeing it.</li> <li> <p>Data Persistence</p> </li> <li> <p>Local Storage or Database Integration: Decide on and implement a method to store user progress, either locally in the browser or in a backend database.</p> </li> <li> <p>Backend Development (if needed)</p> </li> <li> <p>Server-side Functions: If your app requires a backend, develop the necessary APIs for fetching flashcard data, saving progress, and any other server-side logic.</p> </li> <li>Database Management: Set up a database to manage the flashcards data and user progress, if not stored locally.</li> <li> <p>Testing and Quality Assurance</p> </li> <li> <p>Unit Testing for Functions: Write tests for individual functions to ensure they work as expected.</p> </li> <li>Integration Testing: Test how different parts of your application work together.</li> <li>User Acceptance Testing: Get feedback from potential users to see if the app meets their needs and is user-friendly.</li> <li> <p>Deployment</p> </li> <li> <p>Deployment Setup: Prepare your application for deployment, which may include setting up a web server, domain, etc.</p> </li> <li>Launch: Deploy your application to a web server or hosting service.</li> <li> <p>Maintenance and Updates</p> </li> <li> <p>Regular Maintenance: Plan for regular checks and maintenance of your application.</p> </li> <li>Feature Updates: Consider potential future updates, like adding more words or functionalities based on user feedback.</li> </ul> </li> </ol> <p>By breaking down the project into these smaller components, you can manage the workload more effectively and ensure each part of your application is well-designed and functional.</p>"},{"location":"sims/flashcards/#sample-30-element-wordlist-prompt","title":"Sample 30-Element Wordlist Prompt","text":"<pre><code>Create a list of the 30 most common words\nin Tagalog that are used by visitors.\nPlace them in a JSON file with their English translations.\n</code></pre>"},{"location":"sims/flashcards/#sample-response","title":"Sample Response","text":"<pre><code>[\n    {\"Tagalog\": \"ang\", \"English\": \"the\"},\n    {\"Tagalog\": \"ako\", \"English\": \"I\"},\n    {\"Tagalog\": \"siya\", \"English\": \"he/she\"},\n    {\"Tagalog\": \"sa\", \"English\": \"in/on\"},\n    {\"Tagalog\": \"ng\", \"English\": \"of\"},\n    {\"Tagalog\": \"ay\", \"English\": \"is\"},\n    {\"Tagalog\": \"may\", \"English\": \"have\"},\n    {\"Tagalog\": \"at\", \"English\": \"and\"},\n    {\"Tagalog\": \"ito\", \"English\": \"this\"},\n    {\"Tagalog\": \"mo\", \"English\": \"your\"},\n    {\"Tagalog\": \"para\", \"English\": \"for\"},\n    {\"Tagalog\": \"hindi\", \"English\": \"not/no\"},\n    {\"Tagalog\": \"na\", \"English\": \"already\"},\n    {\"Tagalog\": \"mga\", \"English\": \"plural marker\"},\n    {\"Tagalog\": \"ko\", \"English\": \"my\"},\n    {\"Tagalog\": \"ka\", \"English\": \"you\"},\n    {\"Tagalog\": \"kami\", \"English\": \"we (exclusive)\"},\n    {\"Tagalog\": \"kayo\", \"English\": \"you (plural)\"},\n    {\"Tagalog\": \"sila\", \"English\": \"they\"},\n    {\"Tagalog\": \"tayo\", \"English\": \"we (inclusive)\"},\n    {\"Tagalog\": \"oo\", \"English\": \"yes\"},\n    {\"Tagalog\": \"hindi\", \"English\": \"no\"},\n    {\"Tagalog\": \"kung\", \"English\": \"if\"},\n    {\"Tagalog\": \"isa\", \"English\": \"one\"},\n    {\"Tagalog\": \"dalawa\", \"English\": \"two\"},\n    {\"Tagalog\": \"tatlo\", \"English\": \"three\"},\n    {\"Tagalog\": \"apat\", \"English\": \"four\"},\n    {\"Tagalog\": \"lima\", \"English\": \"five\"},\n    {\"Tagalog\": \"anim\", \"English\": \"six\"},\n    {\"Tagalog\": \"pito\", \"English\": \"seven\"}\n]\n</code></pre>"},{"location":"sims/force-directed-graph/","title":"Force Directed Graph","text":"<p>Forced Directed Graph Demo</p>"},{"location":"sims/force-directed-graph/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a simulation of a force-directed graph placement algorithm.\nGenerate a single file p5.js sketch on a 500x400 canvas.\nSet global variables for the width and height of the canvas.\nThe algorithm will move the position of vertices of a connected\n   based on a force-directed graph placement mode.\nFor the initial state,  place 20 vertices on random locations on a 500x400 canvas. \nMake the vertices be rendered by a circle with a radius of 10.\nConnect each vertex to 3 other vertices using bidirectional links.\nAdd a controls to incrementally step through the algorithm.\nAdd buttons for a single Step, 10 Steps, 100 Steps and 1,000 Steps at the bottom of canvas.\nDisplay the number of steps, and the total movement of the verticies in\neach step.\n</code></pre>"},{"location":"sims/force-directed-graph/#sample-response","title":"Sample Response","text":"<p>Note that this response needed several passes.</p> <pre><code>// Global variables\nlet vertices = [];\nlet totalVertices = 20;\nlet totalSteps = 0;\nlet canvasWidth = 500;\nlet canvasHeight = 400;\nlet vertexRadius = 10;\nlet totalMovement = 0; // To track total net movement\nlet repulsiveForce = 500;\nlet springLength = 100;\nlet springStrength = 0.005;\n\nfunction setup() {\n  createCanvas(canvasWidth, canvasHeight);\n  textSize(16);\n  background(245);\n\n  // Initialize vertices\n  for (let i = 0; i &lt; totalVertices; i++) {\n    let v = {\n      x: random(vertexRadius, width - vertexRadius),\n      y: random(vertexRadius, height - vertexRadius),\n      edges: [],\n      prevX: 0,\n      prevY: 0\n    };\n    v.prevX = v.x; // Store initial position\n    v.prevY = v.y;\n    vertices.push(v);\n  }\n\n  // Create edges\n  for (let i = 0; i &lt; vertices.length; i++) {\n    while (vertices[i].edges.length &lt; 3) {\n      let neighbor = floor(random(totalVertices));\n      if (neighbor !== i &amp;&amp; !vertices[i].edges.includes(neighbor)) {\n        vertices[i].edges.push(neighbor);\n        vertices[neighbor].edges.push(i); // Bidirectional link\n      }\n    }\n  }\n\n  // Button for 'Next' step\n  let nextButton = createButton('Next');\n  nextButton.position(10, height + 10);\n  nextButton.mousePressed(() =&gt; performSteps(1));\n\n  // Button for '10 Steps'\n  let tenStepsButton = createButton('10 Steps');\n  tenStepsButton.position(60, height + 10);\n  tenStepsButton.mousePressed(() =&gt; performSteps(10));\n\n  // Button for '100 Steps'\n  let hundredStepsButton = createButton('100 Steps');\n  hundredStepsButton.position(140, height + 10);\n  hundredStepsButton.mousePressed(() =&gt; performSteps(100));\n\n  // Button for '1000 Steps'\n  let thousandStepsButton = createButton('1000 Steps');\n  thousandStepsButton.position(230, height + 10);\n  thousandStepsButton.mousePressed(() =&gt; performSteps(1000));\n}\n\nfunction draw() {\n  background(245);\n  drawVertices();\n  drawEdges();\n  displayTotalSteps();\n  displayTotalMovement();\n}\n\nfunction drawVertices() {\n  fill('blue');\n  for (let vertex of vertices) {\n    ellipse(vertex.x, vertex.y, vertexRadius * 2, vertexRadius * 2);\n  }\n}\n\nfunction drawEdges() {\n  stroke(0);\n  for (let i = 0; i &lt; vertices.length; i++) {\n    for (let edge of vertices[i].edges) {\n      line(vertices[i].x, vertices[i].y, vertices[edge].x, vertices[edge].y);\n    }\n  }\n}\n\nfunction performSteps(steps) {\n  for (let i = 0; i &lt; steps; i++) {\n    nextStep();\n  }\n}\n\nfunction nextStep() {\n  totalSteps = totalSteps + 1;\n\n  // Calculate repulsive forces\n  for (let i = 0; i &lt; vertices.length; i++) {\n    for (let j = i + 1; j &lt; vertices.length; j++) {\n      let dx = vertices[i].x - vertices[j].x;\n      let dy = vertices[i].y - vertices[j].y;\n      let distance = sqrt(dx * dx + dy * dy);\n      let force = repulsiveForce / (distance * distance);\n      let forceX = force * dx / distance;\n      let forceY = force * dy / distance;\n\n      vertices[i].x += forceX;\n      vertices[i].y += forceY;\n      vertices[j].x -= forceX;\n      vertices[j].y -= forceY;\n    }\n  }\n\n  // Calculate attractive forces along edges\n  for (let vertex of vertices) {\n    for (let edge of vertex.edges) {\n      let dx = vertex.x - vertices[edge].x;\n      let dy = vertex.y - vertices[edge].y;\n      let distance = sqrt(dx * dx + dy * dy);\n      let force = (distance - springLength) * springStrength;\n\n      let forceX = force * dx / distance;\n      let forceY = force * dy / distance;\n\n      vertex.x -= forceX;\n      vertex.y -= forceY;\n      vertices[edge].x += forceX;\n      vertices[edge].y += forceY;\n    }\n  }\n\n  // Update total net movement\n  totalMovement = 0;\n  for (let vertex of vertices) {\n    let dx = vertex.x - vertex.prevX;\n    let dy = vertex.y - vertex.prevY;\n    totalMovement += sqrt(dx * dx + dy * dy);\n    vertex.prevX = vertex.x;\n    vertex.prevY = vertex.y;\n  }\n}\n\nfunction displayTotalSteps() {\n  fill(0);\n  noStroke();\n  textAlign(LEFT, BOTTOM);\n  text(`Steps: ${totalSteps}`, 10, height - 10);\n}\n\nfunction displayTotalMovement() {\n  fill(0);\n  noStroke();\n  textAlign(RIGHT, BOTTOM);\n  text(`Total Step Movement: ${totalMovement.toFixed(2)}`, width - 10, height - 10);\n}\n</code></pre>"},{"location":"sims/fourier/","title":"Fourier","text":"<ul> <li>Paul Falsted's Javascript-based Fourier Tool</li> <li>List of waves</li> <li>GitHub Repo</li> <li>FFT</li> <li>Play Song</li> </ul>"},{"location":"sims/fractal-tree/","title":"Fractal Tree MicroSim","text":"<p>Run the Fractal Tree MicroSim Edit the Fractile Tree MicroSim</p>"},{"location":"sims/fractal-tree/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/name/main.html\" height=\"580\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/galton-board/","title":"Galton Board","text":"<p>Run the Galton Board MicroSim Edit the MicroSim</p>"},{"location":"sims/galton-board/#prompt","title":"Prompt","text":"<pre><code>Create a p5.js sketch that simulates a Galton Board.\nIt is also called a Plinko game.\nThe sketch has \"New Ball\" button that triggers a blue\ncircle with radius=5 falling from the top middle of the\ncanvas.  Below it is a set of pins in a triangular pattern.\nThe ball will bounce on the top pin.\nThere is a 50% chance the ball bounces left and 50% on the right.\nThere is a second row of two pins, each with the same odds.\nOn the third row, there are three pins.\nOn the fourth row there are four pins.\nContinue this pattern for 6 rows.\n</code></pre> <p>Simon Tiger's Galton Board</p> <p>Other sketches by Simon Tiger https://editor.p5js.org/simontiger/sketches</p> <p>Plinko by Coding Train</p>"},{"location":"sims/gold-star/","title":"Gold Star","text":"<p>Run the Gold Star MicroSim</p> <p>Prompt</p> <p>Draw a gold star width number points as a parameter.   Use the circle.js file as your template.</p> <p>Prompt</p> <p>Draw a gold star with number points as a parameter.   Use a slider so that the number of points range from 4 to 30.   Make the default number of points be 10.   Use the circle.js file as your template.</p>"},{"location":"sims/gold-star/#sample-code","title":"Sample Code","text":"<pre><code>// Draw a gold star width number points as a parameter\nlet pointsSlider;\nlet width = 400;\nlet height = 430;\nlet drawHeight = 400;\nlet cx = width / 2;\nlet cy = height / 2;\nlet sliderLeftMargin = 100;\n\nfunction setup() {\n  const canvas = createCanvas(width, height);\n  canvas.parent('canvas-container');\n  textSize(16);\n\n  pointsSlider = createSlider(4, 20, 10);\n  pointsSlider.position(90, height - 15);\n  pointsSlider.style('width', width - sliderLeftMargin +'px');\n}\n\nfunction draw() {\n  // fill the drawing area with a light gray background\n  fill(220);\n  rect(0,0,width,drawHeight);\n  fill(245);\n  rect(0,drawHeight,width,height);\n\n  // radius\n  const r = min(width, height) * 0.45;\n\n  // points\n  points = pointsSlider.value();\n\n  // tempory move of coordinate system to center\n  push();\n     translate(cx, cy);\n     star(0, 0, r * 0.6, r, points);\n  pop();\n\n  // draw the label and values in the control area\n  fill(0);\n  text(\"Points:\" + points, 10, height - 10);\n}\n\n// draw star at (x,y) with inner and outer radius and n points\nfunction star(x, y, radius1, radius2, npoints) {\n  let angle = TWO_PI / npoints;\n  let halfAngle = angle / 2.0;\n  fill('gold');\n  beginShape();\n  for (let a = 0; a &lt; TWO_PI; a += angle) {\n    let sx = x + cos(a) * radius2;\n    let sy = y + sin(a) * radius2;\n    vertex(sx, sy);\n    sx = x + cos(a + halfAngle) * radius1;\n    sy = y + sin(a + halfAngle) * radius1;\n    vertex(sx, sy);\n  }\n  endShape(CLOSE);\n}\n</code></pre>"},{"location":"sims/gold-star/#key-learnings","title":"Key Learnings","text":"<ol> <li>We create a new custom JavaScript function called <code>star()</code></li> <li>We add parameters for the inner radius, outer radius and number of points</li> <li>We use the <code>beginShape()</code> and <code>endShape()</code> to surround our points on the start</li> <li>We use <code>cos()</code> and <code>sin()</code> to calculate the proper x and y points as we go around the star</li> </ol>"},{"location":"sims/gold-star/#lesson-plan-drawing-stars-with-variable-points","title":"Lesson Plan: Drawing Stars with Variable Points","text":""},{"location":"sims/gold-star/#objective","title":"Objective","text":"<p>Students will understand the geometric concepts of radius, angles, and symmetry by drawing stars programmatically.</p>"},{"location":"sims/gold-star/#grade-level","title":"Grade Level","text":"<p>9th Grade</p>"},{"location":"sims/gold-star/#subject","title":"Subject","text":"<p>Geometry</p>"},{"location":"sims/gold-star/#materials-needed","title":"Materials Needed","text":"<ul> <li>Computers with Internet access</li> <li>Projector for demonstration</li> <li>Students will need access to a web browser and provide a link to the p5.js editor. They can use the copy icon in the upper right corner of the code example above.</li> </ul>"},{"location":"sims/gold-star/#duration","title":"Duration","text":"<p>1 hour</p>"},{"location":"sims/gold-star/#activities","title":"Activities","text":""},{"location":"sims/gold-star/#introduction-5-minutes","title":"Introduction (5 minutes)","text":"<ul> <li>Discussion: Briefly discuss what students know about stars and their shapes. Introduce the concept of radius, angles, and symmetry in geometry.</li> <li>Demonstration: Show the star drawing code and explain the setup, draw functions, and the star function.</li> </ul>"},{"location":"sims/gold-star/#activity-part-1-exploring-the-code-10-minutes","title":"Activity Part 1: Exploring the Code (10 minutes)","text":"<ul> <li>Hands-On: Students will run the code and play with the points slider to see how the number of points affects the star's shape.</li> <li>Questions for Discussion: </li> <li>How does changing the number of points alter the shape of the star?</li> <li>What happens when you use different numbers of points (odd vs. even)?</li> </ul>"},{"location":"sims/gold-star/#activity-part-2-calculating-angles-15-minutes","title":"Activity Part 2: Calculating Angles (15 minutes)","text":"<ul> <li>Explanation: Explain how the angles in the star are calculated (<code>angle = TWO_PI / npoints</code>).</li> <li>Activity: Have students calculate the angles for different numbers of points and predict the shapes before testing them on the computer.</li> </ul>"},{"location":"sims/gold-star/#activity-part-3-customize-the-lab-10-minutes","title":"Activity Part 3: Customize the Lab (10 minutes)","text":"<ul> <li>Creative Task: Challenge students to modify the code to create different variations of the lab</li> <li>Add Color Sliders: Add a slider to change the fill color of the star, the border color and the border width.  Students will need to adjust the position of the sliders, labels and values. You will need to learn to use the strokeWeight function.</li> <li>Add New Radius Sliders: Add sliders for controlling the length of the inner and outer radius of the star.</li> <li>Sharing: Allow a few students to share their creations and explain the geometric concepts used.</li> <li>Use ChatGPT: Use ChatGPT to add new code and test the new code.</li> </ul>"},{"location":"sims/gold-star/#conclusion-5-minutes","title":"Conclusion (5 minutes)","text":"<ul> <li>Summary: Recap the key geometric concepts learned through the activity.</li> <li>Homework Assignment: Students can write a short reflection on what they learned about geometry from this exercise or create a small project where they use the code to explore a geometric concept.</li> </ul>"},{"location":"sims/gold-star/#assessment","title":"Assessment","text":"<ul> <li>Participation in discussions and activities.  Do they share their knowledge and their bugs?</li> <li>The ability of students to add features.</li> <li>Creativity and understanding of the concepts.</li> </ul>"},{"location":"sims/h-bridge/","title":"H-Bridge Circuit","text":"<p>An H-bridge circuit is four switches around a motor in the shape of the letter \"H\". The motor is at the center of the letter \"H\". When the upper-left and lower-right switches are closed, the motor spins one direction. When the lower-left and upper-right switches are closed, the motor spins in the opposite direction.</p> <p></p> <p>H-Bridge Demo</p> <pre><code>Generate a single p5.js sketch file.\n\nDraw an H-bridge circuit for reversing the direction of a DC motor.\n\nHave three state buttons for \"Forward\", \"Stop\" and \"Reverse\".\nPlace the positive power rail at the top of the circuit.\nPlace the negative rail at the bottom of the circuit.\nPlace the motor in the center of the H-brige ciricut.\nAnimate the motor moving clockwise for the Forward state.\nAnimate the motor going counter-clockwise for the Reverse state.\nMake the motor stopped for the Stop state.\nHave the upper left and lower right wires animate current for the Forward state.\nHave the upper right and lower left wires animate current for the Reverse state.\nTurn off all wire animation for the Stop state.\n\nCreate four knife switches.\nHave the upper left and lower right be closed for Forward.\nHave the upper right and lower left be closed for Reverse.\nHave all the switches be open for Stop.\n\nUse the following function to draw current in a wire:\n\nfunction drawAnimatedWire(x1, y1, x2, y2, speed1, state) {\n    if (state) {\n        let distance = dist(x1, y1, x2, y2);\n        let circlePos = map((millis() * speed1) % distance, 0, distance, 0, 1);\n\n        // lerp generates the percent between two values\n        let x = lerp(x1, x2, circlePos);\n        let y = lerp(y1, y2, circlePos);\n\n        stroke(0);\n        strokeWeight(lineWidth)\n        line(x1, y1, x2, y2); // Draw the wire\n\n        fill(255, 0, 0);\n        noStroke();\n        circle(x, y, 10); // Draw the moving circle (electron)\n    } else {\n        stroke(0);\n        strokeWeight(lineWidth)\n        line(x1, y1, x2, y2); // Draw the wire\n    }\n}\n</code></pre>"},{"location":"sims/h-bridge/#response","title":"Response","text":"<p>Sure! Here's a p5.js sketch file that implements the H-bridge circuit with state buttons for \"Forward,\" \"Stop,\" and \"Reverse\":</p> <pre><code>let forwardButton;\nlet stopButton;\nlet reverseButton;\n\nconst lineWidth = 2;\n\nfunction setup() {\n  createCanvas(400, 400);\n\n  forwardButton = createButton('Forward');\n  forwardButton.position(10, 10);\n  forwardButton.mousePressed(forward);\n\n  stopButton = createButton('Stop');\n  stopButton.position(90, 10);\n  stopButton.mousePressed(stop);\n\n  reverseButton = createButton('Reverse');\n  reverseButton.position(150, 10);\n  reverseButton.mousePressed(reverse);\n}\n\nfunction forward() {\n  // Code to control the H-bridge for forward motion\n}\n\nfunction stop() {\n  // Code to stop the motor\n}\n\nfunction reverse() {\n  // Code to control the H-bridge for reverse motion\n}\n\nfunction draw() {\n  background(220);\n\n  // Draw positive power rail\n  stroke(0);\n  strokeWeight(lineWidth);\n  line(40, 60, width - 40, 60);\n\n  // Draw negative power rail\n  stroke(0);\n  strokeWeight(lineWidth);\n  line(40, height - 60, width - 40, height - 60);\n\n  // Draw H-bridge circuit\n  stroke(0);\n  strokeWeight(lineWidth);\n  line(width / 2 - 40, 60, width / 2 - 40, height - 60);\n  line(width / 2 + 40, 60, width / 2 + 40, height - 60);\n  line(width / 2 - 40, height / 2, width / 2 + 40, height / 2);\n\n  // Draw motor\n  noFill();\n  stroke(0);\n  strokeWeight(lineWidth);\n  rect(width / 2 - 20, height / 2 - 20, 40, 40);\n\n  // Draw wires with current\n  let speed1 = 0.01;\n  drawAnimatedWire(40, 60, width / 2 - 40, 60, speed1, forwardButton.elt.disabled);\n  drawAnimatedWire(width / 2 + 40, 60, width - 40, 60, speed1, reverseButton.elt.disabled);\n  drawAnimatedWire(40, height - 60, width / 2 - 40, height - 60, speed1, reverseButton.elt.disabled);\n  drawAnimatedWire(width / 2 + 40, height - 60, width - 40, height - 60, speed1, forwardButton.elt.disabled);\n}\n\nfunction drawAnimatedWire(x1, y1, x2, y2, speed1, state) {\n  if (state) {\n    let distance = dist(x1, y1, x2, y2);\n    let circlePos = map((millis() * speed1) % distance, 0, distance, 0, 1);\n\n    // lerp generates the percent between two values\n    let x = lerp(x1, x2, circlePos);\n    let y = lerp(y1, y2, circlePos);\n\n    stroke(0);\n    strokeWeight(lineWidth);\n    line(x1, y1, x2, y2); // Draw the wire\n\n    fill(255, 0, 0);\n    noStroke();\n    circle(x, y, 10); // Draw the moving circle (electron)\n  } else {\n    stroke(0);\n    strokeWeight(lineWidth);\n    line(x1, y1, x2, y2); // Draw the wire\n  }\n}\n</code></pre>"},{"location":"sims/larson-scanner/","title":"Larson Scanner","text":"<p>Run the Larson Scanner MicroSim</p> <p>Edit this MicroSim</p>"},{"location":"sims/larson-scanner/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how the Larson Scanner animation works.</p>"},{"location":"sims/larson-scanner/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a p5.js sketch for a simulation of a Larson Scanner.\nThe project has a row of 12 red evenly spaced horizontal\ncircles at the top of the 600x300 canvas that fade in\nand out like a Cylon robot eyes. A slider below the\ndrawing area allows a user to control the speed of\nthe animation.\n</code></pre>"},{"location":"sims/larson-scanner/#chatgpt-o1-mini-sample-response","title":"ChatGPT o1-mini Sample Response","text":"<p>Sure! Below is a complete p5.js sketch that simulates a Larson Scanner with the specifications you provided. This sketch features 12 red circles that fade in and out sequentially, mimicking the iconic Cylon robot eyes. A slider is included below the canvas to allow users to control the speed of the animation.</p>"},{"location":"sims/larson-scanner/#how-it-works","title":"How It Works:","text":"<ol> <li> <p>Setup:</p> <ul> <li>A canvas of size 600x300 is created.</li> <li>12 circles are positioned evenly across the top of the canvas.</li> <li>A slider is added below the canvas to control the animation speed.</li> </ul> </li> <li> <p>Animation Logic:</p> <ul> <li>The animation moves a \"scanner\" across the circles from left to right and then back from right to left.</li> <li>The current active circle's brightness is controlled using alpha transparency to create a fading effect.</li> <li>The speed of the scanner is adjustable via the slider, affecting how quickly the scanner moves from one circle to the next.</li> </ul> </li> <li> <p>Interactivity:</p> <ul> <li>Users can adjust the slider to make the scanner move faster or slower.</li> </ul> </li> </ol>"},{"location":"sims/larson-scanner/#complete-p5js-sketch","title":"Complete p5.js Sketch:","text":"<pre><code>let numCircles = 12;        // Total number of circles\nlet circles = [];           // Array to hold circle positions\nlet current = 0;            // Current active circle index\nlet direction = 1;          // Direction of the scanner: 1 = forward, -1 = backward\nlet speedSlider;            // Slider to control speed\nlet speed;                  // Speed value from slider\nlet lastUpdate = 0;         // Time of the last update\nlet interval = 200;         // Interval between updates in milliseconds\n\nfunction setup() {\n  createCanvas(600, 300);\n  // Calculate spacing between circles\n  let spacing = width / (numCircles + 1);\n  for (let i = 0; i &lt; numCircles; i++) {\n    let x = spacing * (i + 1);\n    let y = 50; // Positioned near the top\n    circles.push(createVector(x, y));\n  }\n\n  // Create a slider for speed control\n  // Slider range: 50 ms (fast) to 1000 ms (slow)\n  speedSlider = createSlider(50, 1000, interval, 50);\n  speedSlider.position(150, height + 20);\n  speedSlider.style('width', '300px');\n\n  // Label for the slider\n  let label = createP('Adjust Speed');\n  label.position(150, height - 10);\n  label.style('font-family', 'Arial');\n  label.style('font-size', '16px');\n}\n\nfunction draw() {\n  background(0); // Black background\n\n  // Get current speed from slider\n  speed = speedSlider.value();\n\n  // Update interval based on speed\n  interval = speed;\n\n  // Update the current active circle based on the interval\n  if (millis() - lastUpdate &gt; interval) {\n    current += direction;\n\n    // Change direction if we reach the end or beginning\n    if (current &gt;= numCircles - 1) {\n      direction = -1;\n    } else if (current &lt;= 0) {\n      direction = 1;\n    }\n\n    lastUpdate = millis();\n  }\n\n  // Draw all circles\n  for (let i = 0; i &lt; numCircles; i++) {\n    if (i === current) {\n      // Active circle: bright red\n      fill(255, 0, 0, 255);\n      ellipse(circles[i].x, circles[i].y, 30, 30);\n    } else if (i === current - direction || i === current + direction) {\n      // Adjacent circles: semi-transparent red\n      fill(255, 0, 0, 100);\n      ellipse(circles[i].x, circles[i].y, 30, 30);\n    } else {\n      // Inactive circles: dim red\n      fill(255, 0, 0, 50);\n      ellipse(circles[i].x, circles[i].y, 30, 30);\n    }\n  }\n\n  // Optional: Display current speed\n  fill(255);\n  noStroke();\n  textSize(14);\n  textAlign(CENTER);\n  text(`Speed: ${speed} ms per step`, width / 2, height - 10);\n}\n</code></pre>"},{"location":"sims/larson-scanner/#how-to-run-the-sketch","title":"How to Run the Sketch:","text":"<ol> <li> <p>Using the p5.js Web Editor:</p> </li> <li> <p>Go to the p5.js Web Editor.</p> </li> <li>Create a new sketch.</li> <li>Replace the existing code with the code provided above.</li> <li>Click the \"Play\" button to run the sketch.</li> <li> <p>Locally on Your Computer:</p> </li> <li> <p>Ensure you have the p5.js library included in your project.</p> </li> <li>Save the above code in a file named <code>sketch.js</code>.</li> <li>Create an <code>index.html</code> file and include the p5.js library and your <code>sketch.js</code>.</li> <li>Open <code>index.html</code> in your web browser to see the simulation.</li> </ol>"},{"location":"sims/larson-scanner/#customization","title":"Customization:","text":"<ul> <li>Number of Circles: You can change the <code>numCircles</code> variable to increase or decrease the number of circles in the scanner.</li> <li>Circle Size: Adjust the diameter values in the <code>ellipse</code> function calls to make the circles larger or smaller.</li> <li>Colors: Modify the <code>fill</code> colors to change the appearance of the scanner.</li> <li>Initial Speed: Change the default value in the <code>createSlider</code> function to set a different initial speed.</li> </ul> <p>Feel free to experiment with the parameters to create a Larson Scanner that fits your preferences!</p>"},{"location":"sims/larson-scanner/#references","title":"References","text":"<p>Link to Full ChatGPT Transcript</p>"},{"location":"sims/learning-graph/","title":"Concept Graph Prompt","text":"<p>Run The Learning Graph MicroSim</p> <p>Fixed Positions</p> <p>A concept graph or learning graph is a directed graph that lists all of the concepts taught in a typical course or curriculum.</p>"},{"location":"sims/learning-graph/#sample-prompt","title":"Sample Prompt","text":"<p>Prompt</p> <p>I am teaching a course to high-school teachers on how to use generative AI to create small educational simulations for a specific course or group of students.  This course is called \"Teaching with GenAI and MicroSims\".</p> <p>Please create a numbered list of the top 150 Concepts we need to teach in this course.  Have one Concept Label per line and use a Concept Label that is short so it can be viewed in a graph network.  Feel free to use abbreviations within the Concept Label.</p> <p>This list should be sorted from Fundamental Concepts first to the most advanced Concept last.</p> <p>Make sure not to duplicate Concepts.</p> <p>The course learning objectives include:</p> <ol> <li>How to create detailed high-quality generative AI prompts.</li> <li>How to generate web-based simulations using JavaScript libraries such as ChatGPT or vis.js.</li> <li>How to get ChatGPT to use templates for high-quality and consistent user interfaces.</li> <li>How to save and test simulations using tools such as the p5.js editor</li> <li>How to deploy these simulations using standards such as markdown, mkdocs and GitHub pages.</li> <li>How to get feedback from students on how effective these simulations are in the classroom.</li> <li>How to use Google Analytics to see what MicroSims are being used and how often.</li> </ol> <p>```</p>"},{"location":"sims/learning-graph/#chatgpt-o1-preview-response","title":"ChatGPT o1-preview Response","text":"<ol> <li>GenAI Basics</li> <li>MicroSim Concepts</li> <li>MicroSim Benefits</li> <li>AI Prompting Intro</li> <li>Effective Prompts</li> <li>Prompt Engineering</li> <li>High-Quality Prompts</li> <li>Avoid Ambiguous Prompts</li> <li>AI Limitations</li> <li>JS Fundamentals</li> <li>JS Variables</li> <li>JS Operators</li> <li>JS Control Structures</li> <li>JS Functions</li> <li>JS Objects &amp; Arrays</li> <li>DOM Manipulation</li> <li>Event Listeners</li> <li>vis.js Intro</li> <li>Networks with vis.js</li> <li>vis.js Visuals</li> <li>Animation in vis.js</li> <li>p5.js Intro</li> <li>Drawing in p5.js</li> <li>p5.js Animation</li> <li>Interactivity p5.js</li> <li>p5.js Editor</li> <li>Save p5.js Projects</li> <li>Test Simulations</li> <li>Debugging Techniques</li> <li>ChatGPT for Code</li> <li>ChatGPT Code Gen</li> <li>Templates in ChatGPT</li> <li>Apply UI Templates</li> <li>Consistent UI</li> <li>Save AI Code</li> <li>Git Version Control</li> <li>Using GitHub</li> <li>GitHub Pages</li> <li>Deploy Simulations</li> <li>Markdown Intro</li> <li>Writing Markdown</li> <li>mkdocs Docs</li> <li>Setup mkdocs Site</li> <li>mkdocs on GitHub</li> <li>Collect Feedback</li> <li>Feedback Forms</li> <li>Analyze Feedback</li> <li>Improve Simulations</li> <li>Google Analytics</li> <li>Link Analytics</li> <li>Interpret Usage Data</li> <li>Engagement Metrics</li> <li>Data-Driven Decisions</li> <li>Privacy in Analytics</li> <li>Ethical Student Data</li> <li>Simulation Accessibility</li> <li>Inclusive Design</li> <li>Cross-Browser Tests</li> <li>Mobile Responsive</li> <li>Multi-Device Testing</li> <li>Performance Optimize</li> <li>Minimize Load Time</li> <li>Image Optimize</li> <li>Code Minify</li> <li>Graceful Errors</li> <li>Logging &amp; Monitoring</li> <li>Security Practices</li> <li>Avoid Vulnerabilities</li> <li>Open Source Licenses</li> <li>Legal Library Use</li> <li>Attribution &amp; Licensing</li> <li>Customize Open Source</li> <li>Advanced Prompts</li> <li>System Prompts</li> <li>AI Output Variability</li> <li>Rephrase Prompts</li> <li>Chain-of-Thought</li> <li>AI Debugging</li> <li>Fine-Tune Sims</li> <li>API Integration</li> <li>Fetch API Data</li> <li>JSON Handling</li> <li>Real-Time Data</li> <li>Advanced p5.js</li> <li>p5.js 3D Graphics</li> <li>Sound in p5.js</li> <li>Advanced vis.js</li> <li>vis.js Clustering</li> <li>vis.js Hierarchy</li> <li>D3.js Intro</li> <li>vis.js vs D3.js</li> <li>Library Selection</li> <li>JS Performance</li> <li>Memory Management</li> <li>JS Event Loop</li> <li>Async JS</li> <li>Promises &amp; Async/Await</li> <li>Async Error Handling</li> <li>Modular JS</li> <li>ES6 Modules</li> <li>Babel Transpile</li> <li>Webpack Setup</li> <li>Code Bundling</li> <li>Source Maps</li> <li>NPM Packages</li> <li>Publish NPM Package</li> <li>Reusable Components</li> <li>Component Libraries</li> <li>CSS Styling</li> <li>CSS Preprocessor</li> <li>Bootstrap CSS</li> <li>Responsive Design</li> <li>CSS Media Queries</li> <li>Flexbox</li> <li>CSS Grid</li> <li>HTML Accessibility</li> <li>ARIA Roles</li> <li>Screen Reader Tests</li> <li>Write Documentation</li> <li>README Best Practices</li> <li>Code Comments</li> <li>Repo Maintenance</li> <li>GitHub Collaboration</li> <li>Pull Requests</li> <li>Issue Tracking</li> <li>Continuous Integration</li> <li>GitHub Actions CI</li> <li>Automated Testing</li> <li>Jest Unit Tests</li> <li>Integration Tests</li> <li>Cypress E2E Tests</li> <li>Deploy to Netlify</li> <li>Deploy to Vercel</li> <li>Env Variables</li> <li>Secure API Keys</li> <li>OAuth API Access</li> <li>GDPR Compliance</li> <li>Data Protection</li> <li>AI Ethics Edu</li> <li>Avoid AI Bias</li> <li>Promote Fairness</li> <li>Handle Sensitive Topics</li> <li>AI Transparency</li> <li>Teach AI to Students</li> <li>Student Data Privacy</li> <li>FERPA Compliance</li> <li>Online Safety</li> <li>Digital Footprint</li> <li>Future GenAI Edu</li> <li>Lifelong EdTech Learning</li> </ol>"},{"location":"sims/learning-graph/#concept-dependency-prompt","title":"Concept Dependency Prompt","text":"<p>```linenums Our next step is to create a fully connected dependency graph. In this step, for each concept on this list, create a new list of other concepts on which it depends.  If a concept depends on a specific concept that is not listed, then we will need to add it as a new concept. This will help us determine the teaching order of the concepts.</p> <p>Return the new list as a CSV file using the following format. The first column is a numeric concept ID you assign,  the second column is the concept name, and the third column is a pipe-delimited list of the concept IDs that the concept depends upon.</p> <p>Check your results to make sure that all concepts are connected to at least one other concept.</p>"},{"location":"sims/learning-graph-v1/02-concept-enumeration/","title":"02 concept enumeration","text":"<pre><code>I would like you to create a list of all the key concept names in this course.\nPlease generate  a numbered list of the 150 most essential concepts\nin an 10-week course on the Creating and Customizing MicroSims course\nwe have described\nabove. For each concept, just return the concept name.\nUse acronyms and abbreviations when appropriate.  They will be used\nto label a network graph.\nMake sure that the concepts are distinct and are not duplicates.\n\nStart with the most basic foundational concepts that are prerequisites\nfor the course, and then proceed from the basic to the most complex\nconcepts. Return the numbered list just one concept per line.\nChatGPT\n</code></pre>"},{"location":"sims/learning-graph-v1/02-concept-enumeration/#response","title":"Response","text":"<ol> <li>Computer Literacy</li> <li>Keyboard Proficiency</li> <li>Command-Line Interface (CLI)</li> <li>Basic Programming Concepts</li> <li>Text Editors</li> <li>Web Browsers</li> <li>Introduction to Git</li> <li>GitHub Fundamentals</li> <li>Basic HTML</li> <li>Basic JavaScript</li> <li>Introduction to Generative AI</li> <li>AI in Education</li> <li>MicroSim Definition</li> <li>Role of MicroSims in Learning</li> <li>Examples of MicroSims</li> <li>Interactive Simulations</li> <li>Visualization Techniques</li> <li>User Interface (UI) Basics</li> <li>Processing Libraries Overview</li> <li>Introduction to p5.js</li> <li>Setting Up p5.js Environment</li> <li>p5.js Online Editor</li> <li>p5.js Syntax</li> <li>Variables in p5.js</li> <li>Functions in p5.js</li> <li>Drawing Shapes in p5.js</li> <li>Coordinate System in p5.js</li> <li>Colors in p5.js</li> <li>Lines and Curves</li> <li>Text Rendering in p5.js</li> <li>Images in p5.js</li> <li>Animation Basics</li> <li>Loops in p5.js</li> <li>Conditionals in p5.js</li> <li>Arrays in p5.js</li> <li>Objects in p5.js</li> <li>Events in p5.js</li> <li>Mouse Interaction</li> <li>Keyboard Interaction</li> <li>Setup Function</li> <li>Draw Function</li> <li>Frame Rate Control</li> <li>Canvas Size Configuration</li> <li>Crafting AI Prompts</li> <li>Prompt Engineering</li> <li>Effective Communication with AI</li> <li>Templates for MicroSims</li> <li>AI-Generated Code</li> <li>Code Quality Assurance</li> <li>Debugging Techniques</li> <li>Error Handling</li> <li>Testing MicroSims</li> <li>Refining MicroSims</li> <li>User Experience (UX) Design</li> <li>Consistent UI Design</li> <li>Feedback Loops with AI</li> <li>Correcting AI Errors</li> <li>Improving AI Output</li> <li>p5.js Libraries</li> <li>External Libraries Integration</li> <li>Modular Code Development</li> <li>Code Reusability</li> <li>Version Control with Git</li> <li>Branching Strategies in Git</li> <li>Merging Conflicts Resolution</li> <li>Collaborating on GitHub</li> <li>Publishing to GitHub Pages</li> <li>Hosting MicroSims Online</li> <li>Custom Domains with GitHub Pages</li> <li>HTML Integration with p5.js</li> <li>CSS Basics</li> <li>Styling MicroSims</li> <li>Responsive Design Principles</li> <li>Mobile Compatibility</li> <li>Accessibility in Design</li> <li>Advanced p5.js Features</li> <li>Sound Integration</li> <li>Audio Playback in p5.js</li> <li>Video Embedding in p5.js</li> <li>Data Visualization Techniques</li> <li>Loading Data Files</li> <li>JSON Handling in p5.js</li> <li>APIs Integration</li> <li>Real-Time Data Processing</li> <li>Complex Animations</li> <li>Physics Simulations</li> <li>Particle Systems</li> <li>3D Graphics in p5.js</li> <li>WebGL Usage in p5.js</li> <li>Shader Programming Basics</li> <li>DOM Manipulation with p5.js</li> <li>Touch Event Handling</li> <li>Multi-Touch Support</li> <li>Function Libraries Creation</li> <li>Code Optimization Strategies</li> <li>Performance Tuning</li> <li>Memory Management</li> <li>Debugging Tools</li> <li>Console Logging Techniques</li> <li>Interpreting Error Messages</li> <li>Breakpoints Usage</li> <li>Code Profiling</li> <li>Code Refactoring</li> <li>Coding Best Practices</li> <li>Code Documentation</li> <li>Commenting Standards</li> <li>Code Readability</li> <li>Style Guidelines</li> <li>Naming Conventions</li> <li>Object-Oriented Programming (OOP)</li> <li>Classes in p5.js</li> <li>Inheritance Concepts</li> <li>Polymorphism Principles</li> <li>Encapsulation Techniques</li> <li>Modular Design Patterns</li> <li>Design Patterns Overview</li> <li>MVC Architecture</li> <li>Software Development Life Cycle (SDLC)</li> <li>Agile Methodology</li> <li>Project Management Tools</li> <li>Time Management Skills</li> <li>Group Collaboration Techniques</li> <li>Peer Review Processes</li> <li>Version Control Workflows</li> <li>Pull Requests in GitHub</li> <li>Code Reviews Best Practices</li> <li>Issue Tracking Systems</li> <li>Milestones in GitHub</li> <li>GitHub Actions</li> <li>Continuous Integration (CI)</li> <li>Continuous Deployment (CD)</li> <li>Web Hosting Concepts</li> <li>DNS Basics</li> <li>SSL Certificates</li> <li>HTTPS Protocol</li> <li>Web Application Security</li> <li>Cross-Site Scripting (XSS) Prevention</li> <li>Input Validation Techniques</li> <li>Authentication Methods</li> <li>Authorization Concepts</li> <li>Data Privacy Laws</li> <li>User Data Handling</li> <li>Ethical Considerations in AI</li> <li>AI Bias Awareness</li> <li>Responsible AI Use</li> <li>Future Trends in AI</li> <li>Emerging Technologies in Education</li> <li>Lifelong Learning Strategies</li> <li>Career Opportunities in AI</li> <li>The Future of MicroSims</li> </ol> <p>o1</p>"},{"location":"sims/learning-graph-v1/03-concept-dependency/","title":"Concept Dependency","text":""},{"location":"sims/learning-graph-v1/03-concept-dependency/#prompt","title":"Prompt","text":"<pre><code>Our next step is to create a fully connected\ndependency graph for learning these Concepts.\nIn this step, for each Concept on this list, create a new\nlist of other concepts within this list on which it depends.\n\nIf a concept depends on a specific concept that is not listed,\nthen we will need to add it as a new concept.\nThis will help us determine the teaching order of the Concepts.\n\nReturn the new list as a CSV file using the following format:\n\nThe first column in the CSV file is a numeric concept ID\nyou assigned in the list above.  The second column is\nthe concept name.\nThe third column is a pipe-delimited list of the Concept\nIDs that the concept depends upon.\n\nCheck your results to make sure that all concepts\nare connected to at least one other concept.\n\nIf a concept is a Foundational concept,\nthen there are no dependency concepts.\n</code></pre>"},{"location":"sims/learning-graph-v1/03-concept-dependency/#chatgpt-o1-preview-response","title":"ChatGPT o1-preview Response","text":"<pre><code>1,Computer Literacy,\n2,Keyboard Proficiency,1\n3,Command-Line Interface (CLI),1|2\n4,Basic Programming Concepts,1|2\n5,Text Editors,1|2\n6,Web Browsers,1|2\n7,Introduction to Git,3|4|5\n8,GitHub Fundamentals,7\n9,Basic HTML,1|2|6\n10,Basic JavaScript,4|9\n11,Introduction to Generative AI,1|2\n12,AI in Education,11\n13,MicroSim Definition,11|12\n14,Role of MicroSims in Learning,13\n15,Examples of MicroSims,13\n16,Interactive Simulations,4|13\n17,Visualization Techniques,16\n18,User Interface (UI) Basics,1|2\n19,Processing Libraries Overview,10|16\n20,Introduction to p5.js,19\n21,Setting Up p5.js Environment,20\n22,p5.js Online Editor,21\n23,p5.js Syntax,20\n24,Variables in p5.js,23\n25,Functions in p5.js,23\n26,Drawing Shapes in p5.js,23\n27,Coordinate System in p5.js,26\n28,Colors in p5.js,26\n29,Lines and Curves,26\n30,Text Rendering in p5.js,23\n31,Images in p5.js,23\n32,Animation Basics,26\n33,Loops in p5.js,24|25\n34,Conditionals in p5.js,24|25\n35,Arrays in p5.js,24\n36,Objects in p5.js,24|25\n37,Events in p5.js,25\n38,Mouse Interaction,37\n39,Keyboard Interaction,37\n40,Setup Function,23\n41,Draw Function,23\n42,Frame Rate Control,32|41\n43,Canvas Size Configuration,40\n44,Crafting AI Prompts,11\n45,Prompt Engineering,44\n46,Effective Communication with AI,44\n47,Templates for MicroSims,23|45\n48,AI-Generated Code,45\n49,Code Quality Assurance,48\n50,Debugging Techniques,48|49\n51,Error Handling,50\n52,Testing MicroSims,50|51\n53,Refining MicroSims,52\n54,User Experience (UX) Design,18|17\n55,Consistent UI Design,54\n56,Feedback Loops with AI,46\n57,Correcting AI Errors,50|56\n58,Improving AI Output,57\n59,p5.js Libraries,19|20\n60,External Libraries Integration,59\n61,Modular Code Development,35|36\n62,Code Reusability,61\n63,Version Control with Git,7\n64,Branching Strategies in Git,63\n65,Merging Conflicts Resolution,64\n66,Collaborating on GitHub,8|65\n67,Publishing to GitHub Pages,66\n68,Hosting MicroSims Online,67\n69,Custom Domains with GitHub Pages,68\n70,HTML Integration with p5.js,9|23\n71,CSS Basics,9\n72,Styling MicroSims,70|71\n73,Responsive Design Principles,72\n74,Mobile Compatibility,73\n75,Accessibility in Design,73\n76,Advanced p5.js Features,59\n77,Sound Integration,76\n78,Audio Playback in p5.js,77\n79,Video Embedding in p5.js,76\n80,Data Visualization Techniques,17|76\n81,Loading Data Files,80\n82,JSON Handling in p5.js,81\n83,APIs Integration,82\n84,Real-Time Data Processing,83\n85,Complex Animations,32|76\n86,Physics Simulations,85\n87,Particle Systems,85\n88,3D Graphics in p5.js,76\n89,WebGL Usage in p5.js,88\n90,Shader Programming Basics,89\n91,DOM Manipulation with p5.js,70\n92,Touch Event Handling,37\n93,Multi-Touch Support,92\n94,Function Libraries Creation,36|61\n95,Code Optimization Strategies,62|61\n96,Performance Tuning,95\n97,Memory Management,96\n98,Debugging Tools,50\n99,Console Logging Techniques,50\n100,Interpreting Error Messages,50|51\n101,Breakpoints Usage,98\n102,Code Profiling,96\n103,Code Refactoring,62\n104,Coding Best Practices,103\n105,Code Documentation,104\n106,Commenting Standards,104\n107,Code Readability,104\n108,Style Guidelines,104\n109,Naming Conventions,104\n110,Object-Oriented Programming (OOP),36\n111,Classes in p5.js,110\n112,Inheritance Concepts,110\n113,Polymorphism Principles,110\n114,Encapsulation Techniques,110\n115,Modular Design Patterns,61|110\n116,Design Patterns Overview,115\n117,MVC Architecture,116\n118,Software Development Life Cycle (SDLC),104\n119,Agile Methodology,118\n120,Project Management Tools,119\n121,Time Management Skills,119\n122,Group Collaboration Techniques,120\n123,Peer Review Processes,122\n124,Version Control Workflows,63\n125,Pull Requests in GitHub,66\n126,Code Reviews Best Practices,123|125\n127,Issue Tracking Systems,120\n128,Milestones in GitHub,66\n129,GitHub Actions,66\n130,Continuous Integration (CI),129\n131,Continuous Deployment (CD),130\n132,Web Hosting Concepts,67\n133,DNS Basics,132\n134,SSL Certificates,132\n135,HTTPS Protocol,134\n136,Web Application Security,135\n137,Cross-Site Scripting (XSS) Prevention,136\n138,Input Validation Techniques,136\n139,Authentication Methods,136\n140,Authorization Concepts,136\n141,Data Privacy Laws,136\n142,User Data Handling,141\n143,Ethical Considerations in AI,11\n144,AI Bias Awareness,143\n145,Responsible AI Use,144\n146,Future Trends in AI,145\n147,Emerging Technologies in Education,146\n148,Lifelong Learning Strategies,147\n149,Career Opportunities in AI,148\n150,The Future of MicroSims,13|146\n</code></pre>"},{"location":"sims/learning-graph-v1/04-taxonomy/","title":"Concept Taxonomy","text":"<pre><code>Next, let's Create a taxonomy to classify these concepts.\nFor the list of concepts, please suggest a taxonomy\nof up to ten categories on how to classify each concept.\n\nFor example:\n\n1. Foundational Concepts\n2. Why MicroSims\n3. HTML,CSS and JavaScript\n4. Prompt Design\n5. P5.js Basics\n\netc.\n\nNote tha the number in this list will be called a CategoryID\n\nFirst, Create the list of categories.\n\nThen return a new version of the CSV file with one new column.  This column contains the CategoryID for each concept.\n</code></pre>"},{"location":"sims/learning-graph-v1/04-taxonomy/#chatgpt-response","title":"ChatGPT Response","text":"<ol> <li>Foundational Concepts**</li> <li>Introduction to MicroSims and AI in Education**</li> <li>p5.js Basics</li> <li>Advanced p5.js Features</li> <li>AI Prompt Engineering and Interaction</li> <li>Version Control and GitHub</li> <li>Web Development (HTML, CSS, JavaScript)</li> <li>Software Development Practices</li> <li>Future Trends and Ethical Considerations</li> <li>Deployment and Hosting</li> </ol>"},{"location":"sims/least-squares/","title":"Least Squares","text":"<p>Run Least Squares MicroSim V1</p>"},{"location":"sims/least-squares/#lesson-plan-for-high-school-algebra","title":"Lesson Plan for High School Algebra","text":"<p>Linear Functions: Understanding Slope and Intercept</p> <p>Duration: 50 minutes</p> <p>Grade Level: 9-10</p> <p>Subject: Algebra 1</p>"},{"location":"sims/least-squares/#learning-objectives","title":"Learning Objectives","text":"<p>By the end of this lesson, students will be able to:</p> <ul> <li>Define slope as a rate of change</li> <li>Explain the meaning of y-intercept in a linear function</li> <li>Identify how changes in slope and intercept affect the graph of a line</li> <li>Use an interactive visualization to explore linear functions</li> <li>Solve real-world problems involving slope and intercept</li> </ul>"},{"location":"sims/least-squares/#materials-needed","title":"Materials Needed","text":"<ul> <li>Interactive Slope-Intercept Visualization (p5.js application)</li> <li>Student devices (computers, tablets, or smartphones)</li> <li>Guided worksheet (printed or digital)</li> <li>Whiteboard/projector</li> </ul>"},{"location":"sims/least-squares/#prerequisite-knowledge","title":"Prerequisite Knowledge","text":"<ul> <li>Basic understanding of coordinate plane</li> <li>Ability to plot points on a graph</li> <li>Familiarity with the equation y = mx + b</li> </ul>"},{"location":"sims/least-squares/#lesson-outline","title":"Lesson Outline","text":""},{"location":"sims/least-squares/#1-introduction-5-minutes","title":"1. Introduction (5 minutes)","text":"<ul> <li>Begin with a real-world scenario: \"If you earn $15 per hour at your job, how would you calculate your total earnings?\"</li> <li>Discuss how the relationship between hours worked and money earned forms a linear relationship</li> <li>Introduce the lesson focus: understanding how slope and intercept affect linear functions</li> </ul>"},{"location":"sims/least-squares/#2-review-of-key-concepts-10-minutes","title":"2. Review of Key Concepts (10 minutes)","text":"<ul> <li>Review the slope-intercept form of a line: y = mx + b</li> <li>Define slope (m) as the rate of change (rise/run)</li> <li>Define y-intercept (b) as the point where the line crosses the y-axis (0,b)</li> <li>Demonstrate examples on the board with different values for m and b</li> </ul>"},{"location":"sims/least-squares/#3-interactive-exploration-15-minutes","title":"3. Interactive Exploration (15 minutes)","text":"<ul> <li>Introduce the Slope-Intercept Visualization tool</li> <li>Demonstrate how to use the sliders to change slope and intercept values</li> <li>Explain the visual elements:<ul> <li>Green points represent actual data points</li> <li>Purple points show where the line would predict those values</li> <li>Colored squares show the \"error\" or difference between actual and predicted points</li> </ul> </li> <li>Guided exploration:<ol> <li>What happens when the slope increases? Decreases? Becomes negative?</li> <li>What happens when the y-intercept changes?</li> <li>Can you find values that minimize the differences between actual and predicted points?</li> </ol> </li> </ul>"},{"location":"sims/least-squares/#4-pair-work-10-minutes","title":"4. Pair Work (10 minutes)","text":"<ul> <li>Students work in pairs using the visualization tool</li> <li>Challenge: Find the linear function that best fits the green data points</li> <li>Each pair should record their \"best fit\" values for slope and intercept</li> <li>Discuss strategy: How can you tell when you've found a good fit?</li> </ul>"},{"location":"sims/least-squares/#5-connection-to-real-world-applications-5-minutes","title":"5. Connection to Real-World Applications (5 minutes)","text":"<p>Discuss how the slope-intercept model applies to:</p> <ul> <li>Economics: price vs. quantity relationships</li> <li>Physics: distance vs. time in constant velocity</li> <li>Business: fixed costs (y-intercept) and variable costs (slope)</li> </ul> <p>Show how the colored squares relate to \"error\" in predictions</p>"},{"location":"sims/least-squares/#6-closure-and-assessment-5-minutes","title":"6. Closure and Assessment (5 minutes)","text":"<ul> <li>Quick check for understanding:<ul> <li>\"If a line has a slope of 2 and a y-intercept of -3, what is its equation?\"</li> <li>\"If a line has a negative slope, what does that tell us about the relationship?\"</li> </ul> </li> <li>Exit ticket: Students write one insight they gained from using the visualization</li> </ul>"},{"location":"sims/least-squares/#extension-activities","title":"Extension Activities","text":"<ul> <li>Challenge students to create their own set of points and find the best-fitting line</li> <li>Introduce the concept of \"least squares regression\" as a mathematical way to find the best fit</li> <li>Connect to data science concepts: predictions, error measurements, and model accuracy</li> </ul>"},{"location":"sims/least-squares/#differentiation","title":"Differentiation","text":"<ul> <li>Support: Provide a step-by-step guide for using the visualization tool</li> <li>Extension: Ask advanced students to modify the code to add new features or data points</li> </ul>"},{"location":"sims/least-squares/#assessment","title":"Assessment","text":"<ul> <li>Formative: Observation during interactive exploration and pair work</li> <li>Summative: Exit ticket responses and follow-up homework assignment</li> </ul>"},{"location":"sims/least-squares/#homework","title":"Homework","text":"<ul> <li>Complete practice problems involving writing equations in slope-intercept form</li> <li>Find a real-world example where a linear relationship exists and identify what the slope and intercept represent in that context</li> </ul>"},{"location":"sims/least-squares/#follow-up-lesson-ideas","title":"Follow-Up Lesson Ideas","text":"<ul> <li>Comparing linear vs. non-linear relationships</li> <li>Introduction to systems of linear equations</li> <li>Linear regression with larger datasets</li> </ul>"},{"location":"sims/least-squares/#lesson-plan-focusing-on-prediction-of-future-events","title":"Lesson Plan focusing on Prediction of Future Events","text":""},{"location":"sims/least-squares/#learning-objectives_1","title":"Learning Objectives","text":"<p>By the end of this lesson, students will be able to: - Define slope as a rate of change - Explain the meaning of y-intercept in a linear function - Identify how changes in slope and intercept affect the graph of a line - Use an interactive visualization to explore linear functions - Use a linear model to make predictions for new x-values - Evaluate the reliability of predictions using a linear model - Solve real-world problems involving slope and intercept</p>"},{"location":"sims/least-squares/#materials-needed_1","title":"Materials Needed","text":"<ul> <li>Interactive Slope-Intercept Visualization (p5.js application)</li> <li>Student devices (computers, tablets, or smartphones)</li> <li>Guided worksheet (printed or digital)</li> <li>Whiteboard/projector</li> </ul>"},{"location":"sims/least-squares/#prerequisite-knowledge_1","title":"Prerequisite Knowledge","text":"<ul> <li>Basic understanding of coordinate plane</li> <li>Ability to plot points on a graph</li> <li>Familiarity with the equation y = mx + b</li> </ul>"},{"location":"sims/least-squares/#lesson-outline_1","title":"Lesson Outline","text":""},{"location":"sims/least-squares/#1-introduction-5-minutes_1","title":"1. Introduction (5 minutes)","text":"<ul> <li>Begin with a real-world scenario: \"If you earn $15 per hour at your job, how would you calculate your total earnings?\"</li> <li>Discuss how the relationship between hours worked and money earned forms a linear relationship</li> <li>Introduce the lesson focus: understanding how slope and intercept affect linear functions</li> </ul>"},{"location":"sims/least-squares/#2-review-of-key-concepts-10-minutes_1","title":"2. Review of Key Concepts (10 minutes)","text":"<ul> <li>Review the slope-intercept form of a line: y = mx + b</li> <li>Define slope (m) as the rate of change (rise/run)</li> <li>Define y-intercept (b) as the point where the line crosses the y-axis (0,b)</li> <li>Demonstrate examples on the board with different values for m and b</li> </ul>"},{"location":"sims/least-squares/#3-interactive-exploration-15-minutes_1","title":"3. Interactive Exploration (15 minutes)","text":"<ul> <li>Introduce the Slope-Intercept Visualization tool</li> <li>Demonstrate how to use the sliders to change slope and intercept values</li> <li>Explain the visual elements:</li> <li>Green points represent actual data points</li> <li>Purple points show where the line would predict those values</li> <li>Colored squares show the \"error\" or difference between actual and predicted points</li> <li>Guided exploration:</li> <li>What happens when the slope increases? Decreases? Becomes negative?</li> <li>What happens when the y-intercept changes?</li> <li>Can you find values that minimize the differences between actual and predicted points?</li> </ul>"},{"location":"sims/least-squares/#4-pair-work-10-minutes_1","title":"4. Pair Work (10 minutes)","text":"<ul> <li>Students work in pairs using the visualization tool</li> <li>Challenge: Find the linear function that best fits the green data points</li> <li>Each pair should record their \"best fit\" values for slope and intercept</li> <li>Discuss strategy: How can you tell when you've found a good fit?</li> </ul>"},{"location":"sims/least-squares/#5-prediction-and-real-world-applications-10-minutes","title":"5. Prediction and Real-World Applications (10 minutes)","text":"<ul> <li>Discuss how the slope-intercept model applies to:</li> <li>Economics: price vs. quantity relationships</li> <li>Physics: distance vs. time in constant velocity</li> <li>Business: fixed costs (y-intercept) and variable costs (slope)</li> <li>Show how the colored squares relate to \"error\" in predictions</li> <li>Prediction activity:</li> <li>Given our current \"best fit\" line with slope m and intercept b, what would be the predicted y-value for:<ol> <li>x = 250 (a value within our current data range)</li> <li>x = 600 (a value outside our current data range)</li> </ol> </li> <li>Discuss the concept of interpolation vs. extrapolation</li> <li>Question: \"How confident are we in these predictions and why?\"</li> <li>Question: \"What factors might affect the accuracy of our predictions?\"</li> </ul>"},{"location":"sims/least-squares/#6-closure-and-assessment-5-minutes_1","title":"6. Closure and Assessment (5 minutes)","text":"<ul> <li>Quick check for understanding: </li> <li>\"If a line has a slope of 2 and a y-intercept of -3, what is its equation?\"</li> <li>\"If a line has a negative slope, what does that tell us about the relationship?\"</li> <li>\"Using the equation y = 0.5x + 25, predict the y-value when x = 120\"</li> <li>\"How would you use our linear model to predict a new value not shown on the graph?\"</li> <li>Exit ticket: Students write one insight they gained about using linear models for prediction</li> </ul>"},{"location":"sims/least-squares/#extension-activities_1","title":"Extension Activities","text":"<ul> <li>Challenge students to create their own set of points and find the best-fitting line</li> <li>Introduce the concept of \"least squares regression\" as a mathematical way to find the best fit</li> <li>Connect to data science concepts: predictions, error measurements, and model accuracy</li> </ul>"},{"location":"sims/least-squares/#differentiation_1","title":"Differentiation","text":"<ul> <li>Support: Provide a step-by-step guide for using the visualization tool</li> <li>Extension: Ask advanced students to modify the code to add new features or data points</li> </ul>"},{"location":"sims/least-squares/#assessment_1","title":"Assessment","text":"<ul> <li>Formative: Observation during interactive exploration and pair work</li> <li>Summative: Exit ticket responses and follow-up homework assignment</li> </ul>"},{"location":"sims/least-squares/#homework_1","title":"Homework","text":"<ul> <li>Complete practice problems involving writing equations in slope-intercept form</li> <li>Find a real-world example where a linear relationship exists and identify what the slope and intercept represent in that context</li> <li>Prediction challenge: Given the linear model y = 1.5x + 10:</li> <li>Predict values for x = 50, x = 100, and x = 150</li> <li>If you measured y = 85, what would be the corresponding x value?</li> <li>Create a real-world scenario where this model might be useful, and explain what the slope and intercept represent</li> <li>Explain a situation where this model might break down or become unreliable for predictions</li> </ul>"},{"location":"sims/least-squares/#follow-up-lesson-ideas_1","title":"Follow-Up Lesson Ideas","text":"<ul> <li>Comparing linear vs. non-linear relationships</li> <li>Introduction to systems of linear equations</li> <li>Linear regression with larger datasets</li> </ul>"},{"location":"sims/lissajous-figures/","title":"Lissajous Figures","text":"<p>Run the Lissajous MicroSim</p> <p>Edit the MicroSim with the p5.js Editor</p>"},{"location":"sims/lissajous-figures/#prompt","title":"Prompt","text":"<pre><code>Create a p5.js animation of Lissajous figures.\nMake one slider control the x-axis and one\nslider control the y-axis.\nDraw the figure on an aliceblue background.\n</code></pre>"},{"location":"sims/lissajous-figures/#chatgpt-o1-mini-response","title":"ChatGPT o1-mini Response","text":"<p>Sure! Below is a p5.js sketch that animates Lissajous figures with two sliders controlling the frequencies of the x-axis and y-axis respectively.</p>"},{"location":"sims/lissajous-figures/#lissajous-figures-overview","title":"Lissajous Figures Overview","text":"<p>Lissajous figures are complex harmonic motion patterns formed by combining two perpendicular oscillations. They are defined by the parametric equations:</p> \\[ \\begin{cases}    x(t) = A \\sin(a t + \\delta) \\\\\\\\    y(t) = B \\sin(b t) \\end{cases} \\] <p>where:</p> <ul> <li>A, B: Amplitudes in the x and y directions.</li> <li>a, b: Frequencies in the x and y directions.</li> <li>\u03b4: Phase shift between the two oscillations.</li> </ul> <p>In this sketch:</p> <ul> <li>Slider 1 controls the frequency <code>a</code> of the x-axis.</li> <li>Slider 2 controls the frequency <code>b</code> of the y-axis.</li> </ul>"},{"location":"sims/lissajous-figures/#setting-up-the-environment","title":"Setting Up the Environment","text":"<p>To run this sketch:</p> <ol> <li>Visit the p5.js online editor.</li> <li>Create a new sketch.</li> <li>Replace the existing code with the code provided below.</li> <li>Click the play button to see the animation.</li> </ol>"},{"location":"sims/lissajous-figures/#p5js-code","title":"p5.js Code","text":"<pre><code>let sliderXFreq, sliderYFreq;\nlet xFreq = 3;\nlet yFreq = 2;\nlet phase = 0;\nlet phaseSpeed = 0.02;\n\nfunction setup() {\n  createCanvas(600, 600);\n  background('aliceblue');\n\n  // Create sliders\n  createP('X-axis Frequency (a):');\n  sliderXFreq = createSlider(1, 10, xFreq, 1);\n  sliderXFreq.style('width', '580px');\n\n  createP('Y-axis Frequency (b):');\n  sliderYFreq = createSlider(1, 10, yFreq, 1);\n  sliderYFreq.style('width', '580px');\n\n  // Set drawing parameters\n  strokeWeight(2);\n  noFill();\n}\n\nfunction draw() {\n  background(255);\n\n  // Update frequencies from sliders\n  xFreq = sliderXFreq.value();\n  yFreq = sliderYFreq.value();\n\n  // Parameters for Lissajous\n  let A = width / 3;\n  let B = height / 3;\n  let delta = phase;\n\n  translate(width / 2, height / 2);\n\n  stroke(0, 100, 200);\n\n  beginShape();\n  for (let t = 0; t &lt; TWO_PI * 2; t += 0.01) {\n    let x = A * sin(xFreq * t + delta);\n    let y = B * sin(yFreq * t);\n    vertex(x, y);\n  }\n  endShape();\n\n  // Increment phase for animation\n  phase += phaseSpeed;\n}\n</code></pre>"},{"location":"sims/lissajous-figures/#explanation-of-the-code","title":"Explanation of the Code","text":"<ol> <li> <p>Variables Declaration:</p> </li> <li> <p><code>sliderXFreq</code> and <code>sliderYFreq</code>: Slider elements controlling the frequencies.</p> </li> <li><code>xFreq</code> and <code>yFreq</code>: Current frequencies for x and y axes.</li> <li><code>phase</code>: Phase shift to animate the figure.</li> <li> <p><code>phaseSpeed</code>: Speed at which the phase shifts over time.</p> </li> <li> <p><code>setup()</code> Function:</p> </li> <li> <p>Initializes the canvas.</p> </li> <li>Creates two sliders for controlling the x and y frequencies, each ranging from 1 to 10 with an initial value.</li> <li> <p>Sets the stroke weight and disables fill for drawing the Lissajous figure.</p> </li> <li> <p><code>draw()</code> Function:</p> </li> <li> <p>Clears the background each frame to redraw the figure.</p> </li> <li>Retrieves the current values from the sliders to update <code>xFreq</code> and <code>yFreq</code>.</li> <li>Defines amplitudes <code>A</code> and <code>B</code> based on canvas size.</li> <li>Translates the origin to the center of the canvas.</li> <li>Begins a new shape and iterates through values of <code>t</code> to plot the Lissajous figure using the parametric equations.</li> <li>Increments the <code>phase</code> to animate the figure over time.</li> </ol>"},{"location":"sims/lissajous-figures/#customization","title":"Customization","text":"<ul> <li>Amplitude Adjustment: You can add sliders to control the amplitudes <code>A</code> and <code>B</code> if desired.</li> <li>Phase Control: Introduce another slider to adjust the phase shift <code>delta</code> manually.</li> <li>Colors and Styles: Modify <code>stroke()</code> and <code>strokeWeight()</code> to change the appearance of the figure.</li> <li>Resolution: Adjust the increment in the <code>for</code> loop (<code>t += 0.01</code>) for smoother or faster rendering.</li> </ul>"},{"location":"sims/lissajous-figures/#live-demo","title":"Live Demo","text":"<p>For a live demo, you can copy the above code into the p5.js online editor and see the animation in action. Adjust the sliders to explore different Lissajous patterns!</p>"},{"location":"sims/logic-gates/","title":"Logic Gates","text":"<p>In this example, we will generate a graphical simulation of Boolean logic gates. This example shows how both \"AND\" and \"OR\" gates work.  You can easily change the prompt to perform other operations such as \"NOT\", \"NAND\" and \"NOR\".</p> <p>You will note that we are explicit on the horizontal line placement location.  Generative AI is not good at doing precise layout.</p> <p>Prompt:</p> <pre><code>Create a single p5.js sketch using a 400x400 canvas.  \nThe sketch is a simulation of two simple logic gates, one \"AND\" and one \"OR\".\nThere are two input wires on the left.  \nLabel the inputs \"A\" and \"B\" using size 16 black text.\nDraw input A as a horizontal line at y=50.\nDraw input B as a horizontal line at y=150.\nHave both input wires connect to both the \"AND\" and \"OR\" logic gates.  \nThe top gate is a Boolean \"AND\" operation.  \nThe bottom gate is a Boolean an \"OR\" operation.\nAdd two input toggle buttons on the left side to control the state of the inputs.\nInitialize the initial states of the inputs to be off. \nWhen a wire is high, draw it in red.  \nWhen a wire is at ground, draw it in black.\nPlace a label \"AND\" in size 16 point test on the \"AND\" gate.\nPlace a label \"OR\" in size 16 point text over the \"AND\" gate.\n</code></pre> <p>Link to Simulation Demo</p>"},{"location":"sims/logic-gates/#sample-code","title":"Sample Code","text":"<pre><code>let inputA = false;\nlet inputB = false;\nlet buttonA, buttonB;\n\nfunction setup() {\n  createCanvas(400, 400);\n\n  // Create input buttons for A and B\n  buttonA = createButton('Toggle A');\n  buttonA.position(10, 50);\n  buttonA.mousePressed(toggleA);\n\n  buttonB = createButton('Toggle B');\n  buttonB.position(10, 150);\n  buttonB.mousePressed(toggleB);\n}\n\nfunction draw() {\n  background(220);\n  textSize(24)\n\n  // Draw the labels\n  strokeWeight(0);\n  fill('black');\n  text('A', 30, 50);\n  text('B', 30, 150);\n\n\n  // Draw input wires\n  strokeWeight(5)\n  stroke(inputA ? 'red' : 'black');\n  line(75, 50, 150, 50);\n  line(75, 50, 150, 150);\n  stroke(inputB ? 'red' : 'black');\n  line(75, 150, 150, 150);\n  line(75, 150, 150, 50);\n\n  // Draw AND gate\n  fill(255);\n  stroke('black')\n  beginShape();\n  vertex(150, 20);\n  vertex(200, 20);\n  vertex(220, 50);\n  vertex(200, 80);\n  vertex(150, 80);\n  endShape(CLOSE);\n\n  strokeWeight(0);\n  fill('black');\n  textSize(24)\n  text('AND', 155, 60);\n\n  // Draw OR gate\n  fill(255);\n  strokeWeight(5);\n  stroke('black')\n  beginShape();\n  vertex(150, 120);\n  vertex(200, 120);\n  vertex(220, 150);\n  vertex(200, 180);\n  vertex(150, 180);\n  endShape(CLOSE);\n\n  strokeWeight(0);\n  fill('black');\n  text('OR', 155, 160);\n</code></pre>"},{"location":"sims/maze-gen/","title":"Maze Generator","text":"<p>Maze Generator Demo</p>"},{"location":"sims/maze-solver/","title":"Maze Solver","text":"<p>Run the Maze Solver MicroSim Edit this MicroSim</p>"},{"location":"sims/maze-solver/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/maze-solver/main.html\" \n   width=\"400px\" height=\"470\" scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/maze-solver/#lesson-plan-prompt-for-a-high-school-classroom","title":"Lesson Plan Prompt for a High-School Classroom","text":"<p>Prompt</p> <p>Based on the maze-solver-sketch.js file in this project, please generate a lesson plan for a high school student.  Describe how the maze is generated and solved using a depth-first-search algorithm.  Give pointers at using the MicroSim including how to move the speed to 0 to stop the solving process.</p>"},{"location":"sims/maze-solver/#lesson-plan","title":"Lesson Plan","text":"<p>Title: Maze Solver MicroSim: DFS Maze Generation and BFS Solving</p>"},{"location":"sims/maze-solver/#introduction","title":"Introduction","text":"<p>The Maze Solver MicroSim is an interactive tool to help you visualize both maze generation and maze solving algorithms. This simulation creates mazes using Depth-First Search (DFS) and solves them using Breadth-First Search (BFS). By interacting with the simulation, you'll gain a better understanding of these fundamental computer science algorithms.</p>"},{"location":"sims/maze-solver/#how-the-maze-is-generated-depth-first-search-dfs","title":"How the Maze is Generated: Depth-First Search (DFS)","text":"<p>The maze is created using a technique called \"Depth-First Search with backtracking\" which works like this:</p> <ol> <li>Start at the top-left cell and mark it as visited</li> <li>The algorithm then:<ul> <li>Looks for unvisited neighboring cells</li> <li>Randomly chooses one of these neighbors</li> <li>Removes the wall between the current cell and the chosen neighbor</li> <li>Moves to that neighbor and marks it as visited</li> <li>Adds the previous cell to a \"stack\" (like a trail of breadcrumbs)</li> </ul> </li> <li>If there are no unvisited neighbors:<ul> <li>The algorithm \"backtracks\" by popping a cell from the stack</li> <li>Continues the process from this new position</li> </ul> </li> <li>The algorithm completes when every cell has been visited</li> </ol> <p>This creates a \"perfect maze\" - one with no loops and exactly one path between any two points.</p>"},{"location":"sims/maze-solver/#how-the-maze-is-solved-breadth-first-search-bfs","title":"How the Maze is Solved: Breadth-First Search (BFS)","text":"<p>Once you press the \"Solve\" button, the simulation uses Breadth-First Search to find the shortest path from start to end:</p> <ol> <li>The solver starts at the top-left cell (green)</li> <li>It explores all possible neighboring cells by:<ul> <li>Checking all four directions (up, right, down, left)</li> <li>Only moving through paths without walls</li> <li>Marking visited cells in pink</li> </ul> </li> <li>BFS explores cells in \"waves\" moving outward from the start</li> <li>When the algorithm reaches the end cell (red), it traces back the path</li> <li>The final solution path is highlighted in yellow</li> </ol> <p>BFS guarantees finding the shortest possible path through the maze.</p>"},{"location":"sims/maze-solver/#using-the-microsim","title":"Using the MicroSim","text":""},{"location":"sims/maze-solver/#controls","title":"Controls","text":"<ul> <li>Solve Speed Slider: Controls how quickly the solving animation runs<ul> <li>Move it to the right for faster solving</li> <li>Move it all the way to the left (0) to pause the solving process</li> <li>Move it right again to continue from where you paused</li> </ul> </li> <li>Solve Button (Green): Begins the solving process<ul> <li>Changes to a \"Reset\" button (Red) while solving or after solution is found</li> </ul> </li> <li>New Maze Button (Blue): Generates a completely new random maze</li> </ul>"},{"location":"sims/maze-solver/#experiment-ideas","title":"Experiment Ideas","text":"<ol> <li>Generate several different mazes and observe the patterns</li> <li>Pause the solving process (speed = 0) midway to analyze the BFS search pattern</li> <li>Compare how quickly different mazes can be solved</li> <li>Look for the areas that the algorithm explores but that don't become part of the final path</li> </ol>"},{"location":"sims/maze-solver/#key-computer-science-concepts","title":"Key Computer Science Concepts","text":"<ol> <li>Graph Traversal: Both DFS and BFS are fundamental ways to explore connected structures (graphs)</li> <li>Randomized Algorithms: The maze generator uses randomness to create unique mazes each time</li> <li>Backtracking: The DFS algorithm uses backtracking to explore all possible paths</li> <li>Queue vs. Stack: The maze generator uses a stack (Last-In-First-Out) while the solver uses a queue (First-In-First-Out)</li> <li>Path Finding: BFS is optimal for finding the shortest path in an unweighted graph</li> </ol> <p>Challenge</p> <ol> <li>Why does BFS guarantee the shortest path while DFS doesn't?</li> <li>What changes would you make to use DFS instead of BFS for solving?</li> <li>How might you modify the code to create mazes with multiple possible solutions?</li> <li>Can you think of real-world applications that use these same algorithms?</li> </ol> <p>Understanding these maze algorithms provides excellent preparation for studying more advanced topics in computer science, including artificial intelligence, network routing, and game development.</p>"},{"location":"sims/mobile-buttons/","title":"Mobile Compatible Buttons","text":""},{"location":"sims/mobile-buttons/#native-p5js-buttons","title":"Native p5.js Buttons","text":"<p>Using the native p5.js createButton() function is indeed an excellent alternative that would solve your iPhone compatibility issues. This approach has several advantages:</p> <p>Using p5.js's built-in createButton() function offers several advantages over canvas-drawn buttons:</p> <ol> <li> <p>Native touch support: The buttons are actual HTML elements that work correctly on all devices including iPhones, with no special handling needed for touch events.</p> </li> <li> <p>Accessibility: HTML buttons are keyboard-accessible and work with screen readers, making your application more accessible.</p> </li> <li> <p>Styling flexibility: You can easily style the buttons using CSS properties like in the example code.</p> </li> <li> <p>Cleaner interaction code: You don't need to track mouse/touch positions and check bounds - just use the mousePressed() callback function.</p> </li> <li> <p>State management: You can easily show/hide buttons based on the application state using the show() and hide() methods.</p> </li> </ol> <p>The key changes in this implementation:</p> <ul> <li>Created HTML buttons with createButton() instead of drawing them on the canvas</li> <li>Added button event handlers (startSolving, resetMaze, createNewMaze)</li> <li>Implemented show/hide logic for the buttons based on the application state</li> <li>Added CSS styling to make the buttons visually appealing</li> </ul> <p>This approach should work perfectly on iPhones and all other devices without requiring any special handling for touch events.</p>"},{"location":"sims/mobile-buttons/#creating-rect-buttons","title":"Creating Rect Buttons","text":"<p>There common issue with canvas-based interactions on mobile devices like iPhones running the Apple Safari Browser. The problem stems from how touch events differ from mouse events. Here are the key issues and solutions:</p> <ol> <li>Mobile Safari on iPhone processes touch events differently than mousePressed() events</li> <li>The coordinates might be off due to different handling of touch positions</li> <li>Canvas scaling can affect the touch coordinate mapping</li> </ol> <p>To fix this, you should implement touch event handling alongside mouse events. Here's how to modify the maze solver code to work on iPhones:</p> <p>The key changes I've made to make the buttons work on iPhone:</p> <ol> <li>Created a shared <code>handleInteraction()</code> function that works with both mouse and touch coordinates</li> <li>Added proper touch event handlers: <code>touchStarted()</code>, <code>touchMoved()</code>, and <code>touchEnded()</code></li> <li>Prevented default touch behaviors that can interfere with canvas interactions</li> <li>Made the buttons slightly larger and more touch-friendly</li> <li>Added <code>pixelDensity(1)</code> to handle high-DPI displays properly</li> <li>Made the slider more touch-friendly with increased height</li> </ol> <p>These changes should make the maze solver work correctly on iPhones while maintaining compatibility with desktop browsers. The most important part is handling both mouse and touch events through a unified interaction handler.</p> <pre><code>// Function to handle both mouse and touch interactions\nfunction handleInteraction(px, py) {\n    // Check if clicked/touched on Solve button\n    if (px &gt; canvasWidth - 100 &amp;&amp; px &lt; canvasWidth - 20 &amp;&amp;\n        py &gt; drawHeight + 10 &amp;&amp; py &lt; drawHeight + 40) {\n\n        if (!solving &amp;&amp; solutionPath.length === 0) {\n            // Start solving\n            resetSolving();\n            solving = true;\n        } else {\n            // Reset if already solving or solved\n            resetSolving();\n        }\n        return;\n    }\n\n    // Check if clicked/touched on New Maze button\n    if (px &gt; canvasWidth - 190 &amp;&amp; px &lt; canvasWidth - 110 &amp;&amp;\n        py &gt; drawHeight + 10 &amp;&amp; py &lt; drawHeight + 40) {\n\n        createMaze();\n        generateMaze();\n        resetSolving();\n    }\n}\n\n// Original mouse event handler\nfunction mousePressed() {\n    handleInteraction(mouseX, mouseY);\n}\n\n// Add touch event handlers\nfunction touchStarted() {\n    // Get the touch coordinates relative to the canvas\n    if (touches.length &gt; 0) {\n        handleInteraction(touches[0].x, touches[0].y);\n    }\n    // Prevent default touch behavior to avoid scrolling\n    return false;\n}\n\n// Optional: Add additional touch support for mobile\nfunction touchMoved() {\n    // Prevent default to disable page scrolling when touching canvas\n    return false;\n}\n\n// Fix for slider interaction on mobile\nfunction touchEnded() {\n    // Allow default behavior for sliders\n    if (mouseX &gt; margin &amp;&amp; mouseX &lt; canvasWidth - margin &amp;&amp;\n        mouseY &gt; drawHeight + 30 &amp;&amp; mouseY &lt; drawHeight + 50) {\n        return true;\n    }\n    return false;\n}\n\n// In setup, add this code to properly position canvas on mobile\nfunction setup() {\n    const canvas = createCanvas(canvasWidth, canvasHeight);\n    var mainElement = document.querySelector('main');\n    canvas.parent(mainElement);\n    textSize(defaultTextSize);\n\n    // Handle high-DPI displays for better text rendering\n    pixelDensity(1);\n\n    // Create solver speed slider with touch-friendly size\n    solveSpeedSlider = createSlider(0, 60, 8, 1);\n    solveSpeedSlider.position(margin, drawHeight + 40);\n    solveSpeedSlider.size(canvasWidth - 2*margin);\n    // Make the slider touch-friendly\n    solveSpeedSlider.style('height', '20px');\n\n    // Initialize maze\n    cols = floor((canvasWidth - 2*margin) / cellSize);\n    rows = floor((drawHeight - 2*margin) / cellSize);\n\n    createMaze();\n    generateMaze();\n\n    start = grid[0][0];\n    end = grid[cols-1][rows-1];\n\n    resetSolving();\n}\n\n// In drawUI, make buttons larger and more touch-friendly\nfunction drawUI() {\n    // Draw controls and labels\n    fill(0);\n    text(\"Solve Speed: \" + solveSpeed, margin, drawHeight + 25);\n\n    // Green \"Solve\" button with larger touch area\n    if (!solving &amp;&amp; solutionPath.length === 0) {\n        fill(0, 150, 0);\n        rect(canvasWidth - 100, drawHeight + 10, 80, 35);\n        fill(255);\n        textAlign(CENTER, CENTER);\n        text(\"Solve\", canvasWidth - 60, drawHeight + 27);\n        textAlign(LEFT, BASELINE);\n    }\n\n    // Maroon Reset button when running\n    if (solving || solutionPath.length &gt; 0) {\n        fill(150, 0, 0);\n        rect(canvasWidth - 100, drawHeight + 10, 80, 35);\n        fill(255);\n        textAlign(CENTER, CENTER);\n        text(\"Reset\", canvasWidth - 60, drawHeight + 27);\n        textAlign(LEFT, BASELINE);\n    }\n\n    // New Maze button\n    fill(0, 0, 150);\n    rect(canvasWidth - 200, drawHeight + 10, 90, 35);\n    fill(255);\n    textAlign(CENTER, CENTER);\n    text(\"New Maze\", canvasWidth - 155, drawHeight + 27);\n    textAlign(LEFT, BASELINE);\n}\n</code></pre>"},{"location":"sims/motor/","title":"Rotating Motor","text":"<p> Rotating Motor</p> <p>Rotating Motor Demo</p> <p>We want to animate a rotating motor as a circle.  The motor must have circular arrows on it that show the direction of the rotation of the motor.  The arrows must point clockwise when we are going forward and counter-clockwise when we are going in reverse.  Drawing arrows with a triangle at the end is easy.  But circular arrows that scale well up or down is a lot more challenging.</p> <p>In this lesson we will use \"decomposition\" to break this task down into steps:</p> <ol> <li>Draw the outline of a circle</li> <li>Draw arcs within the circle using the arc() function</li> <li>Draw arrows at the tips of the arcs</li> </ol> <p>We will use the translate(), scale(), and rotate() functions to perform this animation.</p>"},{"location":"sims/motor/#draw-rotating-motor","title":"Draw Rotating Motor","text":""},{"location":"sims/motor/#draw-motor","title":"Draw Motor","text":"<p>The key here is to be able to make the motor scale to any size.  We do this by doing the following three functions:</p> <ol> <li>translate() to the center of the motor</li> <li>scale the motor to the correct size</li> <li>rotate the motor so it appears to spin in the right direction</li> </ol> <pre><code>function drawMotor(x, y, scaleVal, angle, direction) {\n  angleMode(DEGREES);  // Change the mode to \n\n  // get ready to jump into a new reference frame\n  push();\n\n      // order is key\n      translate(x, y);\n      scale(scaleVal);\n      rotate(angle);\n\n      // gray\n      fill(180);\n      strokeWeight(2);\n      circle(0,0, 220)\n      strokeWeight(10);\n      stroke('black')\n      noFill();\n      // top circle x,y  w,h  start-ang, end-angle\n      arc(0, 0, 180, 180, 180, 310, OPEN);\n      // bottom circle\n      arc(0, 0, 180, 180,   0, 130, OPEN);\n\n      // forward\n      if (direction == 1) {\n        // up right\n        drawArrowTip(50,-75, 140)\n        // lower left\n        drawArrowTip(-60, 70, -30)\n      }\n      // reverse\n      if (direction == -1) {\n        // up right x,y, ang\n        drawArrowTip(90, 0, -20)\n        // lower left\n        drawArrowTip(-90, 0, 164)\n      }\n  pop();\n}\n</code></pre>"},{"location":"sims/motor/#draw-arrow-tip","title":"Draw Arrow Tip","text":"<p>We use the <code>translate()</code> and <code>rotate()</code> functions to first get into position.  Then we use the <code>triangle()</code> function to draw the triangle at the front of the arch.</p> <pre><code>function drawArrowTip(x, y, rotationAngle) {\n  push();  // Save the current drawing style and transformations\n     translate(x, y);  // Move the origin to the given location\n     rotate(rotationAngle);  // Rotate by the given angle\n     fill(0);  // Set the fill color to black\n     noStroke();  // Disable drawing an outline\n     // set the size\n     let sz = 20;\n     // lower right, top, lower left\n     triangle(sz, 0,  0,-3*sz,   -sz,0);  // Draw the arrow tip\n  pop();  // Restore the previous drawing style and transformations\n}\n</code></pre> <pre><code>// scale motor test\n// Goal: add a size to the motor drawing to not require only a fixed size hard coded in the draw.\n\nlet direction = 1;\nlet radiusSlider;\nlet angle = 0;\nlet circleRadius = 100; // default value\nlet myFrameRate = 24;\n\nfunction setup() {\n    const canvas = createCanvas(400, 400);\n    canvas.parent('canvas-container');\n    // this changes the entire layout\n\n\n    let forwardButton = createButton('Fwd');\n    forwardButton.position(10, height-20);\n    forwardButton.mousePressed(forward);\n\n    let stopButton = createButton('Stop');\n    stopButton.position(55, height-20);\n    stopButton.mousePressed(stop);\n\n    let reverseButton = createButton('Rev');\n    reverseButton.position(105, height-20);\n    reverseButton.mousePressed(turnReverse);\n\n    // radiusSlider = createSlider(0, 200, circleRadius);\n    scaleSlider = createSlider(.1, 2, 1, .1);\n    scaleSlider.position(215, height - 35);\n    scaleSlider.style('width', '180px');\n\n        // radiusSlider = createSlider(0, 200, circleRadius);\n    speedSlider = createSlider(0, 20, 5, .1);\n    speedSlider.position(215, height - 16);\n    speedSlider.style('width', '180px');\n    frameRate(myFrameRate);\n}\n\nfunction stop() {\n    direction = 0;\n  }\n\n  function forward() {\n    direction = 1;\n  }\n\n  function turnReverse() {\n    direction = -1;\n  }\n\nfunction draw() {\n     background(240);\n     // center axis\n     stroke(0);\n     line(0, height / 2, width, height / 2)\n     line(width / 2, 0, width/2, height)\n\n    // Update the circle radius based on slider value\n    scaleVal = scaleSlider.value();\n    motorSpeed = speedSlider.value();\n\n    // Center the motor on the canvas\n    angle += direction * motorSpeed;\n    // x,y, scale,  angle, dir, speed\n    drawMotor(width / 2, height / 2, scaleVal, angle, direction)\n\n    // Draw the label and the current radius value\n    stroke(0);\n    strokeWeight(0);\n    fill(0); // black color for the text\n    text(\"Scale: \" + scaleVal, 140, height - 30);\n    text(\"Speed: \" + motorSpeed, 140, height - 10);\n}\n\nfunction drawMotor(x, y, scaleVal, angle, direction) {\n  angleMode(DEGREES);  // Change the mode to \n  push();\n\n      // order is key\n      translate(x, y);\n      scale(scaleVal);\n      rotate(angle);\n\n      // gray\n      fill(180);\n      strokeWeight(2);\n      circle(0,0, 220)\n      strokeWeight(10);\n      stroke('black')\n      noFill();\n      // top circle x,y  w,h  start-ang, end-angle\n      arc(0, 0, 180, 180, 180, 310, OPEN);\n      // bottom circle\n      arc(0, 0, 180, 180,   0, 130, OPEN);\n\n      // forward\n      if (direction == 1) {\n        // up right\n        drawArrowTip(50,-75, 140)\n        // lower left\n        drawArrowTip(-60, 70, -30)\n      }\n      // reverse\n      if (direction == -1) {\n        // up right x,y, ang\n        drawArrowTip(90, 0, -20)\n        // lower left\n        drawArrowTip(-90, 0, 164)\n      }\n  pop();\n}\n\n// draw a triangle with a base at (x,y) in the direction of rotationAngle\nfunction drawArrowTip(x, y, rotationAngle) {\n  push();  // Save the current drawing style and transformations\n    translate(x, y);  // Move the origin to the given location\n    rotate(rotationAngle);  // Rotate by the given angle\n    fill(0);  // Set the fill color to black\n    noStroke();  // Disable drawing an outline\n    // set the size of the triangle\n    let sz = 10;\n    // lower right, top, lower left\n    triangle(sz, 0,  0,-3*sz,   -sz,0);  // Draw the arrow tip\n  pop();  // Restore the previous drawing style and transformations\n}\n</code></pre>"},{"location":"sims/named-colors/","title":"Named Colors","text":"Named colors. <p>Link to Demo</p>"},{"location":"sims/named-colors/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to use a list of 140 named colors to change the fill color of a rectangle.</p>"},{"location":"sims/named-colors/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/neopixel/","title":"NeoPixel Simulation","text":"Figure caption. <p>Link to NeoPixel Demo</p>"},{"location":"sims/neopixel/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how the NeoPixel works to convert a stream of rgb values into color setting for each pixel.</p> <pre><code>Please create a single file p5.js sketch for downloading. \nUse a canvas variables of canvasWidth=600 and canvasHeight=200 as global variables.\nThe sketch is a simulation of how a NeoPixel works moving red, green and blue values through a data signal.\nThe sketch has a set of four rectangles moving from left to right.\nThe rectangles are 60 pixels wide and 20 pixels high.\nEach rectangle has three circles within it.  One is red, one is blue and one is green. The circles have a radius of 10.\nThe values of the red, green and blue colors are randomly created from a range of 0 to 255.\nAs the rectangles reach a neopixel the first rectangle is pulled off and the rest continue on the data line.\nA circle of radius 50 is used to represent the NeoPixel being shown in the center.  It will get the values of each rectangle as they pass above it.\nAdd buttons at the bottom of the canvas for start, step and stop and reset the simulation.\n</code></pre>"},{"location":"sims/neural-network/","title":"Neural Network","text":"<p>Generate a p5.js file that draws a three layer neural network.  The input is on the left.  The output is on the right. The layer on the left should be labeled \"Input\". add slider controls that change the number of layers and the number of neurons in a layer</p> <p>Link to Chat Transcript</p> <p>Link to Demo</p> <pre><code>// Demo of parameters in neural networks\nlet width = 800;\nlet height = 400;\nlet numLayersSlider;\nlet numNeuronsSlider;\nlet parameterCount = 0;\nlet labelValueWidth = 240;\n\nlet numLayers = 3;  // Default number of layers (including Input and Output)\nlet numNeurons = 4; // Default number of neurons in each layer\n\nfunction setup() {\n  const canvas = createCanvas(width, height);\n  canvas.parent('canvas-container');\n\n  numLayersSlider = createSlider(2, 7, 3);\n  numLayersSlider.position(labelValueWidth, height - 50);\n  numLayersSlider.style('width', width - labelValueWidth - 20 + 'px')\n  numLayersSlider.input(updateNetwork);\n\n\n  numNeuronsSlider = createSlider(2, 10, 4);\n  numNeuronsSlider.position(labelValueWidth, height - 25);\n  numNeuronsSlider.input(updateNetwork);\n\n  updateNetwork();\n}\n\nfunction updateNetwork() {\n  background(240);\n\n  numLayers = numLayersSlider.value();\n  numNeurons = numNeuronsSlider.value();\n\n  let layerPositions = Array.from({length: numLayers}, (_, i) =&gt; map(i, 0, numLayers - 1, 0.2, 0.8) * width);\n\n  parameterCount = 0;\n\n  for (let i = 0; i &lt; layerPositions.length; i++) {\n    let label = \"Hidden\";\n    if (i === 0) label = \"Input\";\n    else if (i === layerPositions.length - 1) label = \"Output\";\n\n    drawNodes(layerPositions[i], height / 2, numNeurons, label);\n  }\n\n  for (let i = 0; i &lt; layerPositions.length - 1; i++) {\n    connectLayers(layerPositions[i], height / 2, numNeurons, layerPositions[i + 1], height / 2, numNeurons);\n    parameterCount += numNeurons * numNeurons; // Adding weights\n  }\n\n  parameterCount += (numLayers - 1) * numNeurons; // Adding biases\n\n  // Show labels and parameter count\n  textSize(16);\n  // textAlign(LEFT, CENTER);\n  text('Number of Layers: ' + numLayers, 70, numLayersSlider.y);\n  text('Number of Neurons/Layer: ' + numNeurons, 70 * 1.5, numNeuronsSlider.y);\n\n  textAlign(CENTER, CENTER);\n  text('Total Parameter Count: ' + parameterCount, width / 2, height - 20);\n}\n\nfunction drawNodes(x, y, numNodes, label) {\n  let gap = 40;\n  let startY = y - ((numNodes - 1) * gap) / 2;\n  for (let i = 0; i &lt; numNodes; i++) {\n    ellipse(x, startY + i * gap, 20, 20);\n  }\n  textSize(16);\n  textAlign(CENTER, CENTER);\n  text(label, x, y + ((numNodes + 1) * gap) / 2);\n}\n\nfunction connectLayers(x1, y1, numNodes1, x2, y2, numNodes2) {\n  let gap1 = 40;\n  let gap2 = 40;\n  let startY1 = y1 - ((numNodes1 - 1) * gap1) / 2;\n  let startY2 = y2 - ((numNodes2 - 1) * gap2) / 2;\n  for (let i = 0; i &lt; numNodes1; i++) {\n    for (let j = 0; j &lt; numNodes2; j++) {\n      line(x1, startY1 + i * gap1, x2, startY2 + j * gap2);\n    }\n  }\n}\n</code></pre>"},{"location":"sims/particle-fields/","title":"Particle Fields","text":"Figure caption. <p>Link to Demo</p>"},{"location":"sims/particle-fields/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to display particles and their interactions.</p>"},{"location":"sims/particle-fields/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/particle-fields/#sample-response","title":"Sample Response","text":"<pre><code>let canvasHeight = 400;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\nfunction setup() {\nconst canvas = createCanvas(canvasWidth, canvasHeight);\n  canvas.parent('canvas-container');\n  fill(245);\n  rect(0,0, canvasWidth, canvasHeight);\n  fill('green');\n  circle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/particle-fields/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/particle-fields/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/particle-fields/#activities","title":"Activities","text":""},{"location":"sims/particle-fields/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/particle-fields/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/particle-fields/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/particle-fields/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/particle-fields/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"},{"location":"sims/pendulum/","title":"Pendulum","text":"<p>Edit</p> <p>ToDo: Plot the period of the swing</p>"},{"location":"sims/polygon/","title":"Polygon","text":"<p>Run Polygon MicroSim</p> <p>In this example, we will use a more detailed prompt to control the placement of the sliders and their values.</p> <pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/polygon/main.html\" height=\"400\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/polygon/#prompt","title":"Prompt","text":"<pre><code>Generate a p5.js sketch file that draws filled polygons on a 400x400 canvas.\n\nCreate one range control slider that allows the number of points on\nthe polygon to vary from 3 to 10 in steps of 1.  Make the default be 10.\n\nCreate a second range control slider that allows the color inside the polygon\nto be changed to any color.  Make the default value be 170 (blue).\n\nMake the sliders be the width of the canvas less the width of the\nlabels and values.  Place the sliders at the bottom\nof the canvas 100 points in from the left.\n\nUse the text() function at the end of the draw() function to display the\nname and current values of the sliders in the bottom left of the screen.\n</code></pre>"},{"location":"sims/polygon/#sample-response","title":"Sample Response","text":"<p>This sample code has been manually edited to improve the placement and formatting of the controls.</p> <pre><code>// A MicroSim of drawing a polygon.  Sliders controls the number of edges and the color.\nlet canvasSize = 400;\nlet polygonRadius = 150\nlet colorSlider;\nlet pointSlider;\nlet drawHeight = 350;\nlet sliderLeftMargin = 140;\n\nfunction setup() { \n    const canvas = createCanvas(canvasSize, canvasSize);\n    canvas.parent('canvas-container');\n    textSize(16);\n    noStroke();\n    strokeWeight(0);\n    // Change the default color scheme from RGB to Hue, Saturation and Brightness\n    colorMode(HSB, 255);\n\n    // number of points (or edges) in polygon\n    pointSlider = createSlider(3, 20, 10);\n    pointSlider.position(sliderLeftMargin, canvasSize - 35);\n    pointSlider.style('width', width - sliderLeftMargin + 'px')\n\n    colorSlider = createSlider(0, 255, 170);\n    colorSlider.position(sliderLeftMargin, canvasSize - 15);\n    colorSlider.style('width', width - sliderLeftMargin + 'px')\n}\n\nfunction draw() {\n    fill(230);\n    rect(0, 0, width, drawHeight);\n    fill(245);\n    rect(0, drawHeight, width, canvasSize-drawHeight);\n    let colorValue = colorSlider.value();\n    let pointValue = pointSlider.value();\n\n    // Draw the polygon, HSB\n    fill(colorValue, 255, 255);\n    beginShape();\n    for (let i = 0; i &lt; pointValue; i++) {\n        // walk around the 360 angles\n        let angle = map(i, 0, pointValue, 0, TWO_PI);\n        let x = canvasSize/2 + polygonRadius * cos(angle);\n        let y = drawHeight/2 + polygonRadius * sin(angle);\n        vertex(x, y);\n    }\n    endShape(CLOSE);\n\n    // Draw the slider values\n    fill('black');\n    noStroke(); \n    strokeWeight(0);\n    text(\"Point Value: \" + pointValue, 5, canvasSize - 25);\n    text(\"Color Value: \" + colorValue, 5, canvasSize - 5);  \n}\n</code></pre>"},{"location":"sims/polygon/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/polygon/#activities","title":"Activities","text":""},{"location":"sims/polygon/#add-slider","title":"Add Slider","text":"<p>Add a new slider to control the radius of the polygon.</p>"},{"location":"sims/prisoners-dilemma/","title":"Prisoners Dilemma","text":""},{"location":"sims/prisoners-dilemma/#microsim-template","title":"MicroSim Template","text":"Figure caption. <p>Link to MicroSim</p>"},{"location":"sims/prisoners-dilemma/#about-this-microsim","title":"About this MicroSim","text":""},{"location":"sims/prisoners-dilemma/#sample-prompt","title":"Sample Prompt","text":"<p><pre><code>Create a p5.js sketch that illustrates \"The Prisoners Dilemma\" in game theory.  \n\nAdd two rectangles at height 50 labeled \"Prisoner A\" and \"Prisoner B\".\nCenter 24 point text in each rectangle.\nPlace two buttons under each prisoner.\nLabel one button \"Remain Silent\" and one \"Confess\".\nShow the outcome of each button press below in a 2x2 grid.\nUpdates to the last choices made by the prisoners when buttons are pressed.\nOutcome logic updates based on the combination of choices.\nVisual feedback with a red box highlighting the current outcome based on the last choices made.\nOrganized layout that clearly shows the prisoners' choices and the corresponding outcomes.\n</code></pre> GPT Dialog</p> <p>Wikipedia</p>"},{"location":"sims/pwm/","title":"Pulse-Width Modulation","text":"<p>Run the Pulse-Width Modulation Demo</p> <p>Pulse-width modulation is the way for microcontrollers to send a precise signal to a  device such as a motor controller to control motor speed.  PWM signals can also be used to change the brightness of an LED. This simulation has a slider that allows the user to change the \"duty cycle\" of a waveform.  The simulation is a bright green line on a black background, just like the old CRT oscilloscope displays.</p>"},{"location":"sims/pwm/#sample-chatgpt-prompt","title":"Sample ChatGPT Prompt","text":"<pre><code>Generate a p5.js sketch file of a simulation of a static pulse width\n   modulation (PWM) waveform on a 600x300 canvas.\nAdd a range control slider to adjust the Duty Cycle of the waveform.\nMake the default Duty Cycle be 50%.\nThe min should be 0% and the max should be 100%.\nPlace the range control slider at the bottom of the canvas.\nMake the leftSliderMargin be 155.\nMake sure the range control slider has a width of canvasWidth-leftSliderMargin-20 using the \n   style attribute.\nAt the end of the draw() function add a text() function that displays\n   the label and value of the duty cycle.\n</code></pre> <p>I have tested this prompt several times using GPT-4 and it seems to work very well except for the precise layout of the duty cycle label, value and slider positioning. I had to tweak these by hand.</p> <p>Edit This MicroSim Using the P5.js Editor</p>"},{"location":"sims/pwm/#sample-response","title":"Sample Response","text":"<pre><code>/// Pulse Wave Modulation (PWM) simulation\n// Made to render like an old oscilloscope - lime green on black\n// Most of this sim was generated by GPT-4 with some cleanup on placement of the slider\nlet canvasWidth = 600;\nlet canvasHeight = 200;\nlet dutyCycleSlider;\nlet dutyCycle = 0.5; // Initialize to 50%\nlet cycles = 6;\nlet waveHeight = canvasHeight/3;\nlet leftSliderMargin = 155; // at 16 point font\n\nfunction setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  // uncomment if you are placing in an HTML page\n  // canvas.parent('canvas-container');\n  textSize(16);\n\n  dutyCycleSlider = createSlider(0, 1, 0.5, 0.01); // Range from 0 to 1, default value 0.5, step size 0.01\n  dutyCycleSlider.position(leftSliderMargin, canvasHeight - 35); // Position slider\n  dutyCycleSlider.style('width', canvasWidth - leftSliderMargin - 20 + 'px'); // Set width of slider\n}\n\nfunction draw() {\n  background('black');\n\n  // Update duty cycle\n  dutyCycle = dutyCycleSlider.value();\n\n  // Set stroke for waveform\n  stroke('limegreen');\n  // disable the fill in the waveform\n  noFill();\n  // make the line be double wide\n  strokeWeight(2);\n\n  // Generate PWM waveform\n  beginShape();\n  for (let x = 0; x &lt; width; x++) {\n    // Map x to time period of waveform\n    let t = map(x, 0, width, 0, TWO_PI * cycles);\n\n    // Calculate value of waveform at this point in time\n    // Draw high if in duty cycle, low otherwise\n    let y = (sin(t) &gt; 2 * dutyCycle - 1) ? \n        2*height/3 : height/3; \n\n    // Add vertex to waveform\n    vertex(x, y);\n  }\n  endShape();\n\n  // Display duty cycle\n  fill('white');\n  noStroke();\n  // Display duty cycle as percentage\n  text(\"Duty Cycle: \" + nf(dutyCycle*100, 0, 0) + \"%\", 20, height - 20); \n}\n</code></pre>"},{"location":"sims/pwm/#key-learnings-from-the-simulation","title":"Key Learnings from the Simulation","text":"<ol> <li>We can use the <code>map()</code> function to transform the x coordinate into the time period of a waverform (t.)</li> <li>We can draw a square wave using a <code>sin()</code> function with a threshold test.</li> <li>We can use the <code>beginShape()</code> and <code>endShape()</code> around as set of <code>vertex()</code> point placements to generate waveforms.</li> <li>We can use the \"number format\" function <code>nf()</code>  to display the percentage without a decimal point.</li> </ol>"},{"location":"sims/pwm/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/pwm/#lesson-plan-prompt","title":"Lesson Plan Prompt","text":"<pre><code>I have a webpage that simulates a pulse-width-modulation waveform. \nThe page has a slider that allows students to change the duty cycle from 0% to 100%.\nWhen the students change the slider, the waveform is updated with the duty cycle.\nGenerate a lesson plan for a 9th-grade robotics class that uses this simulation.\nFor follow up activities, we have Raspberry Pi Picos that we program with MicroPython.\nReturn the response in a single raw markdown file.\n</code></pre>"},{"location":"sims/pwm/#lesson-plan-understanding-pulse-width-modulation-in-robotics","title":"Lesson Plan: Understanding Pulse-Width Modulation in Robotics","text":""},{"location":"sims/pwm/#objective","title":"Objective:","text":"<p>Students will understand the concept of PWM and its application in controlling robotic components like motors and LEDs.</p>"},{"location":"sims/pwm/#materials-needed","title":"Materials Needed:","text":"<ul> <li>Computers with internet access for the PWM simulation webpage.</li> <li>Projector for demonstrations.</li> <li>Optional: Physical components such as a small motor, LED, and Arduino for real-world demonstration.</li> </ul>"},{"location":"sims/pwm/#duration","title":"Duration:","text":"<p>1 hour</p>"},{"location":"sims/pwm/#lesson-outline","title":"Lesson Outline:","text":""},{"location":"sims/pwm/#1-introduction-to-pwm-15-minutes","title":"1. Introduction to PWM (15 minutes)","text":"<ul> <li>Begin with a brief overview of PWM and its significance in robotics.</li> <li>Explain key terms: duty cycle, frequency, analog vs. digital signals.</li> </ul>"},{"location":"sims/pwm/#2-demonstration-of-pwm-simulation-10-minutes","title":"2. Demonstration of PWM Simulation (10 minutes)","text":"<ul> <li>Project the PWM simulation on the screen.</li> <li>Show how changing the duty cycle affects the waveform.</li> <li>Relate this to how it would affect a motor's speed or an LED's brightness.</li> </ul>"},{"location":"sims/pwm/#3-hands-on-activity-with-the-simulation-20-minutes","title":"3. Hands-On Activity with the Simulation (20 minutes)","text":"<ul> <li>Students will use the simulation on their computers.</li> <li>Tasks:</li> <li>Set the duty cycle to various levels (0%, 25%, 50%, 75%, 100%) and observe changes.</li> <li>Students note their observations regarding the waveform changes.</li> </ul>"},{"location":"sims/pwm/#4-real-world-application-discussion-10-minutes","title":"4. Real-World Application Discussion (10 minutes)","text":"<ul> <li>Discuss how PWM is used in real-world robotics.</li> <li>If available, demonstrate using a motor or LED with an Arduino.</li> <li>Encourage students to think of examples where PWM might be used in everyday technology.</li> </ul>"},{"location":"sims/pwm/#5-reflection-and-qa-5-minutes","title":"5. Reflection and Q&amp;A (5 minutes)","text":"<ul> <li>Encourage students to ask questions.</li> <li>Discuss the importance of PWM in precise control in robotics.</li> </ul>"},{"location":"sims/pwm/#assessment","title":"Assessment:","text":"<ul> <li>Students will submit a brief report on their findings from the simulation.</li> <li>Include a few quiz questions at the end of the session to gauge understanding.</li> </ul>"},{"location":"sims/pwm/#extension-activity","title":"Extension Activity:","text":"<ul> <li>For advanced students or as a follow-up lesson, introduce a Python program that uses PWM to control a motor speed using a motor driver chip such as an L293D or control an LED brightness.</li> </ul>"},{"location":"sims/pwm/#notes","title":"Notes:","text":"<ul> <li>Ensure that all students understand the basic concepts before moving to the hands-on activity.</li> <li>Assist students who might have difficulty with the simulation or concepts.</li> <li>Encourage group discussions and peer learning.</li> </ul>"},{"location":"sims/rabbits-and-foxes/","title":"Rabbits and Foxes","text":"<p>Note</p> <p>This is a work in progress.  Both these MicroSims have bugs</p> <p>Rabbits and Foxes Random Motion</p> <p>Rabbits and Foxes Streight Line Motion Version 2</p>"},{"location":"sims/recursion-tree/","title":"Recursion Tree","text":"<p>Recursion trees are ideal ways to demonstrate recursive programming. In a recursive program, a function calls itself repeatedly. The result is often a beautiful complex image generated from a very small program.</p> <p>Run Recursion Tree MicroSim Edit the MicroSim</p>"},{"location":"sims/recursion-tree/#prompt","title":"Prompt","text":"<p>Prompt</p> <p>Generate a single file p5.js sketch on a 400x400 canvas.   Generate a drawing of a tree that uses recursion.   Add a slider that changes the angle between the branches of the tree.</p>"},{"location":"sims/recursion-tree/#response","title":"Response","text":"<p>Creating a p5.js sketch that draws a recursive tree with a slider to adjust the angle between branches involves a few key steps. Here's a basic outline of the code:</p> <ol> <li>Setup the Canvas: Initialize a 400x400 canvas using createCanvas(400, 400) in the setup() function.</li> <li>Create a Slider: Create a slider for the branch angle using createSlider() and position it on the canvas.</li> <li>Draw the Tree: Use a recursive function to draw the tree in the draw() function. The angle between branches will be controlled by the slider's value.</li> <li>Recursive Function: The recursive function will draw a line for the branch and then call itself twice to draw the two smaller branches at the specified angle.</li> </ol> <pre><code>let angleSlider;\n\nfunction setup() {\n  const canvas = createCanvas(400, 400);\n  canvas.parent('canvas-container');\n  angleSlider = createSlider(0, TWO_PI, PI / 4, 0.01);\n  angleSlider.position(10, height + 10);\n}\n\nfunction draw() {\n  background('aliceblue');\n  stroke(0);\n  translate(width / 2, height);\n  drawBranch(100);\n}\n\nfunction drawBranch(len) {\n  // draw branch from center up to len\n  line(0, 0, 0, -len);\n  // move up to end\n  translate(0, -len);\n\n  // if we have a long len\n  if (len &gt; 4) {\n    push();\n      // rotate coordinate system clockwise\n      rotate(angleSlider.value());\n      drawBranch(len * 0.67);\n    pop();\n\n    push();\n      // rotate coordinate system counter clockwise\n      rotate(-angleSlider.value());\n      drawBranch(len * 0.67);\n    pop();\n  }\n}\n</code></pre> <p>In this code:</p> <p>angleSlider is a global variable to hold the slider. In setup(), the canvas is created, and the slider is initialized. draw() continuously updates the canvas, translating the origin to the bottom center and then drawing the tree. drawBranch(len) is the recursive function. It draws a line, then moves to the end of that line. If the branch is long enough, it draws two smaller branches at angles determined by the slider. This code provides a basic recursive tree. You can enhance it with more features like changing the color, stroke weight, or the number of branches.</p>"},{"location":"sims/recursion-tree/#references","title":"References","text":"<ul> <li>Google Gemini Demo</li> <li>p5.js Examples</li> </ul>"},{"location":"sims/resize-in-iframe/","title":"Resize in iframe","text":"<p>Run Resize Width MicroSim</p> <p>Run Resize in iFrame MicroSim Edit in p5.js</p>"},{"location":"sims/resize-in-iframe/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"/microsims/sims/resize-in-iframe/resize-width.html\" height=\"400px\" scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre> <p>Note that this disables scrolling within the iframe.</p>"},{"location":"sims/resize-in-iframe/#prompt","title":"Prompt","text":"<pre><code>I would like to create a p5.js program that is aware of the width of \nthe HTML container element that it is executing within.  I want \nto do this because my users want to use my p5.js application within \nan HTML iframe that is placed in a central content region.\nOur user will run in many different sizes of windows.  \nBasically we want a responsive design for the width.\n\nPlease generate a p5.js program that displays the width and\nheight of the region that contains it\nin a 36 size.  Make the canvas background be aliceblue.\n\nAlso give guidance on how we should change the site CSS to style\nthe iframe that contains the p5.js program so it always expands\nto the width of the container it is running in and disables\nscrolling inside the iframe.\n\nAssume the standard p5.js HTML template that puts the container\nin a &lt;main&gt; element.\nAssume that the p5.js will fix the canvasHeight to be 400.\n</code></pre>"},{"location":"sims/resize-in-iframe/#response","title":"Response","text":"<pre><code>// Responsive width - resize to the width of the container\n\n// global variables\nlet container;\nlet canvasHeight = 400; // Maintain the fixed height\n\nfunction setup() {\n  // Select the container dynamically\n  container = document.querySelector('main');\n\n  // Create a canvas with the same width as the container and a fixed height\n  const canvasWidth = container.offsetWidth;\n  let canvas = createCanvas(canvasWidth, canvasHeight);\n\n  // Attach the canvas to the container\n  canvas.parent(container);\n\n  // Set text properties\n  textSize(36);\n  textAlign(CENTER, CENTER);\n  noLoop();\n}\n\nfunction draw() {\n  background('aliceblue');\n\n  // Display the canvas width and height as text in center of canvas\n  const canvasWidth = container.offsetWidth;\n  text(`Width: ${canvasWidth}px\\nHeight: ${height}px`, canvasWidth / 2, canvasHeight / 2);\n}\n\nfunction windowResized() {\n  // Update the canvas width when the window is resized\n  const canvasWidth = container.offsetWidth;\n  resizeCanvas(canvasWidth, canvasHeight);\n}\n</code></pre>"},{"location":"sims/resize-in-iframe/#explanation-of-the-code","title":"Explanation of the Code","text":"<p>This code is a p5.js sketch that creates a canvas sized to the width of a parent HTML container element but uses a fixed height. It also updates and redraws the canvas whenever the browser window is resized. Here's a line-by-line explanation of what's happening:</p>"},{"location":"sims/resize-in-iframe/#global-variables","title":"Global Variables","text":"<pre><code>let canvasWidth; // Will store the width of the container\nlet canvasHeight = 400; // A fixed height for the canvas\n</code></pre> <ul> <li>canvasWidth: This variable will be updated dynamically based on the <code>#p5-container</code> element's width.</li> <li>canvasHeight: This is fixed at 200 pixels. Unlike width, it won't change when the window is resized.</li> </ul>"},{"location":"sims/resize-in-iframe/#setup-function","title":"setup() Function","text":"<pre><code>function setup() {\n    // Create a canvas to match the parent container's size\n    updateCanvasSize();\n    const canvas = createCanvas(canvasWidth, canvasHeight);\n    canvas.parent('p5-container');\n    noLoop(); // Stop the draw loop since we'll redraw only on resize\n}\n</code></pre> <ul> <li>updateCanvasSize(): This function call updates <code>canvasWidth</code> by measuring the HTML element with the ID <code>p5-canvas</code>.</li> <li>createCanvas(canvasWidth, canvasHeight): Creates a p5.js canvas. The width is taken from the canvas's width; the height is the fixed 200 pixels.</li> <li>canvas.parent('p5-canvas'): Inserts the created canvas element inside the HTML element with the ID <code>p5-canvas</code>. This ensures the canvas is placed in the correct part of the page.</li> <li>noLoop(): Tells p5.js not to continuously call <code>draw()</code> every frame. Instead, it will only call <code>draw()</code> when explicitly instructed to. This helps prevent unnecessary re-rendering.</li> </ul>"},{"location":"sims/resize-in-iframe/#draw-function","title":"draw() Function","text":"<pre><code>function draw() {\n  background('aliceblue');\n  fill('black');\n  textSize(36);\n  textAlign(CENTER, CENTER);\n\n  // Display canvas dimensions\n  text(`Width: ${canvasWidth}px\\nHeight: ${canvasHeight}px`, width / 2, height / 2);\n}\n</code></pre> <ul> <li>background('aliceblue'): Sets a light blue background color for the canvas.</li> <li>fill('black'): Sets the text drawing color to black.</li> <li>textSize(36): Sets the size of the text to be displayed on the canvas.</li> <li>textAlign(CENTER, CENTER): Centers text both horizontally and vertically.</li> <li>text(<code>Width: ${canvasWidth}px\\nHeight: ${canvasHeight}px</code>, width / 2, height / 2): Draws a message in the center of the canvas displaying the current width and height values. The <code>\\n</code> creates a new line so both values appear one above the other.</li> </ul>"},{"location":"sims/resize-in-iframe/#windowresized-function","title":"windowResized() Function","text":"<pre><code>function windowResized() {\n  // Update canvas size when the container resizes\n  updateCanvasSize();\n  resizeCanvas(canvasWidth, canvasHeight);\n  redraw();\n}\n</code></pre> <ul> <li>windowResized(): A p5.js event function that is automatically called whenever the browser window changes size.</li> <li>updateCanvasSize(): Updates <code>canvasWidth</code> based on the canvas's current dimensions.</li> <li>resizeCanvas(canvasWidth, canvasHeight): Adjusts the existing canvas to the new width and height. Because the height is fixed, only the width may really change.</li> <li>redraw(): Manually triggers <code>draw()</code> again, ensuring the text reflects the new dimensions.</li> </ul>"},{"location":"sims/resize-in-iframe/#updatecanvassize-function","title":"updateCanvasSize() Function","text":"<pre><code>function updateCanvasSize() {\n    // Get the exact dimensions of the container\n    const container = document.getElementById('p5-container').getBoundingClientRect();\n    containerWidth = Math.floor(container.width);  // Avoid fractional pixels\n}\n</code></pre> <ul> <li>document.getElementById('p5-container').getBoundingClientRect(): Returns an object containing the size and position of the element relative to the viewport.</li> <li>canvasWidth = Math.floor(canvas.width): Assigns the canvas's width (rounded down to the nearest whole number) to the <code>canvasWidth</code> variable, ensuring no fractional pixel values that might cause layout jitter.</li> </ul> <p>Why This Matters:</p> <ul> <li>By separating the container width calculation from the canvas height (which is fixed), you ensure a stable vertical dimension.</li> <li>Calling <code>updateCanvasSize()</code> before creating or resizing the canvas ensures the canvas matches the container's dimensions at all times.</li> <li>Using <code>noLoop()</code> and <code>redraw()</code> allows the canvas to only update when necessary (on initial load and window resize), making the sketch more efficient.</li> </ul>"},{"location":"sims/resize-in-iframe/#references","title":"References","text":"<ul> <li>Processing Wiki on Positioning Your Canvas)</li> </ul>"},{"location":"sims/resize-test/","title":"Resize Demo","text":"Figure caption. <p>Link to Resize Demo</p>"},{"location":"sims/resize-test/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us go into full-screen and back.</p> <pre><code>// resize test\nrsz = 20; // resize button size\n\nfunction setup() {\n    // initial 600 wide and 400 high\n    const canvas = createCanvas(600, 400);\n    var mainElement = document.querySelector('main');\n    canvas.parent(mainElement);\n    textSize(16);\n}\n\n// draw the \"toggle full screen\" icon in the lower right corner\nfunction drawResize() {\n  wR = width-rsz; // with less resize button width\n  hR = height-rsz; // height less resize button width\n  fill('white');\n  rect(wR,hR,rsz,rsz);\n  stroke('black')\n\n  line(wR+4, hR+4, wR+4, hR+8); // ul v\n  line(wR+4, hR+4, wR+8, hR+4); // ul h\n\n  line(width-4, hR+4, width-8, hR+4); // ur v\n  line(width-4, hR+4, width-4, hR+8); // ur h\n\n  line(wR+4, height-4, wR+4, height-8); // ll v\n  line(wR+4, height-4, wR+8, height-4); // ll h\n\n  line(width-4, height-4, width-4, height-8); // lr v\n  line(width-4, height-4, width-8, height-4); // lr h\n}\n\nfunction draw() {\n  background('lightgray');\n  drawResize(); // draw the full screen toggle\n  fill('black')\n  noStroke();\n  text(\"Window Width: \" + str(windowWidth), 10, 20)\n  text(\"Window Height: \" + str(windowHeight), 10, 50)\n}\n\n// If the mouse is pressed in the resize box, toggle full-screen mode.\nfunction mousePressed() {\n  if (mouseX &gt; width-rsz &amp;&amp; mouseX &lt; width &amp;&amp; mouseY &gt; height-rsz &amp;&amp; mouseY &lt; height) {\n    // get the current value (0,1)\n    let fs = fullscreen();\n    // toggle the value\n    fullscreen(!fs);\n  }\n}\n\n// this works down to w=500 and h=254\nfunction windowResized() {\n  // console.log('windowResized', windowWidth, windowWidth);\n  resizeCanvas(windowWidth-20, windowHeight-35);\n}\n</code></pre>"},{"location":"sims/resize-test/#references","title":"References","text":"<p>Processing Wiki on Positioning Your Canvas</p>"},{"location":"sims/responsive-design/","title":"Responsive Design","text":"<p>A responsive design is one that adapts to changing screen sizes.  This example resizes the drawing region, the control region as well as the slider controls every time the screen is resized.</p> <p>Run the Responsive Design MicroSim Edit this MicroSim</p>"},{"location":"sims/responsive-design/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/responsive-design/main.html\" height=\"200\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/robots/","title":"Collision Avoidance Robot","text":""},{"location":"sims/robots/#supporting-simulations","title":"Supporting Simulations","text":"<ol> <li>Battery Circuits</li> <li>Battery Drain</li> <li>Motor</li> <li>H-Bridge Circuit</li> <li>Pulse-Width Modulation</li> <li>Collision Avoidance Robot</li> </ol>"},{"location":"sims/rotating-gears/","title":"Rotating Gears","text":"<p>Run the Rotating Gears MicroSim Edit the MicroSim</p>"},{"location":"sims/rotating-gears/#prompt","title":"Prompt","text":"<pre><code>Create a p5.js sketch of two rotating gears that are\nmeshed.  Make one smaller have half the number of\nteeth that the larger gear has.\nAdd a Start/Stop button and a slider to control the speed.\n</code></pre>"},{"location":"sims/rotating-gears/#chatgpt-o1-mini-response","title":"ChatGPT o1-mini Response","text":"<p>Certainly! Below is a comprehensive p5.js sketch that simulates two meshed rotating gears. One gear is smaller with half the number of teeth as the larger gear. Additionally, the sketch includes a Start/Stop button to control the animation and a slider to adjust the rotation speed.</p>"},{"location":"sims/rotating-gears/#meshed-rotating-gears-animation","title":"Meshed Rotating Gears Animation","text":"<p>This sketch visualizes two meshed gears rotating in opposite directions. The key features include:</p> <ul> <li>Two Gears:<ul> <li>Large Gear: Has twice the number of teeth compared to the smaller gear.</li> <li>Small Gear: Has half the number of teeth of the large gear.</li> </ul> </li> <li>Controls:<ul> <li>Start/Stop Button: Toggles the rotation of the gears.</li> <li>Speed Slider: Adjusts the rotation speed of the gears.</li> </ul> </li> </ul>"},{"location":"sims/rotating-gears/#understanding-gear-mechanics","title":"Understanding Gear Mechanics","text":"<p>When two gears mesh:</p> <ul> <li> <p>Opposite Rotation: Gears rotate in opposite directions.</p> </li> <li> <p>Speed Ratio: The rotation speed of each gear is inversely proportional to its number of teeth.</p> </li> </ul> \\[ \\frac{\\omega_1}{\\omega_2} = -\\frac{N_2}{N_1} \\] <p>where:</p> <ul> <li>\\(\\omega_1\\) \u200b: Angular speed of Gear 1</li> <li>\\(\\omega_2\\) \u200b: Angular speed of Gear 2</li> <li>\\(N_1\\) \u200b: Number of teeth on Gear 1</li> <li>\\(N_2\\) \u200b: Number of teeth on Gear 2</li> <li>Negative Sign: Indicates opposite rotation directions</li> </ul> <p>In this sketch:</p> <ul> <li>Large Gear (Gear 1): \\(N_1\\) = 20 teeth</li> <li>Small Gear (Gear 2): \\(N_2\\) = 10 teeth</li> </ul> <p>Thus, the angular speed relationship becomes:</p> \\[ \\frac{\\omega_1}{\\omega_2} = -\\frac{10}{20} = -0.5  \\Rightarrow \\omega_2 = -2 \\omega_1\u200b \\] <p>This means the small gear rotates twice as fast as the large gear in the opposite direction.</p>"},{"location":"sims/rotating-gears/#setting-up-the-environment","title":"Setting Up the Environment","text":"<p>To run this sketch:</p> <ol> <li>Visit the p5.js online editor.</li> <li>Create a new sketch.</li> <li>Replace the existing code with the code provided below.</li> <li>Click the play button to see the animation in action.</li> </ol>"},{"location":"sims/rotating-gears/#p5js-code","title":"p5.js Code","text":"<p>Note this original code did not work.  I told it that the image was just circles and it got it right the second time.</p> <pre><code>// Gear Animation with Start/Stop Button and Speed Slider\n\nlet largeGear, smallGear;\nlet isRunning = true;\nlet speedSlider;\nlet startStopButton;\n\nfunction setup() {\n  createCanvas(800, 600);\n  angleMode(RADIANS);\n\n  // Initialize Gears\n  // Large Gear: 20 teeth\n  largeGear = new Gear(width / 3, height / 2, 150, 20);\n\n  // Small Gear: 10 teeth\n  smallGear = new Gear((2 * width) / 3, height / 2, 75, 10);\n\n  // Create Speed Slider\n  createP('Rotation Speed:');\n  speedSlider = createSlider(0, 5, 2, 0.1); // Base speed from 0 to 5\n\n  // Create Start/Stop Button\n  startStopButton = createButton('Stop');\n  startStopButton.mousePressed(toggleAnimation);\n\n  // Set text alignment for controls\n  textAlign(CENTER, CENTER);\n}\n\nfunction draw() {\n  background(240);\n\n  // Update rotation if running\n  if (isRunning) {\n    let baseSpeed = speedSlider.value();\n    largeGear.update(baseSpeed);\n    smallGear.update(-2 * baseSpeed); // Small gear rotates twice as fast in opposite direction\n  }\n\n  // Display Gears\n  largeGear.display();\n  smallGear.display();\n}\n\n// Function to toggle animation\nfunction toggleAnimation() {\n  isRunning = !isRunning;\n  if (isRunning) {\n    startStopButton.html('Stop');\n  } else {\n    startStopButton.html('Start');\n  }\n}\n\n// Gear Class Definition\nclass Gear {\n  constructor(x, y, radius, numTeeth) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.numTeeth = numTeeth;\n    this.angle = 0;\n  }\n\n  update(speed) {\n    this.angle += speed * (TWO_PI / 60); // Convert speed to radians per frame\n  }\n\n  display() {\n    push();\n    translate(this.x, this.y);\n    rotate(this.angle);\n\n    // Draw Gear Body\n    stroke(0);\n    strokeWeight(2);\n    fill(200);\n    ellipse(0, 0, this.radius * 2, this.radius * 2);\n\n    // Draw Teeth\n    let toothWidth = (TWO_PI) / this.numTeeth / 2;\n    let toothHeight = this.radius * 0.2;\n\n    for (let i = 0; i &lt; this.numTeeth; i++) {\n      let theta = i * TWO_PI / this.numTeeth;\n      push();\n      rotate(theta);\n      rectMode(CENTER);\n      fill(150);\n      noStroke();\n      rect(this.radius, 0, toothHeight, toothWidth);\n      pop();\n    }\n\n    pop();\n  }\n}\n</code></pre>"},{"location":"sims/rotating-gears/#explanation-of-the-code","title":"Explanation of the Code","text":"<ol> <li> <p>Global Variables:</p> </li> <li> <p>Gears:</p> <ul> <li><code>largeGear</code>: Represents the larger gear with more teeth.</li> <li><code>smallGear</code>: Represents the smaller gear with fewer teeth.</li> </ul> </li> <li>Controls:<ul> <li><code>isRunning</code>: Boolean flag to control animation state.</li> <li><code>speedSlider</code>: Slider to adjust rotation speed.</li> <li><code>startStopButton</code>: Button to start or stop the animation.</li> </ul> </li> <li> <p><code>setup()</code> Function:</p> </li> <li> <p>Canvas: Creates an 800x600 pixel canvas.</p> </li> <li>Angle Mode: Sets angle measurements to radians for smoother calculations.</li> <li>Gear Initialization:<ul> <li>Large Gear: Positioned at one-third of the canvas width, with a radius of 150 pixels and 20 teeth.</li> <li>Small Gear: Positioned at two-thirds of the canvas width, with a radius of 75 pixels and 10 teeth.</li> </ul> </li> <li>Controls Creation:<ul> <li>Speed Slider: Ranges from 0 to 5 with a default value of 2 and increments of 0.1.</li> <li>Start/Stop Button: Initializes with the label \"Stop\" and is linked to the <code>toggleAnimation</code> function.</li> </ul> </li> <li>Text Alignment: Centers the text for the controls.</li> <li><code>draw()</code> Function:</li> <li>Background: Sets a light gray background each frame.</li> <li>Rotation Update:<ul> <li>If <code>isRunning</code> is <code>true</code>, the gears' angles are updated based on the slider value.</li> <li>Large Gear: Rotates at a speed proportional to the slider value.</li> <li>Small Gear: Rotates at twice the speed of the large gear in the opposite direction.</li> </ul> </li> <li>Displaying Gears: Calls the <code>display()</code> method for both gears to render them on the canvas.</li> <li> <p><code>toggleAnimation()</code> Function:</p> </li> <li> <p>Toggles the <code>isRunning</code> flag.</p> </li> <li>Updates the button label to \"Start\" or \"Stop\" based on the current state.</li> <li> <p><code>Gear</code> Class:</p> </li> <li> <p>Constructor Parameters:</p> </li> <li><code>x, y</code>: Position of the gear's center.</li> <li><code>radius</code>: Radius of the gear.</li> <li><code>numTeeth</code>: Number of teeth on the gear.</li> <li>Properties:</li> <li><code>angle</code>: Current rotation angle of the gear.</li> <li>Methods:</li> <li><code>update(speed)</code>: Increments the gear's angle based on the provided speed.</li> <li><code>display()</code>: Renders the gear on the canvas, including its body and teeth.<ul> <li>Gear Body: Drawn as a filled ellipse.</li> <li>Teeth: Represented as rectangles protruding from the gear's circumference. The size and placement are calculated based on the number of teeth.</li> </ul> </li> </ol>"},{"location":"sims/rotating-gears/#customization","title":"Customization","text":"<p>Feel free to modify the sketch to explore different gear configurations or enhance the visualization:</p> <ul> <li>Number of Teeth:<ul> <li>Change the <code>numTeeth</code> parameter when initializing <code>Gear</code> objects to see how it affects meshing.</li> </ul> </li> <li>Gear Sizes:<ul> <li>Adjust the <code>radius</code> parameter to change the size of the gears.</li> </ul> </li> <li>Tooth Design:<ul> <li>Modify the <code>toothWidth</code> and <code>toothHeight</code> in the <code>display()</code> method for different tooth appearances.</li> </ul> </li> <li>Colors and Styles:<ul> <li>Change <code>fill()</code> and <code>stroke()</code> values to customize gear colors and outlines.</li> </ul> </li> <li>Additional Controls:<ul> <li>Add sliders to control the number of teeth dynamically.</li> <li>Introduce a phase shift to synchronize gear rotations differently.</li> </ul> </li> </ul>"},{"location":"sims/rotating-gears/#live-demo","title":"Live Demo","text":"<p>For a live demonstration, copy the above code into the p5.js online editor and run the sketch. Use the Start/Stop button to control the animation and adjust the Rotation Speed slider to change how fast the gears rotate.</p> <p>Feel free to reach out if you have any questions or need further assistance with the sketch. Happy coding and gear modeling!</p>"},{"location":"sims/rotating-gears/#references","title":"References","text":"<p>Full ChatGPT Transcript</p>"},{"location":"sims/seven-segment-display/","title":"7-Segment Display","text":"<p>Demo</p>"},{"location":"sims/sierpinski/","title":"Sierpinski","text":"Sierpinski Triangle"},{"location":"sims/sierpinski/#demo-1","title":"Demo 1","text":"<p>This demo draws colored triangles within triangles up to a depth of 7. The users have three range contols for depth, color and color step size.</p> <ul> <li> <p>Run the Colored Sierpinski Demo</p> </li> <li> <p>Run the Random Sierpinski Demo</p> </li> </ul>"},{"location":"sims/simple-tree/","title":"Simple Tree","text":"<p>Run the Simple Tree MicroSim Edit this MicroSim</p>"},{"location":"sims/simple-tree/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/name/main.html\" height=\"400\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/simple-tree/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to specify the drawing of a static filled circle.</p>"},{"location":"sims/simple-tree/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/simple-tree/#sample-response","title":"Sample Response","text":"<pre><code>// canvas regions setup\n// let canvasWidth = 750;\nlet drawHeight = 400;\nlet controlHeight = 50;\nlet canvasHeight = drawHeight + controlHeight;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\n\nfunction setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  var mainElement = document.querySelector('main');\n  canvas.parent(mainElement);\n}\n\nfunction draw() {\n  // background of drawing region\n  fill('aliceblue');\n  rect(0, 0, canvasWidth, drawHeight);\n\n  // background of controls\n  fill('whitegray');\n  rect(0, drawHeight, canvasWidth, controlHeight);\n  circle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/simple-tree/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/simple-tree/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/simple-tree/#activities","title":"Activities","text":""},{"location":"sims/simple-tree/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/simple-tree/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/simple-tree/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/simple-tree/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/simple-tree/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"},{"location":"sims/simple-tree/#references","title":"References","text":"<ul> <li>Processing Wiki on Positioning Your Canvas</li> </ul>"},{"location":"sims/sine-and-cosine/","title":"Sine and Cosine","text":"Figure caption. <p>Run the MicroSim Demo</p>"},{"location":"sims/sine-and-cosine/#about-this-microsim","title":"About this MicroSim","text":""},{"location":"sims/sine-wave/","title":"Sine Wave","text":"Sine Wave. <p>Run the Sine Wave Demo</p> <p>In this demo, we use three range control sliders to change  the ways a sine wave is drawn on a canvas. The three parameters are:</p> <ol> <li>amplitude</li> <li>period</li> <li>and phase</li> </ol>"},{"location":"sims/sine-wave/#prompt","title":"Prompt","text":"<pre><code>Generate a static sine wave on a grid of cartesian coordinates. \nMake (0,0) be at the center of an 600x400 canvas and larger y at the top.  \nAdd sliders for period, amplitude and phase.\nProvide the label and values to the left of the sliders.\nMake the sliders span the width less the leftSliderMargin of 100.\nDraw and label the X and Y Axis.\n</code></pre> <p>Edit This MicroSim with the P5.js Editor</p>"},{"location":"sims/sine-wave/#result","title":"Result","text":"<pre><code>// sine wave with 3 sliders\nlet width = 600;\nlet height = 400;\nlet halfWidth = width / 2\nlet halfHeight = height / 2\nlet amplitude = 100;\nlet phase = 0;\n\nlet amplitudeSlider, periodSlider, phaseSlider;\nlet labelValueMargin = 120;\n\nfunction setup() {\n  createCanvas(width, height);\n  textSize(16)\n\n  // Create sliders\n  amplitudeSlider = createSlider(0, 200, 100);\n  amplitudeSlider.position(labelValueMargin, height - 20);\n  amplitudeSlider.style('width', width - labelValueMargin + 'px')\n\n  periodSlider = createSlider(1, 100, 50);\n  periodSlider.position(labelValueMargin, height - 40);\n  periodSlider.style('width', width - labelValueMargin + 'px')\n\n  phaseSlider = createSlider(-PI*100, PI*100, 0, 0.01);\n  phaseSlider.position(labelValueMargin, height - 60);\n  phaseSlider.style('width', width - labelValueMargin + 'px')\n}\n\nfunction draw() {\n  background(240);\n\n  amplitude = amplitudeSlider.value();\n  period = periodSlider.value();\n  phase = phaseSlider.value();\n\n  // draw on the standard axis to keep text upright\n  drawAxis();\n  translate(width / 2, height / 2); // Shift origin to center\n  scale(1, -1); // Flip y-axis to make positive y up\n\n  drawSineWave(amplitude, 1/period, phase);\n}\n\nfunction setLineDash(list) {\n  drawingContext.setLineDash(list);\n}\n\nfunction drawAxis() {\n  fill('black')\n  strokeWeight(0)\n  text('y', halfWidth-20, 15)\n  text('x', width-20, halfHeight + 20)\n  stroke('gray')\n  strokeWeight(1)\n  setLineDash([5, 5])\n\n  // horizontal line\n  line(0, halfHeight, width, halfHeight)\n  // vertical line\n  line(halfWidth, 0, halfWidth, height)\n\n  stroke(0)\n  strokeWeight(0);\n  fill('black'); // Text color\n  text('Amplitude: ' + amplitude/100,    10, height - 5);\n  text('Period: '    + period,           10, height - 25);\n  text('Phase: '     + phase.toFixed(2), 10, height - 45);\n}\n\nfunction drawSineWave(amplitude, frequency, phase) {\n  stroke('blue');\n  strokeWeight(3)\n  noFill();\n  // turn off dash line\n  setLineDash([1, 0])\n  beginShape();\n    for (let x = -width / 2; x &lt; width / 2; x++) {\n      let y = amplitude * sin(frequency * (x - phase));\n      vertex(x, y);\n    }\n  endShape();\n}\n</code></pre> <p>Challenge</p> <p>Create your own trigonometry demos by drawing the cosine and tangent functions.</p>"},{"location":"sims/sine-wave/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/sine-wave/#prompt_1","title":"Prompt","text":"<pre><code>Generate a lesson plan for a 9th grade geometry class \nthat accompanies the following p5.js demonstration:\n\nThe users see a sine wave on the screen.\nThere are three range control sliders under the sine wave.\nOne slider changes the amplitude of the sine wave.\nOne slider changes the period of the sine wave.\nOne slider changes the phase of the sine wave.\n</code></pre>"},{"location":"sims/sine-wave/#grade-level","title":"Grade Level","text":"<p>9th Grade  </p>"},{"location":"sims/sine-wave/#subject","title":"Subject","text":"<p>Geometry  </p>"},{"location":"sims/sine-wave/#duration","title":"Duration","text":"<p>1-2 class periods (40-80 minutes)  </p>"},{"location":"sims/sine-wave/#tools-needed","title":"Tools Needed","text":"<p>Computers with internet access, p5.js web editor, projector for demonstrations.</p>"},{"location":"sims/sine-wave/#objectives","title":"Objectives","text":"<ol> <li>Understand the basic properties of sine waves (amplitude, period, phase).</li> <li>Learn how to manipulate these properties using p5.js.</li> <li>Visualize the effects of changing each property on the shape of the sine wave.</li> </ol>"},{"location":"sims/sine-wave/#introduction-10-minutes","title":"Introduction (10 minutes)","text":"<ul> <li>Begin with a brief overview of sine waves and their significance in mathematics and the real world (e.g., sound waves, light waves).</li> <li>Introduce the p5.js tool and its purpose in visualizing mathematical concepts.</li> </ul>"},{"location":"sims/sine-wave/#demonstration-15-minutes","title":"Demonstration (15 minutes)","text":"<ul> <li>Project the p5.js sine wave demonstration on the screen.</li> <li>Explain each control slider and its corresponding property:</li> <li>Amplitude: Height of the wave peaks.</li> <li>Period: Distance between successive wave peaks.</li> <li>Phase: Horizontal shift of the entire wave.</li> </ul>"},{"location":"sims/sine-wave/#interactive-activity-30-minutes","title":"Interactive Activity (30 minutes)","text":"<ul> <li>Students will use the p5.js web editor to experiment with the sine wave.</li> <li>Tasks for students:</li> <li>Adjust the amplitude and observe changes.</li> <li>Modify the period and note the effects.</li> <li>Change the phase and discuss how the wave shifts.</li> <li>Encourage students to note their observations and any patterns they discover.</li> </ul>"},{"location":"sims/sine-wave/#group-discussion-10-minutes","title":"Group Discussion (10 minutes)","text":"<ul> <li>Regroup and discuss the findings.</li> <li>Ask students to explain how each parameter affects the wave.</li> <li>Discuss practical applications of sine waves.</li> </ul>"},{"location":"sims/sine-wave/#assessment-5-15-minutes","title":"Assessment (5-15 minutes)","text":"<ul> <li>Provide a short quiz or worksheet asking students to match wave diagrams with their corresponding amplitude, period, and phase settings.</li> </ul>"},{"location":"sims/sine-wave/#homework-optional","title":"Homework (optional)","text":"<ul> <li>Students create their own p5.js sketch that includes a sine wave with adjustable properties.</li> <li>They should write a brief report explaining how changing each property affects the wave and include screenshots of their sketch.</li> </ul>"},{"location":"sims/sine-wave/#extensions-optional","title":"Extensions (optional)","text":"<ul> <li>Introduce concepts of frequency and angular velocity related to sine waves.</li> <li>Explore other trigonometric functions like cosine and tangent using p5.js.</li> </ul>"},{"location":"sims/sine-wave/#resources","title":"Resources","text":"<ul> <li>Access to the p5.js web editor and basic tutorials.</li> <li>Diagrams and explanations of sine waves and their properties.</li> </ul>"},{"location":"sims/sine-wave/#references","title":"References","text":""},{"location":"sims/slope-and-intercept/","title":"Slope and Intercept","text":"<p>Run the Slope and Intercept MicroSim</p>"},{"location":"sims/slope-and-intercept/#prompt","title":"Prompt","text":"<p><pre><code>Generate a single file p5.js sketch on an 300x400 canvas.\nSet a variable \"width\" to be 300.\nSet a variable \"height\" to be 400.\nThe purpose of this sketch is to demonstrate the concepts of slope and intercept.\nDivide the canvas into two regions on top of each other.\nThe top region is called the \"drawing\" region. \nThe drawing region is 300x300 and has a light gray background of 240.\nThe bottom region the \"controls\" region.\nThe controls region holds the controls and is 300x100.\nThe background for the controls is white of 255.\nThe controls holds two sliders with labels and values on the left.\nThe width of the sliders are both 180px.\nThe slope slider ranges from -2 to 3 with the default of .5.\nThe intercept slider ranges from -100 to 100.\nDraw the slope and the intercept only in the top drawing region.\nThe top drawing region uses a cartesian coordinate system with the center at 150, 150.\nIn the drawing regsion positive Y is at tthe top.\nPlace this prompt at the top of the sketch a multi-line comment.\n</code></pre> Slope and Intercept Demo</p>"},{"location":"sims/slope-and-intercept/#response","title":"Response","text":"<pre><code>/*\nGenerate a single file p5.js sketch on a 300x400 canvas.\nSet a global variable \"width\" to be 300.\nSet a global variable \"height\" to be 400.\nSet a global variable \"drawingRegionHeight\" to be 400.\nThe purpose of this sketch is to demonstrate the concepts of slope and intercept.\nDivide the canvas into two regions on top of each other.\nThe top region is called the \"drawing\" region.\nThe drawing region is 300x300 and has a light gray background of 240.\nThe bottom region is the \"controls\" region.\nThe controls region holds the controls and is 300x100.\nThe background for the controls is white of 255.\nThe controls holds two sliders with labels and values on the left.\nThe width of the sliders are both 180px.\nThe slope slider ranges from -2 to 3 with the default of .5.\nThe intercept slider ranges from -100 to 100.\nDraw the slope and the intercept only in the top drawing region.\nThe top drawing region uses a cartesian coordinate system with the center at 150, 150.\nIn the drawing region, positive Y is at the top.\nAdd vertical and horizontal grid lines every 50 pixels.\n*/\n\nlet width = 500;\nlet height = 400;\nlet drawingRegionHeight = 350;\nlet labelValueWidth = 110;\nlet slopeSlider, interceptSlider;\n\nfunction setup() {\n  createCanvas(width, height);\n  textSize(16);\n\n  // Slope slider\n  text('Slope', 20, 320);\n  slopeSlider = createSlider(0, 5, 0.5, 0.1);\n  slopeSlider.position(labelValueWidth, height - 45);\n  slopeSlider.style('width', width -labelValueWidth - 20 + 'px');\n\n  // Intercept slider\n  text('Intercept', 20, 360);\n  interceptSlider = createSlider(0, 300, 50, 1);\n  interceptSlider.position(labelValueWidth, height - 25);\n  interceptSlider.style('width', width -labelValueWidth - 20 + 'px');\n}\n\nfunction draw() {\n  // Redraw drawing region\n  noStroke();\n\n  // Drawing region\n  fill(230);\n  rect(0, 0, width, drawingRegionHeight);\n\n  // Controls region\n  fill(245);\n  rect(0, drawingRegionHeight, width, 100);\n\n  let slope = slopeSlider.value();\n  let intercept = interceptSlider.value();\n  drawGridLines();\n  drawLine(slope, intercept);\n  drawLabelValues(slope, intercept);\n}\n\nfunction drawGridLines() {\n  stroke('silver');\n  strokeWeight(1);\n  // horizontal lines\n  for (let i=0; i&lt;9; i++) {\n    line(0, i*50, width, i*50);\n  }\n  // Vertical lines\n  for (let i=0; i&lt;10; i++) {\n    line(i*50, 0, i*50, drawingRegionHeight);\n  }\n}\n\nfunction drawLabelValues(slope, intercept) {\n  fill('black');\n  strokeWeight(0);\n  text('Slope: ' + slope, 10, drawingRegionHeight + 20);\n  text('Intercept: ' + intercept, 10, drawingRegionHeight + 40);\n}\n\nfunction drawLine() {\n  let slope = slopeSlider.value();\n  let intercept = interceptSlider.value();\n\n  // Draw line in the drawing region\n  stroke('red');\n  strokeWeight(2);\n  line(0, drawingRegionHeight - intercept, width, drawingRegionHeight - (drawingRegionHeight * slope + intercept));\n}\n</code></pre>"},{"location":"sims/sphere/","title":"Bouncing 3D Sphere Demo","text":"<p>You can also use the 3D \"WebGL\" rendering system that is built into p5.js.  WebGL, short for Web Graphics Library is is a JavaScript API for rendering interactive 2D and 3D graphics within any compatible web browser. The p5.js has many high-level 3D shapes such as box, cone, cylinder, ellipsoid, plane, sphere, and torus  in the WEBGL Library.</p> <ul> <li>3D Sphere Demo</li> </ul>"},{"location":"sims/sphere/#sample-prompt","title":"Sample Prompt","text":"<pre><code>1. Generate a single file p5.js sketch using WEBGL for a 3D animation.\n2. Show a sphere of size 50 that is bouncing around the canvas.\n3. Use the ```WEBGL``` as the third parameter of the createCanvas.\n4. Cover the sphere with a texture that has grid of white and red squares.\n5. Use noStroke() in the texture to not draw the outlines of the grid.\n6. Add a drop shadow under the sphere\n\nfunction setup() {\n  createCanvas(600, 400, WEBGL);\n</code></pre>"},{"location":"sims/sphere/#sample-response","title":"Sample Response","text":"<pre><code>// A bouncing sphere with a red and white grid texture\nlet x, y, z;\nlet xspeed, yspeed, zspeed;\nlet diameter = 50;\nlet radius = diameter / 2;\nlet canvasWidth = 600;\nlet canvasHeight = 400;\n\nfunction setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight, WEBGL);\n  // comment this out if running in the example\n  canvas.parent('canvas-container');\n  x = 0;\n  y = 0;\n  z = 0;\n  xspeed = 2;\n  yspeed = 2.3;\n  zspeed = 1.7;\n}\n\nfunction draw() {\n  background(240);\n\n  // Update the position of the sphere\n  x += xspeed;\n  y += yspeed;\n  z += zspeed;\n\n  // Check for bouncing\n  if (x &gt; width/2 - radius || x &lt; -width/2 + radius) {\n    xspeed *= -1;\n  }\n  if (y &gt; height/2 - radius || y &lt; -height/2 + radius) {\n    yspeed *= -1;\n  }\n  if (z &gt; 200 - radius || z &lt; -200 + radius) {\n    zspeed *= -1;\n  }\n\n  // Draw the sphere with a texture\n  push();\n  translate(x, y, z);\n  texture(createGridTexture());\n  sphere(diameter);\n  pop();\n}\n\n// create texture pattern of a grid of white and red squares\nfunction createGridTexture() {\n  let texSize = 200;\n  let texture = createGraphics(texSize, texSize);\n  // I had to add this line by\n  noStroke();\n  for (let i = 0; i &lt; texSize; i += 20) {\n    for (let j = 0; j &lt; texSize; j += 20) {\n      texture.fill((i + j) % 40 === 0 ? 'white' : 'red');\n      texture.rect(i, j, 20, 20);\n    }\n  }\n  return texture;\n}\n</code></pre>"},{"location":"sims/sphere/#what-we-learned","title":"What We Learned","text":"<ul> <li>P5.js has a robust library of 3D animation tools</li> <li>We need to specify the WEBGL rendering library when we create the canvas</li> <li>Rendering is very fast and smooth if your computer supports the WebGL API standards</li> <li>P5.js has a library for generating 3D shapes such as cone, cube and sphere</li> <li>You can pass a function to the shape that indicates what pattern (texture) to use on the shape</li> <li>P5.js has a function that builds textures</li> <li>You just need to generate a 2D pattern to use that texture.</li> </ul>"},{"location":"sims/sphere/#extending-the-lesson","title":"Extending the Lesson","text":"<ul> <li>Add a drop shadow to the ball</li> <li>Place axis lines in the background</li> <li>Add a slider to control the speed and size of the sphere</li> </ul>"},{"location":"sims/sphere/#sample-lesson-plan","title":"Sample Lesson Plan","text":""},{"location":"sims/sphere/#objective","title":"Objective","text":"<ul> <li>Understand the basics of 3D rendering using p5.js.</li> <li>Learn how to manipulate 3D objects and apply textures.</li> <li>Develop skills in JavaScript and graphics programming.</li> </ul>"},{"location":"sims/sphere/#duration","title":"Duration","text":"<p>1 hour</p>"},{"location":"sims/sphere/#materials-needed","title":"Materials Needed","text":"<ul> <li>Computers with internet access.</li> <li>Code editor (like p5.js Web Editor).</li> <li>Projector for demonstrations.</li> </ul>"},{"location":"sims/sphere/#lesson-outline","title":"Lesson Outline","text":""},{"location":"sims/sphere/#1-introduction-to-p5js-and-3d-graphics-15-minutes","title":"1. Introduction to p5.js and 3D Graphics (15 minutes)","text":"<ul> <li>Brief overview of p5.js and its capabilities.</li> <li>Introduction to the concept of 3D graphics.</li> <li>Discuss the <code>WEBGL</code> renderer in p5.js.</li> </ul>"},{"location":"sims/sphere/#2-basic-3d-shapes-and-transformations-10-minutes","title":"2. Basic 3D Shapes and Transformations (10 minutes)","text":"<ul> <li>Demonstrate how to create basic 3D shapes (e.g., sphere).</li> <li>Explain translation and rotation in a 3D space.</li> </ul>"},{"location":"sims/sphere/#3-hands-on-coding-bouncing-sphere-15-minutes","title":"3. Hands-on Coding: Bouncing Sphere (15 minutes)","text":"<ul> <li>Students will follow along to create a basic 3D sketch with a bouncing sphere.</li> <li>Explain the concepts of <code>setup()</code> and <code>draw()</code> functions.</li> <li>Discuss coordinate systems and movement in 3D space.</li> </ul>"},{"location":"sims/sphere/#4-adding-texture-to-the-sphere-10-minutes","title":"4. Adding Texture to the Sphere (10 minutes)","text":"<ul> <li>Introduce the concept of textures in 3D.</li> <li>Guide students to modify their sketch to apply a grid texture to the sphere.</li> </ul>"},{"location":"sims/sphere/#5-customization-and-experimentation-5-minutes","title":"5. Customization and Experimentation (5 minutes)","text":"<ul> <li>Encourage students to modify the speed, size, and texture of the sphere.</li> <li>Discuss how these changes affect the animation.</li> </ul>"},{"location":"sims/sphere/#6-qa-and-discussion-5-minutes","title":"6. Q&amp;A and Discussion (5 minutes)","text":"<ul> <li>Open the floor for questions.</li> <li>Discuss potential applications of what they've learned.</li> </ul>"},{"location":"sims/sphere/#assessment","title":"Assessment","text":"<ul> <li>Observe student engagement and understanding during the hands-on coding session.</li> <li>Review the modifications students make to their sketches for creativity and understanding.</li> </ul>"},{"location":"sims/sphere/#follow-up-activities","title":"Follow-Up Activities","text":"<ul> <li>Assign a project where students create their own 3D animation using p5.js.</li> <li>Encourage students to explore more complex shapes and textures.</li> </ul>"},{"location":"sims/sphere/#draw-shadow","title":"Draw Shadow","text":"<pre><code>  // Draw shadow\n  drawShadow(ball.x+10, ball.y+30, ballSize);\n\n  function drawShadow(x, y, size) {\n  push();\n    noStroke();\n    fill(50, 50, 50, 100); // Semi-transparent shadow\n    ellipse(x, y + size / 4, size * 0.8, size / 8);\n  pop();\n}\n</code></pre>"},{"location":"sims/sphere/#references","title":"References","text":"<ul> <li>YouTube Video of the Amiga Boing Ball</li> <li>p5.js Reference</li> <li>p5.js Web Editor</li> </ul>"},{"location":"sims/string-harmonics/","title":"String Harmonics","text":"<p>Contributed by Shawn McBurnie.</p> <p></p> <p>String Harmonics Demo No Sound</p> <p>String Harmonics Demo With Sound</p>"},{"location":"sims/string-harmonics/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch on a canvas of width=800 and height=200.\nGenerate a demonstration of string harmonics.\nAllow the string to vary from a frequency of 1 to 16 wave forms.\nAdd a slider that changes the frequency with a step of .1.\nAdd two small black circles at the endpoints of the wave.\nIndent the endpoints with a margin of 20 points from the edges.\nAdd a label and value to the left of the slider.\n</code></pre>"},{"location":"sims/string-harmonics/#lesson-plan-exploring-string-harmonics-with-interactive-simulation","title":"Lesson Plan: Exploring String Harmonics with Interactive Simulation","text":""},{"location":"sims/string-harmonics/#objective","title":"Objective","text":"<ul> <li>Understand the concept of string harmonics and how frequency affects sound pitch.</li> </ul>"},{"location":"sims/string-harmonics/#grade-level","title":"Grade Level","text":"<ul> <li>9th Grade</li> </ul>"},{"location":"sims/string-harmonics/#subject","title":"Subject","text":"<ul> <li>Physics (Sound and Waves)</li> </ul>"},{"location":"sims/string-harmonics/#materials-needed","title":"Materials Needed","text":"<ul> <li>Computers with internet access</li> <li>Access to the string harmonics simulation String Harmonics Simulation</li> <li>Notebooks and pens for taking notes</li> </ul>"},{"location":"sims/string-harmonics/#duration","title":"Duration","text":"<ul> <li>1 Class Period (45-60 minutes)</li> </ul>"},{"location":"sims/string-harmonics/#introduction-10-minutes","title":"Introduction (10 minutes)","text":"<ul> <li>Brief Lecture: Introduce the concept of harmonics in strings, explaining how vibrations at different frequencies produce different sounds.</li> <li>Demonstration: Show a real-world example, like a guitar string, and discuss how varying the tension changes the sound.</li> </ul>"},{"location":"sims/string-harmonics/#interactive-session-20-minutes","title":"Interactive Session (20 minutes)","text":"<ul> <li>Hands-On Activity: Students explore the string harmonics simulation. They are encouraged to adjust the frequency slider and observe changes in wave patterns and listen to the pitch changes.</li> <li>Guided Questions: As they explore, ask questions like, \"What happens to the wave as you increase the frequency?\" or \"How does the change in frequency affect the sound you hear?\"</li> </ul>"},{"location":"sims/string-harmonics/#group-discussion-10-minutes","title":"Group Discussion (10 minutes)","text":"<ul> <li>Sharing Observations: Students discuss their findings in small groups, focusing on the relationship between frequency, wave pattern, and pitch.</li> <li>Connecting Theory and Practice: Discuss how this simulation relates to real-life instruments and sound production.</li> </ul>"},{"location":"sims/string-harmonics/#application-activity-10-minutes","title":"Application Activity (10 minutes)","text":"<ul> <li>Creative Exploration: Ask students to imagine and sketch a new musical instrument that uses the principles of string harmonics.</li> <li>Discussion: Share ideas within the class, discussing the feasibility and creativity of the designs.</li> </ul>"},{"location":"sims/string-harmonics/#conclusion-5-minutes","title":"Conclusion (5 minutes)","text":"<ul> <li>Recap: Summarize key concepts learned about harmonics, frequency, and sound production.</li> <li>Homework Assignment: Students write a brief report on how understanding string harmonics is essential in designing musical instruments.</li> </ul>"},{"location":"sims/string-harmonics/#assessment","title":"Assessment","text":"<ul> <li>Participation in the interactive session and group discussion.</li> <li>Quality and creativity of the musical instrument design.</li> <li>Understanding demonstrated in the homework report.</li> </ul>"},{"location":"sims/string-harmonics/#a-story-about-this-microsim","title":"A Story about this MicroSim","text":"<p>I met Shawn at a ChatGPT meetup and I gave him a short demo of MicroSims.  The meetup was over lunch.  By supper time he had already finished his first MicroSim, despite never having used Processing before.  AND he figured out how to get sound working.  WOW!</p>"},{"location":"sims/supply-and-demand/","title":"Supply and Demand","text":"Figure caption. <ul> <li>Link to Demo</li> </ul>"},{"location":"sims/supply-and-demand/#prompt","title":"Prompt","text":"<pre><code>Create a single file p5.js sketch that replicates the function of this image.\n</code></pre>"},{"location":"sims/supply-and-demand/#lesson-plan","title":"Lesson Plan","text":"<p>This is a lesson plan for 10th-grade students in a microeconomics class. The lesson plan will include objectives, materials, procedure, and assessment for a lab activity using the p5.js sketch.</p> <ul> <li>Course: Microeconomics</li> <li>Grade Level: 10th Grade</li> <li>Duration: 45 minutes</li> </ul>"},{"location":"sims/supply-and-demand/#objectives","title":"Objectives","text":"<ul> <li>Students will understand the concept of the demand curve.</li> <li>Students will learn how changes in price affect the quantity demanded.</li> <li>Students will interact with a p5.js sketch to observe these economic principles visually.</li> </ul>"},{"location":"sims/supply-and-demand/#materials","title":"Materials","text":"<ul> <li>Computers with internet access and a web browser.</li> <li>Projector to demonstrate the p5.js lab.</li> <li>Copies of the demand curve lab worksheet.</li> </ul>"},{"location":"sims/supply-and-demand/#introduction-5-minutes","title":"Introduction (5 minutes)","text":"<ul> <li>Begin the lesson with a brief review of supply and demand.</li> <li>Introduce the demand curve as a visual representation of the relationship between price and quantity demanded.</li> </ul>"},{"location":"sims/supply-and-demand/#instruction-10-minutes","title":"Instruction (10 minutes)","text":"<ul> <li>Explain how the demand curve is typically downward sloping.</li> <li>Describe how to read the demand curve.</li> <li>Demonstrate the interactive p5.js lab on the projector.</li> </ul>"},{"location":"sims/supply-and-demand/#activity-procedure-20-minutes","title":"Activity Procedure (20 minutes)","text":"<ul> <li>Students will access the p5.js sketch on their computers.</li> <li>They will manipulate the price slider and observe changes in quantity demanded.</li> <li>Students will complete the lab worksheet with questions related to their observations.</li> </ul>"},{"location":"sims/supply-and-demand/#discussion-5-minutes","title":"Discussion (5 minutes)","text":"<ul> <li>Regroup and discuss the findings as a class.</li> <li>Highlight the key economic principles demonstrated by the lab.</li> </ul>"},{"location":"sims/supply-and-demand/#assessment-5-minutes","title":"Assessment (5 minutes)","text":"<ul> <li>Review the lab worksheet answers as a class.</li> <li>Provide feedback on their understanding and clear up any misconceptions.</li> </ul>"},{"location":"sims/supply-and-demand/#extensions","title":"Extensions","text":"<ul> <li>Students can explore how factors other than price affect the demand curve.</li> <li>For homework, students could be asked to draw their own demand curves based on different scenarios.</li> </ul>"},{"location":"sims/supply-and-demand/#closure","title":"Closure","text":"<ul> <li>Summarize the day's lesson and discuss how the demand curve relates to real-world economics.</li> </ul>"},{"location":"sims/supply-and-demand/#sample-code","title":"Sample Code","text":"<p>The code has several parts:</p> <ol> <li>Global Variables - allocate memory and set default layout values</li> <li>setup() - runs only once</li> <li>draw() - continually runs as users change the slider</li> </ol> <pre><code>let width = 400;\nlet height = 400;\nlet margin = 50; // side around the plot\nlet priceSlider;\nlet demandCurve;\nlet maxPrice = 200;\nlet maxQuantity = 200;\nlet price = 100;\nlet quantity = 100;\nlet labelValueMargin = 140\n\nfunction setup() {\n  const canvas = createCanvas(width, height);\n  canvas.parent('canvas-container');\n  textSize(16);\n\n  // Create a slider element for price adjustment\n  priceSlider = createSlider(0, maxPrice, price);\n  priceSlider.position(labelValueMargin, height - 35);\n  priceSlider.style('width', width - labelValueMargin - 20 + 'px');\n\n  // Define the demand curve as a function\n  demandCurve = (p) =&gt; maxQuantity - p;\n}\n\nfunction draw() {\n  background(240);\n\n  // Update quantity based on the current value of the price slider\n  price = priceSlider.value();\n  quantity = demandCurve(price);\n\n  // Draw the axes\n  stroke(0);\n  strokeWeight(1);\n  line(margin, margin, margin, height - margin); // Vertical Y-axis\n  // Horizontal X axis\n  line(margin, height - margin, width - margin, height - margin);\n  strokeWeight(0);\n  text('Price', 30, 40); // Y-axis label\n  text('Quantity Sold', width - margin - 70, height - margin - 10); // X-axis label\n\n  // Draw the demand curve\n  stroke(255, 0, 0);\n  strokeWeight(3);\n  line(margin, margin, width - margin, height - margin);\n\n  // Draw a point on the demand curve based on current price and quantity\n  fill(0, 0, 255);\n  noStroke();\n  x = map(quantity, 0, maxQuantity, margin, height - margin)\n  y = map(price, 0, maxPrice, width - margin, margin)\n  circle(x,y,10);\n\n  stroke('silver');\n  line(margin, y, x, y)\n  line(x, y, x, height - margin)\n\n  fill(0);\n  noStroke();\n  circle(\n    margin, \n    map(price, 0, maxPrice, width - margin, margin), 10);\n\n  circle(\n    map(quantity, 0, maxQuantity, margin, height - margin), \n    height - margin, 10);\n\n  // Text annotations\n  noStroke();\n  fill(0);\n  textSize(16);\n  text(\"Price and Demand Curve\", 120, 30);\n  text(`Input Price: ${price}`, 10, height - 20);\n\n  text(`Output: Quantity = ${quantity}`, 70, 490);\n  textSize(12);\n\n  // instructions\n  let keyMargin = 180;\n  text(`Adjust price by moving the slider.`,     keyMargin, margin);\n  text(`Note that as the input (price) changes`, keyMargin, margin + 20);\n  text(`    the quantity sold also changes.`,    keyMargin, margin + 40);\n  text(`At high prices a low quantity is sold.`, keyMargin, margin + 60);\n  text(`At low prices a high quantity is sold.`, keyMargin, margin + 80);\n}\n</code></pre>"},{"location":"sims/template/","title":"MicroSim Template","text":"<p>Run the MicroSim Edit this MicroSim</p>"},{"location":"sims/template/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/name/main.html\" height=\"400\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/template/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to specify the drawing of a static filled circle.</p>"},{"location":"sims/template/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/template/#sample-response","title":"Sample Response","text":"<pre><code>// canvas regions setup\n// let canvasWidth = 750;\nlet drawHeight = 400;\nlet controlHeight = 50;\nlet canvasHeight = drawHeight + controlHeight;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\n\nfunction setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  var mainElement = document.querySelector('main');\n  canvas.parent(mainElement);\n}\n\nfunction draw() {\n  // background of drawing region\n  fill('aliceblue');\n  rect(0, 0, canvasWidth, drawHeight);\n\n  // background of controls\n  fill('whitegray');\n  rect(0, drawHeight, canvasWidth, controlHeight);\n  circle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/template/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/template/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/template/#activities","title":"Activities","text":""},{"location":"sims/template/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/template/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/template/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/template/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/template/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"},{"location":"sims/template/#references","title":"References","text":"<ul> <li>Processing Wiki on Positioning Your Canvas</li> </ul>"},{"location":"sims/wave-sums/","title":"Wave Sum","text":""},{"location":"sims/wave-sums/#wave-sums","title":"Wave Sums","text":"<p>This lab demonstrates calculating the sum of sine waves of different lengths. Understanding how to convert waves from spacial domains into frequency domains is a key component of signal processing and understanding the FFT algorithm for doing Fast-Fourier Transforms.</p> <p>Wave Sums Demo</p>"}]}