{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Micro Simulations for Education","text":"<p>Welcome to the MicroSims for Education website.</p> <p>A MicroSim (or Micro-Simulation) is a simple animation or simulation program that is quickly generated to help teachers explain concepts to students.  They are designed to be generated from a brief description of a problem using generative AI tools such as ChatGPT.</p> <p>The term MicroSim was coined by Val Lockhart in the summer of 2023 while she was working with generative AI.  She found that both teachers and students could generate useful simulations using p5.js with little or no training.</p>"},{"location":"#the-microsim-registry","title":"The MicroSim Registry","text":"<p>One of our goals on this site is to create a library of MicroSims that can be used to fine-tune a generative AI application.  We have found that new GPTs will create higher-quality simulations if they are trained with a high-quality training set.  This reflects the fact that although there are tens of thousands of sample p5.js animations, many of them are created by first-time programmers.</p> <p>Although it is easy for a non-programmer to use generative AI to create a new MicroSim, it is more difficult to find high-quality MicroSims that have been peer-reviewed by senior software developers and user experience designers.  These MicroSims have some of the following qualities:</p> <ol> <li>Clearly labeled controls with values.</li> <li>Controls placed at the bottom of the simulation</li> <li> <p>Controls aligned for visual asthetics</p> </li> <li> <p>Bouncing Ball</p> </li> <li>String Harmonics</li> </ol>"},{"location":"about/","title":"About the Micro Simulations Website","text":""},{"location":"about/#history-of-processing","title":"History of Processing","text":"<p>Processing is a free, open-source coding language for visual art developed by Ben Fry and Casey Reas, former classmates at the MIT Media Lab. Launched in 2001 as Proce55ing, the project encompasses a programming environment designed for artists\u2019 use, and a community of practitioners.</p>"},{"location":"about/#p5js","title":"P5.js","text":""},{"location":"about/#references","title":"References","text":"<p>The Processing Foundation</p>"},{"location":"contact/","title":"Contact","text":"<p>Dan McCreary on LinkedIn</p>"},{"location":"glossary/","title":"Glossary of High-Level Concepts in Generating MicroSims","text":"<p>This glossary focuses on high-level concepts related to creating high-quality simulations and user interfaces using the p5.js framework.</p>"},{"location":"glossary/#terms-and-definitions","title":"Terms and Definitions","text":"<ol> <li>Canvas</li> <li> <p>The area where all the drawing in p5.js takes place, foundational for simulations and UIs.</p> </li> <li> <p>Rendering</p> </li> <li> <p>How graphics are drawn on the canvas, including 2D and WEBGL (3D) in p5.js.</p> </li> <li> <p>Event Handling</p> </li> <li> <p>Responding to user actions like mouse clicks, key presses, or touch events for interactivity.</p> </li> <li> <p>Animation</p> </li> <li> <p>Creating motion and shape change, often through frame-by-frame updates.</p> </li> <li> <p>Vector Graphics</p> </li> <li> <p>Scalable graphics for rendering shapes, essential for simulations and UI elements.</p> </li> <li> <p>Interactivity</p> </li> <li> <p>Involves user input and system feedback, from simple clicks to complex gestures.</p> </li> <li> <p>User Experience (UX) Design</p> </li> <li> <p>Designing interfaces and simulations that are easy, intuitive, and enjoyable to use.</p> </li> <li> <p>Responsive Design</p> </li> <li> <p>Techniques ensuring simulations and UIs work well on various devices and screen sizes.</p> </li> <li> <p>Simulation Fidelity</p> </li> <li> <p>The degree to which a simulation replicates real-world processes or systems.</p> </li> <li> <p>Performance Optimization</p> <ul> <li>Techniques to make simulations and interfaces run smoothly, including code optimization.</li> </ul> </li> <li> <p>Accessibility</p> <ul> <li>Making simulations and UIs usable by people with a wide range of abilities.</li> </ul> </li> <li> <p>Prototyping</p> <ul> <li>Creating a preliminary model of a simulation or UI for exploring ideas and testing UX.</li> </ul> </li> <li> <p>State Management</p> <ul> <li>Tracking and updating the status of different elements and interactions in the system.</li> </ul> </li> <li> <p>User Testing</p> <ul> <li>Evaluating a simulation or interface by testing it with real users for feedback.</li> </ul> </li> <li> <p>Interaction Design</p> <ul> <li>Designing interactive digital products with logical and thought-out behaviors.</li> </ul> </li> </ol> <p>This glossary aims to provide a foundational understanding for effectively using the p5.js framework in creating high-quality simulations and user interfaces.</p>"},{"location":"setup/","title":"Introduction to MicroSims","text":""},{"location":"setup/#background-on-processing","title":"Background on Processing","text":""},{"location":"setup/#avoid-the-urge-to-fix-the-code","title":"Avoid the Urge to Fix the Code","text":"<p>Always go back to the ChatGPT and tell it what is not working and suggest a fix.</p>"},{"location":"setup/#start-with-a-simple-prompt","title":"Start with a Simple Prompt","text":"<p>Start with a simple prompt that describes the core function that you would like done.</p>"},{"location":"setup/#add-controls","title":"Add Controls","text":"<p>Start adding controls such as sliders and buttons.  A good simulation always allows the user to change parameters such as the animation speed and how to start, stop, step and reset the simulation.</p>"},{"location":"setup/#focus-on-usability","title":"Focus on Usability","text":""},{"location":"setup/#share-your-microsim","title":"Share Your MicroSim","text":"<p>The best way to share your simulation is to create a pull request with your working simulation.  Make sure you read the MicroSim structure document to get an idea of how to best structure your code.</p> <p>If you are not clear on how to do a pull request, you can always open an issue in GitHub and post your code there.</p> <p>If you need help, please contact Dan McCreary on LinkedIn.</p>"},{"location":"setup/01-processing/","title":"Background on the Processing Language","text":"<p>p5.js is a modern version of the Processing language.</p> <p>Processing is a flexible software system and a language for learning how to code within the context of animation. It was developed by Casey Reas and Ben Fry, who were then graduate students at the MIT Media Lab. The project began in 2001 and was officially launched in 2003.  Because of its widespread adoption by the open-source community, it is now supported by the Processing Foundation.</p> <p>The key ideas behind Processing include:</p> <ol> <li> <p>Accessibility for Beginners: Processing was designed to serve as the first programming language for artists and designers. It simplifies many aspects of programming and graphics, making it more accessible and less intimidating for beginners.</p> </li> <li> <p>Focus on Visual Output: The language is geared towards creating visual output, which is appealing to artists and designers. This visual focus makes programming more engaging and understandable for those who are more visually oriented.</p> </li> <li> <p>Educational Tool: Processing is widely used as a teaching tool in universities and schools. Its simplicity and immediate visual feedback make it an excellent resource for teaching the fundamentals of programming and digital art.  Immediate visual feedback is a key feature in helping students to learn to code.</p> </li> <li> <p>Open Source and Community Driven: Processing is open-source, meaning that it's free to use and modify. This has led to a large, active community of users who contribute to its development and share their work, further enriching the tool's capabilities and resources.</p> </li> <li> <p>Extensibility and Libraries Processing is not just a language but also an integrated development environment (IDE). It supports extensibility through libraries, allowing users to expand its capabilities. These libraries can be used for a wide range of applications, from computer vision to 3D graphics, contributing to its versatility in creating simulations.</p> </li> <li> <p>Ease of Creating Simulations: Processing simplifies the process of programming graphical simulations. Its straightforward syntax and rich set of drawing functions allow users to quickly prototype and visualize complex systems. This ease of use in creating interactive graphics and simulations is one of its most appealing aspects for artists, designers, and educators.</p> </li> </ol> <p>Overall, Processing stands out for its focus on the arts and design, its ease of use, and its strong community support, all of which contribute to its popularity for creating simulations and visual arts projects.</p>"},{"location":"setup/02-system-prompt/","title":"Setting up a System Prompt","text":"<p>With ChatGPT you can setup a single system prompt for generating p5.js MicroSims.</p> <p>Here is a sample systems prompt.</p> <pre><code>1. Generate a single file p5.js sketch.\n2. Do not generate any html files.\n3. Set the width and height of the canvas as global variables before the setup.\n4. Use a default text of 16 by placing the textSize(16) in the setup.\n5. Use a background fill of 245 (light gray) for the drawing area.\n6. Place the controls - sliders and buttons - on a white background - 255\n7. Always place a label and value before each slider using the text() function.\n8. DO NOT place a slider on the canvas without a label and value before it.\n9. Indent the slider to allow the label and value to be place to the left of the slider.\nUse the slider style function to make the slider span the width of the canvas less\nthe margin for the lable and value.\nPlace all the sliders at the bottom of the canvas.\nAlign the sliders vertically.\n\nUse the following template:\n\n\nlet width = 400;\nlet height = 300;\nfunction draw {\n    const canvas = createCanvas(width, height)\n}\n</code></pre>"},{"location":"setup/03-sound-test/","title":"Sound Test","text":"<p>Make sure you add the following line to your .html file:</p> <pre><code>    &lt;script src=\"../js/p5.sound.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>The line can be place right after the loading of the p5.js library in the html head section.</p> <pre><code>&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;String Harmonics&lt;/title&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"../js/p5.sound.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>We suggest having the default mode of a sim have the sound off.  Add a button to turn the sound on.</p>"},{"location":"setup/04-structure/","title":"Structure of a MicroSim Demonstration","text":"<p>To make it easier for developers to understand and reuse our MicroSims, we are proposing the following directory and file standards.</p>"},{"location":"setup/04-structure/#required-components","title":"Required Components","text":"<ol> <li>Directory with the name of the app</li> <li>index.md file within this directory.  The index.md file has a link the HTML file.</li> <li>HTML file that displays the application.  It also loads the JavaScript file and provides a link back to the main index.md file.</li> <li>JavaScript file that holds the simulation code.  </li> </ol>"},{"location":"setup/04-structure/#optional-components","title":"Optional Components","text":"<ol> <li>An image of the working simulation.</li> <li>A sample set of one or more prompts that were used to generate the simulation.</li> <li>Sample of code that was generated</li> <li>Related simulations</li> </ol>"},{"location":"setup/p5-reference-manual/","title":"P5.js Reference Guide","text":""},{"location":"setup/p5-reference-manual/#canvas","title":"Canvas","text":"<p>The area where p5.js drawings are displayed. Created using <code>createCanvas()</code>. A good example is a canvas that is 400 wide and 300 high. We can use two global variables to declare these dimensions.</p> <pre><code>let width = 400\nlet height = 300\nfunction setup() {\nconst canvas = createCanvas(width, height);\n// code to connect your canvas into the HTML\n// canvas.parent('canvas-container');\n// uncommet this line only within the HTML file\n}\n</code></pre>"},{"location":"setup/p5-reference-manual/#setup","title":"setup()","text":"<p>Called once at the start of the program to define initial environment properties.</p> <pre><code>let width = 400\nlet height = 300\nfunction setup() {\ncreateCanvas(width, height);\nbackground(245);\n}\n</code></pre>"},{"location":"setup/p5-reference-manual/#draw","title":"draw()","text":"<p>Continuously executes the lines of code inside its block until stopped.</p> <pre><code>function draw() {\n// draw a circle in the center\ncircle(width/2, height/2, 50);\n}\n```\n\n#### createVector()\n\nCreates a new `p5.Vector` object with a x and y value.\n\n  ```javascript\nlet v = createVector(50, 50);\n```\n\n#### mouseX, mouseY\n- System variables storing the coordinates of the mouse.\n  ```javascript\nfunction draw() {\ncircle(mouseX, mouseY, 50);\n}\n```\n\n#### background()\nSets the color used for the canvas background.  Our default should be 245\nwhich is a light gray.\n\n  ```javascript\nfunction setup() {\ncreateCanvas(400, 400);\nbackground(255); // White background\n}\n```\n\n#### fill()\n\nSets the color used to fill shapes.\n\n```javascript\nfunction draw() {\nfill(255, 0, 0); // Red color\nellipse(50, 50, 80, 80);\n}\n</code></pre>"},{"location":"setup/p5-reference-manual/#stroke","title":"stroke()","text":"<p>Sets the color used for lines and borders around shapes.   <pre><code>function draw() {\nstroke(0); // Black color\nline(0, 0, 100, 100);\n}\n</code></pre></p>"},{"location":"setup/p5-reference-manual/#rect","title":"rect()","text":"<ul> <li>Draws a rectangle.   <pre><code>function draw() {\nrect(30, 20, 55, 55);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#ellipse","title":"ellipse()","text":"<ul> <li>Draws an ellipse (oval).   <pre><code>function draw() {\nellipse(50, 50, 80, 80);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#line","title":"line()","text":"<ul> <li>Draws a line.   <pre><code>function draw() {\nline(30, 20, 85, 75);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#loadimage","title":"loadImage()","text":"<ul> <li>Loads an image from a path.   <pre><code>let img;\nfunction preload() {\nimg = loadImage('image.png');\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#image","title":"image()","text":"<ul> <li>Draws an image to the canvas.   <pre><code>function draw() {\nimage(img, 0, 0);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#creategraphics","title":"createGraphics()","text":"<ul> <li>Creates a new graphics object.   <pre><code>let pg;\nfunction setup() {\ncreateCanvas(100, 100);\npg = createGraphics(50, 50);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#translate","title":"translate()","text":"<ul> <li>Remaps the (0,0) position on the canvas.   <pre><code>function draw() {\ntranslate(width / 2, height / 2);\nrect(0, 0, 30, 30);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#rotate","title":"rotate()","text":"<ul> <li>Rotates the entire canvas.   <pre><code>function draw() {\nrotate(PI / 4);\nrect(50, 50, 100, 50);\n}\n</code></pre></li> </ul>"},{"location":"setup/p5-reference-manual/#push","title":"push()","text":"<p>Saves the current drawing style settings and transformations.   <pre><code>function draw() {\npush();\nstroke(0);\nfill(102);\nrect(0, 0, 50, 50);\npop();\n}\n</code></pre></p>"},{"location":"setup/p5-reference-manual/#pop","title":"pop()","text":"<p>Restores the drawing style settings and transformations previously saved.   <pre><code>// Used in conjunction with push() as shown above.\n</code></pre></p>"},{"location":"setup/p5-reference-manual/#framerate","title":"frameRate()","text":"<p>Specifies the number of frames to be displayed every second.   <pre><code>function setup() {\nframeRate(30);\n}\n</code></pre></p>"},{"location":"setup/p5-reference-manual/#noloop","title":"noLoop()","text":"<p>Stops the draw loop.  This can be used when a drawing is finished.   <pre><code>function draw() {\nellipse(50, 50, 80, 80);\nnoLoop();\n}\n</code></pre></p>"},{"location":"setup/p5-reference-manual/#loop","title":"loop()","text":"<p>Restarts the draw loop after it has been stopped.</p> <pre><code>function mousePressed() {\nloop();\n}\n</code></pre>"},{"location":"setup/p5-reference-manual/#keypressed","title":"keyPressed()","text":"<p>Called whenever a key is pressed.</p> <pre><code>function keyPressed() {\nif (keyCode === LEFT_ARROW) {\n// Left arrow key pressed\n}\n}\n</code></pre>"},{"location":"setup/p5-reference-manual/#mousepressed","title":"mousePressed()","text":"<p>Called whenever a mouse button is pressed.   <pre><code>function mousePressed() {\nellipse(mouseX, mouseY, 80, 80);\n}\n</code></pre></p>"},{"location":"sims/alu/","title":"Simulation of an Arithmetic Logic Unit (ALU)","text":"<p>Prompt:</p> <pre><code>Create a single file ps.js sketch on a 400x400 canvas.\nThe sketch is a simulation of an Arithmetic Logic Unit (ALU).\nPlace a title \"Arithmetic Logic Unit\" on the top center of the canvas of text size 16.\nThe inputs are two registers: A and B.\nPlace the labels for the registers to the left of text inputs.\nPlace the input registers so the align vertically.\nPlace buttons for the operations below the registers.\nThe operation are: ADD, SUBTRACT, AND, OR, XOR.\nDisplay the value of the output below the operations.\nLabel the output value \"Output\" in blue text.\nCreate an input toggle button to display all values in either binary or decimal.\nMake the default value be decimal.\n</code></pre> <p>Demo</p> <pre><code>let inputA;\nlet inputB;\nlet outputP;\nlet binDecToggle;\nlet isBinary = false;\n\nfunction setup() {\ncreateCanvas(400, 400);\nbackground(220);\ntextAlign(CENTER, CENTER);\n\n// Title\ntextSize(16);\ntext(\"Arithmetic Logic Unit\", width/2, 20);\n\n// Register A\ntext(\"Register A:\", 60, 60);\ninputA = createInput('201');\ninputA.position(110, 50);\n\n// Register B\ntext(\"Register B:\", 60, 100);\ninputB = createInput('100');\ninputB.position(110, 90);\n\n// Operations\nlet addBtn = createButton('ADD');\naddBtn.position(20, 140);\naddBtn.mousePressed(() =&gt; performOperation(\"ADD\"));\n\nlet subBtn = createButton('SUBTRACT');\nsubBtn.position(70, 140);\nsubBtn.mousePressed(() =&gt; performOperation(\"SUBTRACT\"));\n\nlet andBtn = createButton('AND');\nandBtn.position(165, 140);\nandBtn.mousePressed(() =&gt; performOperation(\"AND\"));\n\nlet orBtn = createButton('OR');\norBtn.position(220, 140);\norBtn.mousePressed(() =&gt; performOperation(\"OR\"));\n\nlet xorBtn = createButton('XOR');\nxorBtn.position(265, 140);\nxorBtn.mousePressed(() =&gt; performOperation(\"XOR\"));\n\n// Output label\nfill('blue');\ntext(\"Output:\", 60, 200);\n\n// Output display\noutputP = createP(\"0\");\noutputP.position(110, 175);\n\n// Binary/Decimal toggle button\nbinDecToggle = createButton('Toggle Binary/Decimal');\nbinDecToggle.position(100, 220);\nbinDecToggle.mousePressed(toggleBinDec);\n}\n\nfunction draw() {\n// nothing\n}\n\nfunction performOperation(operation) {\nlet a = int(inputA.value());\nlet b = int(inputB.value());\n\nlet result;\n\nswitch (operation) {\ncase \"ADD\":\nresult = a + b;\nbreak;\ncase \"SUBTRACT\":\nresult = a - b;\nbreak;\ncase \"AND\":\nresult = a &amp; b;\nbreak;\ncase \"OR\":\nresult = a | b;\nbreak;\ncase \"XOR\":\nresult = a ^ b;\nbreak;\n}\n\n// Convert decimal number to binary\nfunction dec_bin(decNum) {\nif (decNum === 0) return \"0\";\n\nlet binary = \"\";\nwhile (decNum &gt; 0) {\nbinary = (decNum % 2) + binary;\ndecNum = Math.floor(decNum / 2);\n}\nreturn binary;\n}\n\nif (isBinary) {\noutputP.html(dec_bin(result));\n} else {\noutputP.html(result.toString());\n}\n}\n\nfunction toggleBinDec() {\nisBinary = !isBinary;\n\nperformOperation(\"ADD\"); // Refresh the value on toggle\n}\n</code></pre>"},{"location":"sims/alu/#challenges","title":"Challenges","text":"<p>Real ALUs also keep track of several bits if information about the result of the arithmetic such as if there were overflows.</p> <p>Challenges</p> <ol> <li>Add a bit to indicate the result is non-zero.</li> <li>Add a sign flag to indicate the number is non-negative</li> <li>Add a carry flag to indicate that the result fits in 16 bits</li> <li>Add an overflow flag to indicate that the sum of two numbers is also positive</li> </ol>"},{"location":"sims/alu/#references","title":"References","text":"<p>I love this small simulator from CircuitVerse:</p> <p>Four Bit ALU on CircuitVerse - This shows the process of using an OpCode which is a number for an operation. The carry bit does not work in this example.</p> <p>A much better example is here:</p> <p>University of New Brunswick EE3221 Course</p> <p>That version is a binary only but it includes the following flags:</p> <p>Flags The Zero flag (Z) is 0 because the result is non-zero</p> <p>The Sign flag (N) is 0 because the result appears non-negative (the MSB is 0)</p> <p>The Carry flag (C) is 0 (good) because the addition result did not exceed 16-bits. This would be of interest if (RA,RB) represent unsigned integers (0..65535).</p> <p>The Overflow flag (V) is 0 (good) because adding two positive numbers gave a positive result. This would be of interest if (RA,RB) represent signed integers (-32768..+32767).</p>"},{"location":"sims/analog-clock/","title":"Analog Clock Face","text":""},{"location":"sims/analog-clock/#prompt","title":"Prompt","text":"<pre><code>Create a single p5.js sketch file that uses a 400x400 canvas.\nThe file is a simulation of an analog clock face.\nThe clock face has a black background.\nThe clock has white hands for the minute and hour hand.\nThe clock as a red second hand.\nThere are two modes: manual and automtic\nManual mode allows the use to manually set the time using three sliders for hours, minute and seconds.\nAutomatic mode use the local time to update the display.\nAdd labels and values for the sliders.\nMake sure to reenable the controls as we switch back to manual mode.\n</code></pre> <p>Link to Demo</p>"},{"location":"sims/analog-clock/#code","title":"Code","text":"<p>This is a wonderful lab to demonstrate some use of the trigonomic functions sine() and cosine().  We ask the question:</p> <p>Write some Python code that will take in the seconds as a number from 0 to 59 and it will return the x and y positions of the tip of the second hand.</p> <pre><code>// Draw second hand\n// convert seconds to radians\nsecondHand = map(sc, 0, 60, 0, TWO_PI) - HALF_PI;\n// draw a line from the center of the canvas to the endpoint\nline(0, 0, cos(secondHand) * canvasSize / 2.5, sin(secondHand) * canvasSize / 2.5);\n</code></pre>"},{"location":"sims/analog-clock/#full-program-source","title":"FUll Program Source","text":"<pre><code>let canvasSize = 400;\nlet hourHand, minuteHand, secondHand;\nlet hourSlider, minuteSlider, secondSlider;\nlet manualMode = true;\n\nfunction setup() {\n  const canvas = createCanvas(400, 400);\n  // use this line in the web\n  canvas.parent('canvas-container');\n  // use this in editor\n  // createCanvas(canvasSize, canvasSize);\n  background(0);\n\n  // Create sliders for manual mode\n  hourSlider = createSlider(0, 11, 0);\n  hourSlider.position(10, canvasSize + 10);\n\n  minuteSlider = createSlider(0, 59, 0);\n  minuteSlider.position(10, canvasSize + 40);\n\n  secondSlider = createSlider(0, 59, 0);\n  secondSlider.position(10, canvasSize + 70);\n\n  let modeButton = createButton('Switch Mode');\n  modeButton.position(10, canvasSize + 100);\n  modeButton.mousePressed(switchMode);\n}\n\nfunction draw() {\n  background(0);\n  translate(canvasSize / 2, canvasSize / 2);\n\n  let hr, mn, sc;\n  if (manualMode) {\n    hr = hourSlider.value();\n    mn = minuteSlider.value();\n    sc = secondSlider.value();\n  } else {\n    let now = new Date();\n    hr = now.getHours() % 12;\n    mn = now.getMinutes();\n    sc = now.getSeconds();\n  }\n\n  // Draw hour hand\n  stroke(255);\n  strokeWeight(10);\n  hourHand = map(hr, 0, 12, 0, TWO_PI) - HALF_PI;\n  line(0, 0, cos(hourHand) * canvasSize / 4, sin(hourHand) * canvasSize / 4);\n\n  // Draw minute hand\n  strokeWeight(8);\n  minuteHand = map(mn, 0, 60, 0, TWO_PI) - HALF_PI;\n  line(0, 0, cos(minuteHand) * canvasSize / 3, sin(minuteHand) * canvasSize / 3);\n\n  // Draw second hand\n  stroke(255, 0, 0);\n  strokeWeight(4);\n  secondHand = map(sc, 0, 60, 0, TWO_PI) - HALF_PI;\n  line(0, 0, cos(secondHand) * canvasSize / 2.5, sin(secondHand) * canvasSize / 2.5);\n}\n\nfunction switchMode() {\n  manualMode = !manualMode;\n\n  // disable the controls\n  if manualMode {\n    hourSlider.attribute('disabled', !manualMode);\n    minuteSlider.attribute('disabled', !manualMode);\n    secondSlider.attribute('disabled', !manualMode);\n  } else {\n    hourSlider.attribute('enabled', !manualMode);\n    minuteSlider.attribute('enabled', !manualMode);\n    secondSlider.attribute('enabled', !manualMode);\n  }\n\n}\n</code></pre>"},{"location":"sims/bouncing-ball/","title":"Bouncing Ball","text":"<p>The bouncing ball is the \"Hello World!\" of the Processing system. It contains the key element that shows the power of Processing: graphics with movement.  In the area of MicroSims, we also want clearly visible user interface elements that can control the running of our simulations.  This version contains a  slider to control the speed of the ball's movement.</p>"},{"location":"sims/bouncing-ball/#prompt","title":"Prompt","text":"<p>Here is a precise prompt to get you started.</p> <pre><code>Generate a single p5.js sketch on a 500x300 canvas.\nThe sketch shows a ball boucing around a rectagular area.\nThe canvas should be 500 wide and 300 high.\nThe default text size is 16.\nThe ball is blue and has a radius of 20.\nThere is a slider that changes the speed from 0 to 20 with a default speed of 3.\nThe slider should be placed at the bottom of the canvas.\nThe slider should have a label \"Speed: \" and the speed value to the left of the slider.\nThe slider should span the width of the canvas after the label and value.\nDD NOT use objects - just functions.\n</code></pre> <p>Copy the prompt into ChatGPT.  It will generate a JavaScript file you can copy and paste or download into the p5.js editor to test.</p> <p>Here are two examples:</p> <ul> <li>Link to Version 1 Demo - the simplest code source</li> <li>Link to Version 2 Demo - with fixes for radius and display area source</li> </ul>"},{"location":"sims/bouncing-ball/#sample-code","title":"Sample Code","text":"<pre><code>// bouncing ball - version 1\n// designed for use using touch sensitive whiteboard in a classroom\n\nlet width = 500;\nlet height = 350;\nlet drHieght = 320; // region for drawing\nr = 20; // radius of the ball\n\n// initial position\nx = 100;\ny = 100;\nspeed = 3; // default speed\n// direction of motion\ndx = speed;\ndy = speed;\nsliderLeftMargin = 83;\n\nfunction setup() {\nconst canvas = createCanvas(width, height);\n// canvas.parent('canvas-container');\nspeedSlider = createSlider(0, 20, speed);\nspeedSlider.position(sliderLeftMargin, height - 25);\nspeedSlider.style('width', width - sliderLeftMargin - 15 + 'px');\n}\n\nfunction draw() {\nbackground(240);\ntextSize(16);\n\nspeed = speedSlider.value()\nif (dx &gt; 0) dx = speed;\nelse dx = -speed;\n\nif (dy &gt; 0) dy = speed;\nelse dy = -speed;\n\n// Add the current speed to the position.\nx += dx;\ny += dy;\n\nif ((x &gt; width) || (x &lt; 0)) {\ndx = dx * -1;\n}\nif ((y &gt; drHieght) || (y &lt; 0)) {\ndy = dy * -1;\n}\n\nfill('blue');\ncircle(x, y, r*2);\nfill('black');\ntext('Speed: ' + speed, 10, height-10)\n}\n</code></pre>"},{"location":"sims/bouncing-ball/#use-in-classroom","title":"Use In Classroom","text":"<ol> <li>Physics Lesson: Use this simulation to discuss concepts like velocity, acceleration, and kinetic energy. Ask students to predict how changing the speed will affect the ball's movement.</li> <li>Math Integration: Introduce concepts of geometry and algebra, such as calculating the ball's trajectory or the distance traveled over time.</li> <li>Coding Concepts: Use this as a base for teaching basic programming concepts, such as variables, functions, and object-oriented programming. Students can modify the code to change the ball's size, color, or even add more balls.</li> </ol>"},{"location":"sims/bouncing-ball/#lesson-plan-for-a-9th-grade-physical-science-class","title":"Lesson Plan for a 9th-Grade Physical Science Class","text":""},{"location":"sims/bouncing-ball/#objective","title":"Objective","text":"<p>Students will understand the concepts of kinetic and potential energy, and how these energies are transformed during the motion of a bouncing ball.</p>"},{"location":"sims/bouncing-ball/#materials","title":"Materials","text":"<ul> <li>Computer with internet access for the p5.js editor.</li> <li>The bouncing ball simulation (as provided in the previous response).</li> <li>Whiteboard or chalkboard.</li> <li>Writing materials for students.</li> </ul>"},{"location":"sims/bouncing-ball/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/bouncing-ball/#introduction-10-minutes","title":"Introduction (10 minutes)","text":"<ul> <li>Begin with a brief discussion on energy: what it is and its different forms, focusing on kinetic and potential energy.</li> <li>Introduce the concept of energy transformation, particularly how potential energy is converted to kinetic energy and vice versa.</li> </ul>"},{"location":"sims/bouncing-ball/#demonstration-15-minutes","title":"Demonstration (15 minutes)","text":"<ul> <li>Display the bouncing ball simulation to the class.</li> <li>Show how the ball\u2019s speed (kinetic energy) increases as it falls (due to potential energy converting to kinetic energy) and decreases as it rises (kinetic converting back to potential).</li> </ul>"},{"location":"sims/bouncing-ball/#interactive-activity-20-minutes","title":"Interactive Activity (20 minutes)","text":"<ul> <li>Have the students access the simulation on their computers.</li> <li>Ask them to experiment with different speeds and observe the ball\u2019s behavior.</li> <li>Prompt questions for exploration: </li> <li>How does changing the speed affect the ball\u2019s motion?</li> <li>Can they identify when the ball has the most kinetic or potential energy?</li> </ul>"},{"location":"sims/bouncing-ball/#group-discussion-15-minutes","title":"Group Discussion (15 minutes)","text":"<ul> <li>Bring the class back together to discuss their observations.</li> <li>Facilitate a conversation about how the simulation demonstrates the concepts of kinetic and potential energy.</li> <li>Discuss real-world examples, like a roller coaster or a skateboarder in a halfpipe.</li> </ul>"},{"location":"sims/bouncing-ball/#concept-application-20-minutes","title":"Concept Application (20 minutes)","text":"<ul> <li>Provide a worksheet with problems related to kinetic and potential energy.</li> <li>Include problems where students calculate the potential energy at the ball\u2019s highest point and the kinetic energy at different points of the motion.</li> <li>Students can use the simulation to visually understand the problems.</li> </ul>"},{"location":"sims/bouncing-ball/#wrap-up-and-reflection-10-minutes","title":"Wrap-Up and Reflection (10 minutes)","text":"<ul> <li>Summarize the key concepts learned in the lesson.</li> <li>Ask students to write a short paragraph on how the simulation helped them understand the energy transformation.</li> </ul>"},{"location":"sims/bouncing-ball/#homework","title":"Homework","text":"<ul> <li>Assign a project where students create their own simulation or modify the existing one to demonstrate a different physics concept.</li> </ul>"},{"location":"sims/bouncing-ball/#assessment","title":"Assessment","text":"<ul> <li>Participation in the interactive activity and group discussion.</li> <li>Accuracy and understanding shown in the worksheet.</li> <li>Reflection paragraph and homework project.</li> </ul>"},{"location":"sims/bouncing-ball/01-bounce/","title":"Bouncing Ball","text":""},{"location":"sims/bouncing-ball/brownian-motion/","title":"Browian Motion","text":""},{"location":"sims/bouncing-ball/brownian-motion/#brownian-motion","title":"Brownian Motion","text":"<p>A classic physics simulation where the user can adjust the temperature and number of molecules in the simulation.</p> <p>Brownian Motion</p> <p>Prompt</p> <pre><code>Generate a 2D p5.js simulation of Brownian motion on a 600x400 canvas.\nUse\nSimulate a set of gas molecules in a chamber.  \nAdd two in-chart range control sliders for temperature and number of molecules.\nAdd labels and values to the range control sliders.\nPlace the labels, values an sliders at the bottom of the canvas.\n</code></pre>"},{"location":"sims/bouncing-ball/brownian-motion/#sample-code","title":"Sample Code","text":""},{"location":"sims/circle/circle/","title":"Circle Slider","text":"<p>Here is a simple example that you can start with.  The ChatGPT prompt would be the following:</p> <pre><code>Generate a single p5.js sketch file that draws a blue circle\nin the center of a 400x400 canvas.\n\nCreate a range control slider that allows the radius to be\nadjusted from 0 to 200.\n\nUse the text() function within the draw() function to display the\nlabel and current value of the radius.\n</code></pre> <p>Circle Slider</p> <pre><code>let radiusSlider;\nlet radius = 0;\n\nfunction setup() {\ncreateCanvas(400, 400);\n\n// Create the radius slider\nradiusSlider = createSlider(0, 200, 100);\nradiusSlider.position(10, 10);\n}\n\nfunction draw() {\nbackground(220);\n\n// Fetch the current radius from the slider\nradius = radiusSlider.value();\n\n// Draw the circle\nfill(0, 0, 255);\nnoStroke();\ncircle(width / 2, height / 2, radius * 2);\n\n// Display the radius value\nfill(0);\ntext(\"Radius: \" + radius, 10, 50);\n}\n</code></pre> <p>Circle Slider Demo</p>"},{"location":"sims/circuits/circuits-v2/","title":"Circuits","text":""},{"location":"sims/circuits/circuits-v2/#background","title":"Background","text":"<p>Creating a simulation of a basic electrical circuit with an on/off switch, a battery, and a light bulb is a great way to teach students about electricity and circuits. We'll use p5.js to create this interactive simulation. In this simulation, students can toggle the switch to turn the light bulb on and off, visually seeing how closing and opening a circuit works.</p> <p>Here's a basic outline of the p5.js code for this simulation:</p> <ol> <li>Setup: Define the canvas and initial state of the switch (on or off).</li> <li>Draw: Render the battery, switch, and light bulb. The light bulb's brightness changes based on the switch's state.</li> <li>Mouse Interaction: Allow the switch to be toggled on and off with a mouse click.</li> </ol>"},{"location":"sims/circuits/circuits-v2/#classroom-implementation-ideas","title":"Classroom Implementation Ideas","text":"<p>Concept Visualization: Use this simulation to help students visualize how a simple circuit works, emphasizing the role of each component. Interactive Learning: Encourage students to toggle the switch and observe changes, fostering understanding through interaction. Critical Thinking: Pose questions like \"What happens if the battery is reversed?\" or \"What changes if we add another light bulb?\"</p>"},{"location":"sims/circuits/circuits-v2/#further-extensions","title":"Further Extensions","text":"<p>Additional Components: Introduce resistors or variable resistors (like a potentiometer) to the circuit. Circuit Diagrams: Have students draw the circuit diagram based on the simulation, then build the actual circuit using physical components. Exploring Variables: Modify the code to represent different battery voltages or bulb wattages.</p>"},{"location":"sims/circuits/circuits-v2/#demos-of-circuits","title":"Demos of Circuits","text":"<ol> <li>Simple Circuit</li> <li>Switch</li> <li>Battery With LED Circuit</li> <li>Wire Animate</li> <li>Motor Circuit</li> <li>H-Bridge</li> </ol>"},{"location":"sims/circuits/circuits-v2/#sample-prompt","title":"Sample Prompt","text":"<p>```linenubs=\"0\" Create a single file p5.js sketch on a 300x200 canvas. Subject: simple electrical circiuts. Create a simulation of an electrical circuit with a batter, an on/off switch, a light bulb and the connecting wires. Make the default text size be 16. Add the title \"Click Anywhere to Toggle The Switch\" to the top of the canvas. Place the battery standing vertically on the left with the positive side up and the negative side down. Draw the top of the battery as a gold rectangle on the top with a \"+\" on it. Draw the bottom of the battery as a black rectangle \"-\" near the bottom. The top row of connection points are at y=50. The bottom row of connection points are at y=150. Make the wires toogle from black (circuit off) to red (circuit on). Make all the wires width 3. Make the switch be a rectangle that is horizontal and 50px wide when on. Make the swtich rectangle rotate up 45 degrees when the switch is off. Complete the circuit with the light going to the negative battery terminal in a column at x=250. Make sure to reset the stroke width to 0 after drawing wires. Allow the user to click anywhere on the canvas to toggle the switch.</p> <pre><code>## Sample Code\n\n```js\nlet switchOn = false; // Initial state of the switch\nlet switchAngle = 45; // Angle of the switch when off\n\nfunction setup() {\n  createCanvas(300, 200);\n  textSize(16);\n}\n\nfunction draw() {\n  background(220);\n\n  // Draw title\n  fill(0);\n  strokeWeight(0);\n  text(\"Click Anywhere to Toggle The Switch\", 10, 20);\n\n  // Draw the battery\n  drawBattery();\n\n  // Draw the switch\n  drawSwitch();\n\n  // Draw the light bulb\n  drawLightBulb();\n\n  // Draw wires\n  drawWires();\n}\n\nfunction drawBattery() {\n  fill('grey');\n  rect(20, 100, 20, 50); // battery body\n  rect(20, 95, 20, 5); // positive terminal\n  rect(20, 150, 20, 5); // negative terminal\n}\n\nfunction drawSwitch() {\n  push();\n    translate(80, 50); // Move origin to switch pivot\n    rotate(radians(switchOn ? 0 : switchAngle)); // Rotate when off\n    fill('black');\n    rect(0, 0, 50, 10); // switch\n  pop();\n}\n\nfunction drawLightBulb() {\n  if (switchOn) {\n    fill('yellow');\n  } else {\n    fill('white');\n  }\n  ellipse(250, 50, 30, 30); // light bulb\n}\n\nfunction drawWires() {\n  stroke(switchOn ? 'red' : 'black');\n  strokeWeight(3);\n\n  // Wire from battery top to switch\n  line(40, 100, 40, 50);\n  line(40, 50, 80, 50);\n\n  // Wire from switch to light bulb\n  line(130, 50, 250, 50);\n\n  // Wire from light bulb to battery bottom\n  line(250, 50, 250, 150);\n  line(250, 150, 40, 150);\n}\n\nfunction mousePressed() {\n  switchOn = !switchOn; // Toggle the switch\n  switchAngle = switchOn ? 0 : 45; // Adjust switch angle\n}\n</code></pre>"},{"location":"sims/circuits/circuits/","title":"Battery Circuit","text":"<p>In this lesson, we will create an animation of a circuit that includes:</p> <ol> <li>A battery</li> <li>An on/off switch</li> <li>A resistor</li> <li>An LED</li> <li>Wires that connect the components in a series loop</li> </ol> <p>We will use the Animated Wire demo that we did in a prior lab.</p> <p>We will break the problem down into ChatGPT prompts that animate and test individual components. We will then concatenate the components into a main animation file.</p> <p>This is the most complex program we have generated so far.  It requires us to first use ChatGPT to create several functions:</p> <ol> <li>A drawBattery function that draws the positive and negative parts of a battery</li> <li>A drawSwitch function that will toggle on or off</li> <li>A resistor function that draws a resistor zig-zag symbol</li> <li>An LED function that is black in the off state and red in the on state</li> <li>An animate wire function that animates the flow of current (see the previous example)</li> </ol> <p>Once we have functions for all these components, we can then assemble them together in an entire simulation.  You will find that ChatGPT will not usually get the the layout wrong and you will need to adjust the positions of the wires.</p> <p>Battery Circuit Demo</p>"},{"location":"sims/conway/","title":"Conway's Game of Life","text":"<p>Conway's Game of Life is a simple simulator of cells.  This is a class of simulation called Cellular Automata</p> <p>Demo of Conway's Game of Life</p>"},{"location":"sims/h-bridge/","title":"H-Bridge Circuit","text":"<p>An H-bridge circuit is four switches around a motor in the shape of the letter \"H\". The motor is at the center of the letter \"H\". When the upper-left and lower-right switches are closed, the motor spins one direction. When the lower-left and upper-right switches are closed, the motor spins in the opposite direction.</p> <p></p> <p>H-Bridge Demo</p> <pre><code>Generate a single p5.js sketch file.\n\nDraw an H-bridge circuit for reversing the direction of a DC motor.\n\nHave three state buttons for \"Forward\", \"Stop\" and \"Reverse\".\nPlace the positive power rail at the top of the circuit.\nPlace the negative rail at the bottom of the circuit.\nPlace the motor in the center of the H-brige ciricut.\nAnimate the motor moving clockwise for the Forward state.\nAnimate the motor going counter-clockwise for the Reverse state.\nMake the motor stopped for the Stop state.\nHave the upper left and lower right wires animate current for the Forward state.\nHave the upper right and lower left wires animate current for the Reverse state.\nTurn off all wire animation for the Stop state.\n\nCreate four knife switches.\nHave the upper left and lower right be closed for Forward.\nHave the upper right and lower left be closed for Reverse.\nHave all the switches be open for Stop.\n\nUse the following function to draw current in a wire:\n\nfunction drawAnimatedWire(x1, y1, x2, y2, speed1, state) {\n    if (state) {\n        let distance = dist(x1, y1, x2, y2);\n        let circlePos = map((millis() * speed1) % distance, 0, distance, 0, 1);\n\n        // lerp generates the percent between two values\n        let x = lerp(x1, x2, circlePos);\n        let y = lerp(y1, y2, circlePos);\n\n        stroke(0);\n        strokeWeight(lineWidth)\n        line(x1, y1, x2, y2); // Draw the wire\n\n        fill(255, 0, 0);\n        noStroke();\n        circle(x, y, 10); // Draw the moving circle (electron)\n    } else {\n        stroke(0);\n        strokeWeight(lineWidth)\n        line(x1, y1, x2, y2); // Draw the wire\n    }\n}\n</code></pre>"},{"location":"sims/h-bridge/#response","title":"Response","text":"<p>Sure! Here's a p5.js sketch file that implements the H-bridge circuit with state buttons for \"Forward,\" \"Stop,\" and \"Reverse\":</p> <pre><code>let forwardButton;\nlet stopButton;\nlet reverseButton;\n\nconst lineWidth = 2;\n\nfunction setup() {\ncreateCanvas(400, 400);\n\nforwardButton = createButton('Forward');\nforwardButton.position(10, 10);\nforwardButton.mousePressed(forward);\n\nstopButton = createButton('Stop');\nstopButton.position(90, 10);\nstopButton.mousePressed(stop);\n\nreverseButton = createButton('Reverse');\nreverseButton.position(150, 10);\nreverseButton.mousePressed(reverse);\n}\n\nfunction forward() {\n// Code to control the H-bridge for forward motion\n}\n\nfunction stop() {\n// Code to stop the motor\n}\n\nfunction reverse() {\n// Code to control the H-bridge for reverse motion\n}\n\nfunction draw() {\nbackground(220);\n\n// Draw positive power rail\nstroke(0);\nstrokeWeight(lineWidth);\nline(40, 60, width - 40, 60);\n\n// Draw negative power rail\nstroke(0);\nstrokeWeight(lineWidth);\nline(40, height - 60, width - 40, height - 60);\n\n// Draw H-bridge circuit\nstroke(0);\nstrokeWeight(lineWidth);\nline(width / 2 - 40, 60, width / 2 - 40, height - 60);\nline(width / 2 + 40, 60, width / 2 + 40, height - 60);\nline(width / 2 - 40, height / 2, width / 2 + 40, height / 2);\n\n// Draw motor\nnoFill();\nstroke(0);\nstrokeWeight(lineWidth);\nrect(width / 2 - 20, height / 2 - 20, 40, 40);\n\n// Draw wires with current\nlet speed1 = 0.01;\ndrawAnimatedWire(40, 60, width / 2 - 40, 60, speed1, forwardButton.elt.disabled);\ndrawAnimatedWire(width / 2 + 40, 60, width - 40, 60, speed1, reverseButton.elt.disabled);\ndrawAnimatedWire(40, height - 60, width / 2 - 40, height - 60, speed1, reverseButton.elt.disabled);\ndrawAnimatedWire(width / 2 + 40, height - 60, width - 40, height - 60, speed1, forwardButton.elt.disabled);\n}\n\nfunction drawAnimatedWire(x1, y1, x2, y2, speed1, state) {\nif (state) {\nlet distance = dist(x1, y1, x2, y2);\nlet circlePos = map((millis() * speed1) % distance, 0, distance, 0, 1);\n\n// lerp generates the percent between two values\nlet x = lerp(x1, x2, circlePos);\nlet y = lerp(y1, y2, circlePos);\n\nstroke(0);\nstrokeWeight(lineWidth);\nline(x1, y1, x2, y2); // Draw the wire\n\nfill(255, 0, 0);\nnoStroke();\ncircle(x, y, 10); // Draw the moving circle (electron)\n} else {\nstroke(0);\nstrokeWeight(lineWidth);\nline(x1, y1, x2, y2); // Draw the wire\n}\n}\n</code></pre>"},{"location":"sims/logic-gates/","title":"Logic Gates","text":"<p>In this example, we will generate a graphical simulation of Boolean logic gates. This example shows how both \"AND\" and \"OR\" gates work.  You can easily change the prompt to perform other operations such as \"NOT\", \"NAND\" and \"NOR\".</p> <p>You will note that we are explicit on the horizontal line placement location.  Generative AI is not good at doing precise layout.</p> <p>Prompt:</p> <pre><code>Create a single p5.js sketch using a 400x400 canvas.  \nThe sketch is a simulation of two simple logic gates, one \"AND\" and one \"OR\".\nThere are two input wires on the left.  \nLabel the inputs \"A\" and \"B\" using size 16 black text.\nDraw input A as a horizontal line at y=50.\nDraw input B as a horizontal line at y=150.\nHave both input wires connect to both the \"AND\" and \"OR\" logic gates.  \nThe top gate is a Boolean \"AND\" operation.  \nThe bottom gate is a Boolean an \"OR\" operation.\nAdd two input toggle buttons on the left side to control the state of the inputs.\nInitialize the initial states of the inputs to be off. \nWhen a wire is high, draw it in red.  \nWhen a wire is at ground, draw it in black.\nPlace a label \"AND\" in size 16 point test on the \"AND\" gate.\nPlace a label \"OR\" in size 16 point text over the \"AND\" gate.\n</code></pre> <p>Link to Simulation Demo</p>"},{"location":"sims/logic-gates/#sample-code","title":"Sample Code","text":"<pre><code>let inputA = false;\nlet inputB = false;\nlet buttonA, buttonB;\n\nfunction setup() {\ncreateCanvas(400, 400);\n\n// Create input buttons for A and B\nbuttonA = createButton('Toggle A');\nbuttonA.position(10, 50);\nbuttonA.mousePressed(toggleA);\n\nbuttonB = createButton('Toggle B');\nbuttonB.position(10, 150);\nbuttonB.mousePressed(toggleB);\n}\n\nfunction draw() {\nbackground(220);\ntextSize(24)\n\n// Draw the labels\nstrokeWeight(0);\nfill('black');\ntext('A', 30, 50);\ntext('B', 30, 150);\n\n\n// Draw input wires\nstrokeWeight(5)\nstroke(inputA ? 'red' : 'black');\nline(75, 50, 150, 50);\nline(75, 50, 150, 150);\nstroke(inputB ? 'red' : 'black');\nline(75, 150, 150, 150);\nline(75, 150, 150, 50);\n\n// Draw AND gate\nfill(255);\nstroke('black')\nbeginShape();\nvertex(150, 20);\nvertex(200, 20);\nvertex(220, 50);\nvertex(200, 80);\nvertex(150, 80);\nendShape(CLOSE);\n\nstrokeWeight(0);\nfill('black');\ntextSize(24)\ntext('AND', 155, 60);\n\n// Draw OR gate\nfill(255);\nstrokeWeight(5);\nstroke('black')\nbeginShape();\nvertex(150, 120);\nvertex(200, 120);\nvertex(220, 150);\nvertex(200, 180);\nvertex(150, 180);\nendShape(CLOSE);\n\nstrokeWeight(0);\nfill('black');\ntext('OR', 155, 160);\n</code></pre>"},{"location":"sims/motor/","title":"Rotating Motor","text":"<p>We want to animate a rotating motor as a circle.</p> <p>The motor must have circular arrows on it that show the direction of the rotation of the motor.  The arrows must point clockwise when we are going forward and counter-clockwise when we are going in reverse.</p>"},{"location":"sims/motor/#draw-rotating-motor","title":"Draw Rotating Motor","text":"<p>Rotating Motor Demo</p>"},{"location":"sims/motor/#draw-motor","title":"Draw Motor","text":"<p>The key here is to be able to make the motor scale to any size.  We do this by doing the following three functions:</p> <ol> <li>translate() to the center of the motor</li> <li>scale the motor to the correct size</li> <li>rotate the motor so it appers to spin in the right direction</li> </ol> <pre><code>function drawMotor(x, y, scaleVal, angle, direction) {\nangleMode(DEGREES);  // Change the mode to \npush();\n\n// order is key\ntranslate(x, y);\nscale(scaleVal);\nrotate(angle);\n\n// gray\nfill(180);\nstrokeWeight(2);\ncircle(0,0, 220)\nstrokeWeight(10);\nstroke('black')\nnoFill();\n// top circle x,y  w,h  start-ang, end-angle\narc(0, 0, 180, 180, 180, 310, OPEN);\n// bottom circle\narc(0, 0, 180, 180,   0, 130, OPEN);\n\n// forward\nif (direction == 1) {\n// up right\ndrawArrowTip(50,-75, 140)\n// lower left\ndrawArrowTip(-60, 70, -30)\n}\n// reverse\nif (direction == -1) {\n// up right x,y, ang\ndrawArrowTip(90, 0, -20)\n// lower left\ndrawArrowTip(-90, 0, 164)\n}\npop();\n}\n</code></pre>"},{"location":"sims/motor/#draw-arrow-tip","title":"Draw Arrow Tip","text":"<p>We use the <code>translate()</code> and <code>rotate()</code> functions to first get into position.  Then we use the <code>triangle()</code> function to draw the triangle at the front of the arch.</p> <pre><code>function drawArrowTip(x, y, rotationAngle) {\npush();  // Save the current drawing style and transformations\ntranslate(x, y);  // Move the origin to the given location\nrotate(rotationAngle);  // Rotate by the given angle\nfill(0);  // Set the fill color to black\nnoStroke();  // Disable drawing an outline\n// set the size\nlet sz = 20;\n// lower right, top, lower left\ntriangle(sz, 0,  0,-3*sz,   -sz,0);  // Draw the arrow tip\npop();  // Restore the previous drawing style and transformations\n}\n</code></pre> <pre><code>// scale motor test\n// Goal: add a size to the motor drawing to not require only a fixed size hard coded in the draw.\n\nlet direction = 1;\nlet radiusSlider;\nlet angle = 0;\nlet circleRadius = 100; // default value\nlet myFrameRate = 24;\n\nfunction setup() {\nconst canvas = createCanvas(400, 400);\ncanvas.parent('canvas-container');\n// this changes the entire layout\n\n\nlet forwardButton = createButton('Fwd');\nforwardButton.position(10, height-20);\nforwardButton.mousePressed(forward);\n\nlet stopButton = createButton('Stop');\nstopButton.position(55, height-20);\nstopButton.mousePressed(stop);\n\nlet reverseButton = createButton('Rev');\nreverseButton.position(105, height-20);\nreverseButton.mousePressed(turnReverse);\n\n// radiusSlider = createSlider(0, 200, circleRadius);\nscaleSlider = createSlider(.1, 2, 1, .1);\nscaleSlider.position(215, height - 35);\nscaleSlider.style('width', '180px');\n\n// radiusSlider = createSlider(0, 200, circleRadius);\nspeedSlider = createSlider(0, 20, 5, .1);\nspeedSlider.position(215, height - 16);\nspeedSlider.style('width', '180px');\nframeRate(myFrameRate);\n}\n\nfunction stop() {\ndirection = 0;\n}\n\nfunction forward() {\ndirection = 1;\n}\n\nfunction turnReverse() {\ndirection = -1;\n}\n\nfunction draw() {\nbackground(240);\n// center axis\nstroke(0);\nline(0, height / 2, width, height / 2)\nline(width / 2, 0, width/2, height)\n\n// Update the circle radius based on slider value\nscaleVal = scaleSlider.value();\nmotorSpeed = speedSlider.value();\n\n// Center the motor on the canvas\nangle += direction * motorSpeed;\n// x,y, scale,  angle, dir, speed\ndrawMotor(width / 2, height / 2, scaleVal, angle, direction)\n\n// Draw the label and the current radius value\nstroke(0);\nstrokeWeight(0);\nfill(0); // black color for the text\ntext(\"Scale: \" + scaleVal, 140, height - 30);\ntext(\"Speed: \" + motorSpeed, 140, height - 10);\n}\n\nfunction drawMotor(x, y, scaleVal, angle, direction) {\nangleMode(DEGREES);  // Change the mode to \npush();\n\n// order is key\ntranslate(x, y);\nscale(scaleVal);\nrotate(angle);\n\n// gray\nfill(180);\nstrokeWeight(2);\ncircle(0,0, 220)\nstrokeWeight(10);\nstroke('black')\nnoFill();\n// top circle x,y  w,h  start-ang, end-angle\narc(0, 0, 180, 180, 180, 310, OPEN);\n// bottom circle\narc(0, 0, 180, 180,   0, 130, OPEN);\n\n// forward\nif (direction == 1) {\n// up right\ndrawArrowTip(50,-75, 140)\n// lower left\ndrawArrowTip(-60, 70, -30)\n}\n// reverse\nif (direction == -1) {\n// up right x,y, ang\ndrawArrowTip(90, 0, -20)\n// lower left\ndrawArrowTip(-90, 0, 164)\n}\npop();\n}\n\n// draw a triangle with a base at (x,y) in the direction of rotationAngle\nfunction drawArrowTip(x, y, rotationAngle) {\npush();  // Save the current drawing style and transformations\ntranslate(x, y);  // Move the origin to the given location\nrotate(rotationAngle);  // Rotate by the given angle\nfill(0);  // Set the fill color to black\nnoStroke();  // Disable drawing an outline\n// set the size of the triangle\nlet sz = 10;\n// lower right, top, lower left\ntriangle(sz, 0,  0,-3*sz,   -sz,0);  // Draw the arrow tip\npop();  // Restore the previous drawing style and transformations\n}\n</code></pre>"},{"location":"sims/neural-network/","title":"Neural Network","text":"<p>Generate a p5.js file that draws a three layer neural network.  The input is on the left.  The output is on the right. The layer on the left should be labeled \"Input\". add slider controls that change the number of layers and the number of neurons in a layer</p> <p>Link to Chat Transcript</p> <p>Link to Demo</p> <pre><code>// Demo of parameters in neural networks\nlet width = 800;\nlet height = 400;\nlet numLayersSlider;\nlet numNeuronsSlider;\nlet parameterCount = 0;\nlet labelValueWidth = 240;\n\nlet numLayers = 3;  // Default number of layers (including Input and Output)\nlet numNeurons = 4; // Default number of neurons in each layer\n\nfunction setup() {\nconst canvas = createCanvas(width, height);\ncanvas.parent('canvas-container');\n\nnumLayersSlider = createSlider(2, 7, 3);\nnumLayersSlider.position(labelValueWidth, height - 50);\nnumLayersSlider.style('width', width - labelValueWidth - 20 + 'px')\nnumLayersSlider.input(updateNetwork);\n\n\nnumNeuronsSlider = createSlider(2, 10, 4);\nnumNeuronsSlider.position(labelValueWidth, height - 25);\nnumNeuronsSlider.input(updateNetwork);\n\nupdateNetwork();\n}\n\nfunction updateNetwork() {\nbackground(240);\n\nnumLayers = numLayersSlider.value();\nnumNeurons = numNeuronsSlider.value();\n\nlet layerPositions = Array.from({length: numLayers}, (_, i) =&gt; map(i, 0, numLayers - 1, 0.2, 0.8) * width);\n\nparameterCount = 0;\n\nfor (let i = 0; i &lt; layerPositions.length; i++) {\nlet label = \"Hidden\";\nif (i === 0) label = \"Input\";\nelse if (i === layerPositions.length - 1) label = \"Output\";\n\ndrawNodes(layerPositions[i], height / 2, numNeurons, label);\n}\n\nfor (let i = 0; i &lt; layerPositions.length - 1; i++) {\nconnectLayers(layerPositions[i], height / 2, numNeurons, layerPositions[i + 1], height / 2, numNeurons);\nparameterCount += numNeurons * numNeurons; // Adding weights\n}\n\nparameterCount += (numLayers - 1) * numNeurons; // Adding biases\n\n// Show labels and parameter count\ntextSize(16);\n// textAlign(LEFT, CENTER);\ntext('Number of Layers: ' + numLayers, 70, numLayersSlider.y);\ntext('Number of Neurons/Layer: ' + numNeurons, 70 * 1.5, numNeuronsSlider.y);\n\ntextAlign(CENTER, CENTER);\ntext('Total Parameter Count: ' + parameterCount, width / 2, height - 20);\n}\n\nfunction drawNodes(x, y, numNodes, label) {\nlet gap = 40;\nlet startY = y - ((numNodes - 1) * gap) / 2;\nfor (let i = 0; i &lt; numNodes; i++) {\nellipse(x, startY + i * gap, 20, 20);\n}\ntextSize(16);\ntextAlign(CENTER, CENTER);\ntext(label, x, y + ((numNodes + 1) * gap) / 2);\n}\n\nfunction connectLayers(x1, y1, numNodes1, x2, y2, numNodes2) {\nlet gap1 = 40;\nlet gap2 = 40;\nlet startY1 = y1 - ((numNodes1 - 1) * gap1) / 2;\nlet startY2 = y2 - ((numNodes2 - 1) * gap2) / 2;\nfor (let i = 0; i &lt; numNodes1; i++) {\nfor (let j = 0; j &lt; numNodes2; j++) {\nline(x1, startY1 + i * gap1, x2, startY2 + j * gap2);\n}\n}\n}\n</code></pre>"},{"location":"sims/polygon/","title":"Polygon","text":"<p>In this example, we will use a more detailed prompt to control the placement of the sliders and their values.</p>"},{"location":"sims/polygon/#prompt","title":"Prompt","text":"<pre><code>Generate a p5.js sketch file that draws filled polygons on a 400x400 canvas.\n\nCreate one range control slider that allows the number of points on\nthe polygon to vary from 3 to 10 in steps of 1.  Make the default be 10.\n\nCreate a second range control slider that allows the color inside the polygon\nto be changed to any color.  Make the default value be 170 (blue).\n\nMake the sliders be the width of the canvas less the width of the\nlabels and values.  Place the sliders at the bottom\nof the canvas 100 points in from the left.\n\nUse the text() function at the end of the draw() function to display the\nname and current values of the sliders in the bottom left of the screen.\n</code></pre> <p>Polygon Demonstration</p>"},{"location":"sims/polygon/#response","title":"Response:","text":"<pre><code>// Ploygon with sliders for number of points and color\nlet canvasSize = 400;\nlet colorSlider;\nlet pointSlider;\n\nfunction setup() {\ncreateCanvas(canvasSize, canvasSize);\ncolorMode(HSB, 255);\ntextSize(16);\n\npointSlider = createSlider(3, 20, 3);\npointSlider.position(140, canvasSize - 40);\npointSlider.style('width', '180pt')\n\ncolorSlider = createSlider(0, 255, 100);\ncolorSlider.position(140, canvasSize - 20);\ncolorSlider.style('width', '180pt')\n}\n\nfunction draw() {\nbackground(240);\nlet colorValue = colorSlider.value();\nlet pointValue = pointSlider.value();\n\n// Draw the polygon, HSB\nfill(colorValue, 255, 255);\nbeginShape();\nfor (let i = 0; i &lt; pointValue; i++) {\nlet angle = map(i, 0, pointValue, 0, TWO_PI);\nlet x = canvasSize/2 + 150 * cos(angle);\nlet y = canvasSize/2 + 150 * sin(angle);\nvertex(x, y);\n}\nendShape(CLOSE);\n\n// Draw the slider values\nfill('black');\ntext(\"Number Points: \" + pointValue, 5, canvasSize - 25);\ntext(\"Color: \" + colorValue, 5, canvasSize - 5);  }\n</code></pre>"},{"location":"sims/pwm/","title":"Pulse Width Modulation","text":""},{"location":"sims/pwm/#pulse-width-modulation","title":"Pulse-Width Modulation","text":"<p>Pulse-width modulation is the way that microcontrollers send a precise signal to a  device such as a motor controller.  This simulation models an old CRT oscilloscope display with a bright green line on a black background.</p> <p>Pulse-Width Modulation</p>"},{"location":"sims/recursion-tree/","title":"Recursion Tree","text":"<p>Recursion trees are ideal ways to demonstrate recursive programming. In a recursive program, a function calls itself repeatedly. The result is often a beautiful complex image generated from a very small program.</p>"},{"location":"sims/recursion-tree/#prompt","title":"Prompt","text":"<pre><code>Generate a single file p5.js sketch on a 400x400 canvas.\nGenerate a drawing of a tree that uses recursion.\nAdd a slider that changes the angle between the branches of the tree.\n</code></pre>"},{"location":"sims/recursion-tree/#response","title":"Response","text":"<p>Creating a p5.js sketch that draws a recursive tree with a slider to adjust the angle between branches involves a few key steps. Here's a basic outline of the code:</p> <p>Setup the Canvas: Initialize a 400x400 canvas using createCanvas(400, 400) in the setup() function. Create a Slider: Create a slider for the branch angle using createSlider() and position it on the canvas. Draw the Tree: Use a recursive function to draw the tree in the draw() function. The angle between branches will be controlled by the slider's value. Recursive Function: The recursive function will draw a line for the branch and then call itself twice to draw the two smaller branches at the specified angle.</p> <pre><code>let angleSlider;\n\nfunction setup() {\nconst canvas = createCanvas(400, 400);\ncanvas.parent('canvas-container');\nangleSlider = createSlider(0, TWO_PI, PI / 4, 0.01);\nangleSlider.position(10, height + 10);\n}\n\nfunction draw() {\nbackground(255);\nstroke(0);\ntranslate(width / 2, height);\ndrawBranch(100);\n}\n\nfunction drawBranch(len) {\nline(0, 0, 0, -len);\ntranslate(0, -len);\n\nif (len &gt; 4) {\npush();\nrotate(angleSlider.value());\ndrawBranch(len * 0.67);\npop();\n\npush();\nrotate(-angleSlider.value());\ndrawBranch(len * 0.67);\npop();\n}\n}\n</code></pre> <p>In this code:</p> <p>angleSlider is a global variable to hold the slider. In setup(), the canvas is created, and the slider is initialized. draw() continuously updates the canvas, translating the origin to the bottom center and then drawing the tree. drawBranch(len) is the recursive function. It draws a line, then moves to the end of that line. If the branch is long enough, it draws two smaller branches at angles determined by the slider. This code provides a basic recursive tree. You can enhance it with more features like changing the color, stroke weight, or the number of branches.</p>"},{"location":"sims/seven-segment-display/","title":"7-Segment Display","text":"<p>Demo</p>"},{"location":"sims/sine-wave/","title":"Sine Wave","text":"<p>In this demo, we use three range control sliders to change the:</p> <ol> <li>amplitude</li> <li>period</li> <li>and phase</li> </ol> <p>of a sine wave.</p> <p>Sine Wave Demo</p>"},{"location":"sims/sine-wave/#prompt","title":"Prompt","text":"<p>Draw a sine wave with 3 sliders: Amplititude, Period and Phase Draw X and Y Axis Label Axis Make (0,0) be in the center and positive y is at the top</p>"},{"location":"sims/sine-wave/#result","title":"Result","text":"<pre><code>// sine wave with 3 sliders\nlet width = 600;\nlet height = 400;\nlet halfWidth = width / 2\nlet halfHeight = height / 2\nlet amplitude = 100;\nlet phase = 0;\n\nlet amplitudeSlider, periodSlider, phaseSlider;\nlet labelValueMargin = 120;\n\nfunction setup() {\ncreateCanvas(width, height);\ntextSize(16)\n\n// Create sliders\namplitudeSlider = createSlider(0, 200, 100);\namplitudeSlider.position(labelValueMargin, height - 20);\namplitudeSlider.style('width', width - labelValueMargin + 'px')\n\nperiodSlider = createSlider(1, 100, 50);\nperiodSlider.position(labelValueMargin, height - 40);\nperiodSlider.style('width', width - labelValueMargin + 'px')\n\nphaseSlider = createSlider(-PI*100, PI*100, 0, 0.01);\nphaseSlider.position(labelValueMargin, height - 60);\nphaseSlider.style('width', width - labelValueMargin + 'px')\n}\n\nfunction draw() {\nbackground(240);\n\namplitude = amplitudeSlider.value();\nperiod = periodSlider.value();\nphase = phaseSlider.value();\n\n// draw on the standard axis to keep text upright\ndrawAxis();\ntranslate(width / 2, height / 2); // Shift origin to center\nscale(1, -1); // Flip y-axis to make positive y up\n\ndrawSineWave(amplitude, 1/period, phase);\n}\n\nfunction setLineDash(list) {\ndrawingContext.setLineDash(list);\n}\n\nfunction drawAxis() {\nfill('black')\nstrokeWeight(0)\ntext('y', halfWidth-20, 15)\ntext('x', width-20, halfHeight + 20)\nstroke('gray')\nstrokeWeight(1)\nsetLineDash([5, 5])\n\n// horizontal line\nline(0, halfHeight, width, halfHeight)\n// vertical line\nline(halfWidth, 0, halfWidth, height)\n\nstroke(0)\nstrokeWeight(0);\nfill('black'); // Text color\ntext('Amplitude: ' + amplitude/100,    10, height - 5);\ntext('Period: '    + period,           10, height - 25);\ntext('Phase: '     + phase.toFixed(2), 10, height - 45);\n}\n\nfunction drawSineWave(amplitude, frequency, phase) {\nstroke('blue');\nstrokeWeight(3)\nnoFill();\n// turn off dash line\nsetLineDash([1, 0])\nbeginShape();\nfor (let x = -width / 2; x &lt; width / 2; x++) {\nlet y = amplitude * sin(frequency * (x - phase));\nvertex(x, y);\n}\nendShape();\n}\n</code></pre> <p>Challenge</p> <p>Create your own trigonometry demos by drawing the cosine and tangent functions.</p>"},{"location":"sims/slope-and-intercept/slope-and-intercept/","title":"Slope and Intercept","text":""},{"location":"sims/slope-and-intercept/slope-and-intercept/#prompt","title":"Prompt","text":"<p><pre><code>Generate a single file p5.js sketch on an 300x400 canvas.\nSet a variable \"width\" to be 300.\nSet a variable \"height\" to be 400.\nThe purpose of this sketch is to demonstrate the concepts of slope and intercept.\nDivide the canvas into two regions on top of each other.\nThe top region is called the \"drawing\" region. \nThe drawing region is 300x300 and has a light gray background of 240.\nThe bottom region the \"controls\" region.\nThe controls region holds the controls and is 300x100.\nThe background for the controls is white of 255.\nThe controls holds two sliders with labels and values on the left.\nThe width of the sliders are both 180px.\nThe slope slider ranges from -2 to 3 with the default of .5.\nThe intercept slider ranges from -100 to 100.\nDraw the slope and the intercept only in the top drawing region.\nThe top drawing region uses a cartesian coordinate system with the center at 150, 150.\nIn the drawing regsion positive Y is at tthe top.\nPlace this prompt at the top of the sketch a multi-line comment.\n</code></pre> Slope and Intercept Demo</p>"},{"location":"sims/slope-and-intercept/slope-and-intercept/#response","title":"Response","text":"<pre><code>/*\nGenerate a single file p5.js sketch on a 300x400 canvas.\nSet a global variable \"width\" to be 300.\nSet a global variable \"height\" to be 400.\nSet a global variable \"drawingRegionHeight\" to be 400.\nThe purpose of this sketch is to demonstrate the concepts of slope and intercept.\nDivide the canvas into two regions on top of each other.\nThe top region is called the \"drawing\" region.\nThe drawing region is 300x300 and has a light gray background of 240.\nThe bottom region is the \"controls\" region.\nThe controls region holds the controls and is 300x100.\nThe background for the controls is white of 255.\nThe controls holds two sliders with labels and values on the left.\nThe width of the sliders are both 180px.\nThe slope slider ranges from -2 to 3 with the default of .5.\nThe intercept slider ranges from -100 to 100.\nDraw the slope and the intercept only in the top drawing region.\nThe top drawing region uses a cartesian coordinate system with the center at 150, 150.\nIn the drawing region, positive Y is at the top.\nAdd vertical and horizontal grid lines every 50 pixels.\n*/\n\nlet width = 500;\nlet height = 400;\nlet drawingRegionHeight = 350;\nlet labelValueWidth = 110;\nlet slopeSlider, interceptSlider;\n\nfunction setup() {\ncreateCanvas(width, height);\ntextSize(16);\n\n// Slope slider\ntext('Slope', 20, 320);\nslopeSlider = createSlider(0, 5, 0.5, 0.1);\nslopeSlider.position(labelValueWidth, height - 45);\nslopeSlider.style('width', width -labelValueWidth - 20 + 'px');\n\n// Intercept slider\ntext('Intercept', 20, 360);\ninterceptSlider = createSlider(0, 300, 50, 1);\ninterceptSlider.position(labelValueWidth, height - 25);\ninterceptSlider.style('width', width -labelValueWidth - 20 + 'px');\n}\n\nfunction draw() {\n// Redraw drawing region\nnoStroke();\n\n// Drawing region\nfill(230);\nrect(0, 0, width, drawingRegionHeight);\n\n// Controls region\nfill(245);\nrect(0, drawingRegionHeight, width, 100);\n\nlet slope = slopeSlider.value();\nlet intercept = interceptSlider.value();\ndrawGridLines();\ndrawLine(slope, intercept);\ndrawLabelValues(slope, intercept);\n}\n\nfunction drawGridLines() {\nstroke('silver');\nstrokeWeight(1);\n// horizontal lines\nfor (let i=0; i&lt;9; i++) {\nline(0, i*50, width, i*50);\n}\n// Vertical lines\nfor (let i=0; i&lt;10; i++) {\nline(i*50, 0, i*50, drawingRegionHeight);\n}\n}\n\nfunction drawLabelValues(slope, intercept) {\nfill('black');\nstrokeWeight(0);\ntext('Slope: ' + slope, 10, drawingRegionHeight + 20);\ntext('Intercept: ' + intercept, 10, drawingRegionHeight + 40);\n}\n\nfunction drawLine() {\nlet slope = slopeSlider.value();\nlet intercept = interceptSlider.value();\n\n// Draw line in the drawing region\nstroke('red');\nstrokeWeight(2);\nline(0, drawingRegionHeight - intercept, width, drawingRegionHeight - (drawingRegionHeight * slope + intercept));\n}\n</code></pre>"},{"location":"sims/slope-and-intercept/slope/","title":"Slope and Intercept","text":"<p>Students that are learning charts and plotting will learn about the slope and intercept of a line. This one is tricky since processing uses the upper-left corner as the origin and y increases as we move down the page.</p> <p>Slope and Intercept</p>"},{"location":"sims/string-harmonics/","title":"String Harmonics","text":"<p>Contributed by Shawn McBurnie.</p> <p></p> <ul> <li>String Harmonics Demo No Sound</li> <li>String Harmonics Demo With Sound</li> </ul>"},{"location":"sims/string-harmonics/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch on a canvas of width=800 and height=200.\nGenerate a demonstration of string harmonics.\nAllow the string to vary from a frequency of 1 to 16 wave forms.\nAdd a slider that changes the frequency with a step of .1.\nAdd two small black circles at the endpoints of the wave.\nIndent the endpoints with a margin of 20 points from the edges.\nAdd a label and value to the left of the slider.\n</code></pre>"},{"location":"sims/string-harmonics/#lesson-plan-exploring-string-harmonics-with-interactive-simulation","title":"Lesson Plan: Exploring String Harmonics with Interactive Simulation","text":""},{"location":"sims/string-harmonics/#objective","title":"Objective","text":"<ul> <li>Understand the concept of string harmonics and how frequency affects sound pitch.</li> </ul>"},{"location":"sims/string-harmonics/#grade-level","title":"Grade Level","text":"<ul> <li>9th Grade</li> </ul>"},{"location":"sims/string-harmonics/#subject","title":"Subject","text":"<ul> <li>Physics (Sound and Waves)</li> </ul>"},{"location":"sims/string-harmonics/#materials-needed","title":"Materials Needed","text":"<ul> <li>Computers with internet access</li> <li>Access to the string harmonics simulation String Harmonics Simulation</li> <li>Notebooks and pens for taking notes</li> </ul>"},{"location":"sims/string-harmonics/#duration","title":"Duration","text":"<ul> <li>1 Class Period (45-60 minutes)</li> </ul>"},{"location":"sims/string-harmonics/#introduction-10-minutes","title":"Introduction (10 minutes)","text":"<ul> <li>Brief Lecture: Introduce the concept of harmonics in strings, explaining how vibrations at different frequencies produce different sounds.</li> <li>Demonstration: Show a real-world example, like a guitar string, and discuss how varying the tension changes the sound.</li> </ul>"},{"location":"sims/string-harmonics/#interactive-session-20-minutes","title":"Interactive Session (20 minutes)","text":"<ul> <li>Hands-On Activity: Students explore the string harmonics simulation. They are encouraged to adjust the frequency slider and observe changes in wave patterns and listen to the pitch changes.</li> <li>Guided Questions: As they explore, ask questions like, \"What happens to the wave as you increase the frequency?\" or \"How does the change in frequency affect the sound you hear?\"</li> </ul>"},{"location":"sims/string-harmonics/#group-discussion-10-minutes","title":"Group Discussion (10 minutes)","text":"<ul> <li>Sharing Observations: Students discuss their findings in small groups, focusing on the relationship between frequency, wave pattern, and pitch.</li> <li>Connecting Theory and Practice: Discuss how this simulation relates to real-life instruments and sound production.</li> </ul>"},{"location":"sims/string-harmonics/#application-activity-10-minutes","title":"Application Activity (10 minutes)","text":"<ul> <li>Creative Exploration: Ask students to imagine and sketch a new musical instrument that uses the principles of string harmonics.</li> <li>Discussion: Share ideas within the class, discussing the feasibility and creativity of the designs.</li> </ul>"},{"location":"sims/string-harmonics/#conclusion-5-minutes","title":"Conclusion (5 minutes)","text":"<ul> <li>Recap: Summarize key concepts learned about harmonics, frequency, and sound production.</li> <li>Homework Assignment: Students write a brief report on how understanding string harmonics is essential in designing musical instruments.</li> </ul>"},{"location":"sims/string-harmonics/#assessment","title":"Assessment","text":"<ul> <li>Participation in the interactive session and group discussion.</li> <li>Quality and creativity of the musical instrument design.</li> <li>Understanding demonstrated in the homework report.</li> </ul>"},{"location":"sims/string-harmonics/#a-story-about-this-microsim","title":"A Story about this MicroSim","text":"<p>I met Shawn at a ChatGPT meetup and I gave him a short demo of MicroSims.  The meetup was over lunch.  By supper time he had already finished his first MicroSim, despite never having used Processing before.  AND he figured out how to get sound working.  WOW!</p>"},{"location":"sims/supply-and-demand/","title":"Supply and Demand","text":""},{"location":"sims/supply-and-demand/#prompt","title":"Prompt","text":"<p> <pre><code>Create a single file p5.js sketch that replicates the function of this image.\n</code></pre></p> <ul> <li>Link to Demo</li> </ul>"},{"location":"sims/supply-and-demand/#lesson-plan","title":"Lesson Plan","text":"<p>This is a lesson plan for 10th-grade students in a microeconomics class. The lesson plan will include objectives, materials, procedure, and assessment for a lab activity using the p5.js sketch.</p> <ul> <li>Course: Microeconomics</li> <li>Grade Level: 10th Grade</li> <li>Duration: 45 minutes</li> </ul>"},{"location":"sims/supply-and-demand/#objectives","title":"Objectives","text":"<ul> <li>Students will understand the concept of the demand curve.</li> <li>Students will learn how changes in price affect the quantity demanded.</li> <li>Students will interact with a p5.js sketch to observe these economic principles visually.</li> </ul>"},{"location":"sims/supply-and-demand/#materials","title":"Materials","text":"<ul> <li>Computers with internet access and a web browser.</li> <li>Projector to demonstrate the p5.js lab.</li> <li>Copies of the demand curve lab worksheet.</li> </ul>"},{"location":"sims/supply-and-demand/#introduction-5-minutes","title":"Introduction (5 minutes)","text":"<ul> <li>Begin the lesson with a brief review of supply and demand.</li> <li>Introduce the demand curve as a visual representation of the relationship between price and quantity demanded.</li> </ul>"},{"location":"sims/supply-and-demand/#instruction-10-minutes","title":"Instruction (10 minutes)","text":"<ul> <li>Explain how the demand curve is typically downward sloping.</li> <li>Describe how to read the demand curve.</li> <li>Demonstrate the interactive p5.js lab on the projector.</li> </ul>"},{"location":"sims/supply-and-demand/#activity-procedure-20-minutes","title":"Activity Procedure (20 minutes)","text":"<ul> <li>Students will access the p5.js sketch on their computers.</li> <li>They will manipulate the price slider and observe changes in quantity demanded.</li> <li>Students will complete the lab worksheet with questions related to their observations.</li> </ul>"},{"location":"sims/supply-and-demand/#discussion-5-minutes","title":"Discussion (5 minutes)","text":"<ul> <li>Regroup and discuss the findings as a class.</li> <li>Highlight the key economic principles demonstrated by the lab.</li> </ul>"},{"location":"sims/supply-and-demand/#assessment-5-minutes","title":"Assessment (5 minutes)","text":"<ul> <li>Review the lab worksheet answers as a class.</li> <li>Provide feedback on their understanding and clear up any misconceptions.</li> </ul>"},{"location":"sims/supply-and-demand/#extensions","title":"Extensions","text":"<ul> <li>Students can explore how factors other than price affect the demand curve.</li> <li>For homework, students could be asked to draw their own demand curves based on different scenarios.</li> </ul>"},{"location":"sims/supply-and-demand/#closure","title":"Closure","text":"<ul> <li>Summarize the day's lesson and discuss how the demand curve relates to real-world economics.</li> </ul>"},{"location":"sims/supply-and-demand/#sample-code","title":"Sample Code","text":"<p>The code has several parts:</p> <ol> <li>Global Variables - allocate memory and set default layout values</li> <li>setup() - runs only once</li> <li>draw() - continually runs as users change the slider</li> </ol> <pre><code>let width = 400;\nlet height = 400;\nlet margin = 50; // side around the plot\nlet priceSlider;\nlet demandCurve;\nlet maxPrice = 200;\nlet maxQuantity = 200;\nlet price = 100;\nlet quantity = 100;\nlet labelValueMargin = 140\n\nfunction setup() {\nconst canvas = createCanvas(width, height);\ncanvas.parent('canvas-container');\ntextSize(16);\n\n// Create a slider element for price adjustment\npriceSlider = createSlider(0, maxPrice, price);\npriceSlider.position(labelValueMargin, height - 35);\npriceSlider.style('width', width - labelValueMargin - 20 + 'px');\n\n// Define the demand curve as a function\ndemandCurve = (p) =&gt; maxQuantity - p;\n}\n\nfunction draw() {\nbackground(240);\n\n// Update quantity based on the current value of the price slider\nprice = priceSlider.value();\nquantity = demandCurve(price);\n\n// Draw the axes\nstroke(0);\nstrokeWeight(1);\nline(margin, margin, margin, height - margin); // Vertical Y-axis\n// Horizontal X axis\nline(margin, height - margin, width - margin, height - margin);\nstrokeWeight(0);\ntext('Price', 30, 40); // Y-axis label\ntext('Quantity Sold', width - margin - 70, height - margin - 10); // X-axis label\n\n// Draw the demand curve\nstroke(255, 0, 0);\nstrokeWeight(3);\nline(margin, margin, width - margin, height - margin);\n\n// Draw a point on the demand curve based on current price and quantity\nfill(0, 0, 255);\nnoStroke();\nx = map(quantity, 0, maxQuantity, margin, height - margin)\ny = map(price, 0, maxPrice, width - margin, margin)\ncircle(x,y,10);\n\nstroke('silver');\nline(margin, y, x, y)\nline(x, y, x, height - margin)\n\nfill(0);\nnoStroke();\ncircle(\nmargin, map(price, 0, maxPrice, width - margin, margin), 10);\n\ncircle(\nmap(quantity, 0, maxQuantity, margin, height - margin), height - margin, 10);\n\n// Text annotations\nnoStroke();\nfill(0);\ntextSize(16);\ntext(\"Price and Demand Curve\", 120, 30);\ntext(`Input Price: ${price}`, 10, height - 20);\n\ntext(`Output: Quantity = ${quantity}`, 70, 490);\ntextSize(12);\n\n// instructions\nlet keyMargin = 180;\ntext(`Adjust price by moving the slider.`,     keyMargin, margin);\ntext(`Note that as the input (price) changes`, keyMargin, margin + 20);\ntext(`    the quantity sold also changes.`,    keyMargin, margin + 40);\ntext(`At high prices a low quantity is sold.`, keyMargin, margin + 60);\ntext(`At low prices a high quantity is sold.`, keyMargin, margin + 80);\n}\n</code></pre>"},{"location":"sims/wave-sums/","title":"Wave Sum","text":""},{"location":"sims/wave-sums/#wave-sums","title":"Wave Sums","text":"<p>This lab demonstrates calculating the sum of sine waves of different lengths. Understanding how to convert waves from spacial domains into frequency domains is a key component of signal processing and understanding the FFT algorithm for doing Fast-Fourier Transforms.</p> <p>Wave Sums Demo</p>"}]}